
lab1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005db4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005f8c  08005f8c  00015f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fcc  08005fcc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005fcc  08005fcc  00015fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fd4  08005fd4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fd4  08005fd4  00015fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fd8  08005fd8  00015fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  20000010  08005fe8  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08005fe8  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001755d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a04  00000000  00000000  000375dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  00039fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff8  00000000  00000000  0003b450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003c448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017387  00000000  00000000  00063e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e9cd  00000000  00000000  0007b209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058d0  00000000  00000000  00189bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0018f4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005f74 	.word	0x08005f74

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005f74 	.word	0x08005f74

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fc95 	bl	8000e46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f82c 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fa20 	bl	8000964 <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 f9f4 	bl	8000910 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f90c 	bl	8000744 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800052c:	f000 f954 	bl	80007d8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000530:	f000 f86e 	bl	8000610 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000534:	f000 f99e 	bl	8000874 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000538:	480a      	ldr	r0, [pc, #40]	; (8000564 <main+0x50>)
 800053a:	f004 f94f 	bl	80047dc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 800053e:	480a      	ldr	r0, [pc, #40]	; (8000568 <main+0x54>)
 8000540:	f004 f8dc 	bl	80046fc <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
 8000544:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000548:	4908      	ldr	r1, [pc, #32]	; (800056c <main+0x58>)
 800054a:	4809      	ldr	r0, [pc, #36]	; (8000570 <main+0x5c>)
 800054c:	f001 f8e8 	bl	8001720 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  timestamp = __HAL_TIM_GET_COUNTER(&htim2);
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <main+0x50>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000556:	2200      	movs	r2, #0
 8000558:	461c      	mov	r4, r3
 800055a:	4615      	mov	r5, r2
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <main+0x60>)
 800055e:	e9c3 4500 	strd	r4, r5, [r3]
 8000562:	e7f5      	b.n	8000550 <main+0x3c>
 8000564:	2000018c 	.word	0x2000018c
 8000568:	200001d8 	.word	0x200001d8
 800056c:	20000238 	.word	0x20000238
 8000570:	2000002c 	.word	0x2000002c
 8000574:	20000228 	.word	0x20000228

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0318 	add.w	r3, r7, #24
 8000582:	2238      	movs	r2, #56	; 0x38
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f005 fcc8 	bl	8005f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800059a:	2000      	movs	r0, #0
 800059c:	f003 f826 	bl	80035ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005aa:	2340      	movs	r3, #64	; 0x40
 80005ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b2:	2302      	movs	r3, #2
 80005b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005b6:	2304      	movs	r3, #4
 80005b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ba:	2355      	movs	r3, #85	; 0x55
 80005bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005be:	2302      	movs	r3, #2
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0318 	add.w	r3, r7, #24
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 f8c0 	bl	8003754 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005da:	f000 fa4b 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2303      	movs	r3, #3
 80005e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2104      	movs	r1, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fbbe 	bl	8003d78 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000602:	f000 fa37 	bl	8000a74 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08c      	sub	sp, #48	; 0x30
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2220      	movs	r2, #32
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f005 fc77 	bl	8005f1c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800062e:	4b41      	ldr	r3, [pc, #260]	; (8000734 <MX_ADC1_Init+0x124>)
 8000630:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000634:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000636:	4b3f      	ldr	r3, [pc, #252]	; (8000734 <MX_ADC1_Init+0x124>)
 8000638:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800063c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063e:	4b3d      	ldr	r3, [pc, #244]	; (8000734 <MX_ADC1_Init+0x124>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000644:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <MX_ADC1_Init+0x124>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800064a:	4b3a      	ldr	r3, [pc, #232]	; (8000734 <MX_ADC1_Init+0x124>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000650:	4b38      	ldr	r3, [pc, #224]	; (8000734 <MX_ADC1_Init+0x124>)
 8000652:	2201      	movs	r2, #1
 8000654:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000656:	4b37      	ldr	r3, [pc, #220]	; (8000734 <MX_ADC1_Init+0x124>)
 8000658:	2204      	movs	r2, #4
 800065a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800065c:	4b35      	ldr	r3, [pc, #212]	; (8000734 <MX_ADC1_Init+0x124>)
 800065e:	2200      	movs	r2, #0
 8000660:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000662:	4b34      	ldr	r3, [pc, #208]	; (8000734 <MX_ADC1_Init+0x124>)
 8000664:	2201      	movs	r2, #1
 8000666:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <MX_ADC1_Init+0x124>)
 800066a:	2203      	movs	r2, #3
 800066c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066e:	4b31      	ldr	r3, [pc, #196]	; (8000734 <MX_ADC1_Init+0x124>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8000676:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <MX_ADC1_Init+0x124>)
 8000678:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800067c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <MX_ADC1_Init+0x124>)
 8000680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000684:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000686:	4b2b      	ldr	r3, [pc, #172]	; (8000734 <MX_ADC1_Init+0x124>)
 8000688:	2201      	movs	r2, #1
 800068a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800068e:	4b29      	ldr	r3, [pc, #164]	; (8000734 <MX_ADC1_Init+0x124>)
 8000690:	2200      	movs	r2, #0
 8000692:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000694:	4b27      	ldr	r3, [pc, #156]	; (8000734 <MX_ADC1_Init+0x124>)
 8000696:	2200      	movs	r2, #0
 8000698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069c:	4825      	ldr	r0, [pc, #148]	; (8000734 <MX_ADC1_Init+0x124>)
 800069e:	f000 fe83 	bl	80013a8 <HAL_ADC_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80006a8:	f000 f9e4 	bl	8000a74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b4:	4619      	mov	r1, r3
 80006b6:	481f      	ldr	r0, [pc, #124]	; (8000734 <MX_ADC1_Init+0x124>)
 80006b8:	f002 f950 	bl	800295c <HAL_ADCEx_MultiModeConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80006c2:	f000 f9d7 	bl	8000a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_ADC1_Init+0x128>)
 80006c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ca:	2306      	movs	r3, #6
 80006cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80006ce:	2307      	movs	r3, #7
 80006d0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006d2:	237f      	movs	r3, #127	; 0x7f
 80006d4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d6:	2304      	movs	r3, #4
 80006d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	4619      	mov	r1, r3
 80006e2:	4814      	ldr	r0, [pc, #80]	; (8000734 <MX_ADC1_Init+0x124>)
 80006e4:	f001 fb78 	bl	8001dd8 <HAL_ADC_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006ee:	f000 f9c1 	bl	8000a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006f2:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_ADC1_Init+0x12c>)
 80006f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006f6:	230c      	movs	r3, #12
 80006f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	480d      	ldr	r0, [pc, #52]	; (8000734 <MX_ADC1_Init+0x124>)
 8000700:	f001 fb6a 	bl	8001dd8 <HAL_ADC_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800070a:	f000 f9b3 	bl	8000a74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_ADC1_Init+0x130>)
 8000710:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000712:	2312      	movs	r3, #18
 8000714:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4619      	mov	r1, r3
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <MX_ADC1_Init+0x124>)
 800071c:	f001 fb5c 	bl	8001dd8 <HAL_ADC_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000726:	f000 f9a5 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	3730      	adds	r7, #48	; 0x30
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000002c 	.word	0x2000002c
 8000738:	04300002 	.word	0x04300002
 800073c:	08600004 	.word	0x08600004
 8000740:	1d500080 	.word	0x1d500080

08000744 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000748:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800074a:	4a22      	ldr	r2, [pc, #136]	; (80007d4 <MX_LPUART1_UART_Init+0x90>)
 800074c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800074e:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000750:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000754:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000762:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000768:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800076a:	220c      	movs	r2, #12
 800076c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800077c:	2200      	movs	r2, #0
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000782:	2200      	movs	r2, #0
 8000784:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000786:	4812      	ldr	r0, [pc, #72]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 8000788:	f004 fd5a 	bl	8005240 <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f96f 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000796:	2100      	movs	r1, #0
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 800079a:	f005 faf5 	bl	8005d88 <HAL_UARTEx_SetTxFifoThreshold>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007a4:	f000 f966 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a8:	2100      	movs	r1, #0
 80007aa:	4809      	ldr	r0, [pc, #36]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 80007ac:	f005 fb2a 	bl	8005e04 <HAL_UARTEx_SetRxFifoThreshold>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007b6:	f000 f95d 	bl	8000a74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_LPUART1_UART_Init+0x8c>)
 80007bc:	f005 faab 	bl	8005d16 <HAL_UARTEx_DisableFifoMode>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007c6:	f000 f955 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000f8 	.word	0x200000f8
 80007d4:	40008000 	.word	0x40008000

080007d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f6:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_TIM2_Init+0x94>)
 80007f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_TIM2_Init+0x94>)
 8000800:	22a9      	movs	r2, #169	; 0xa9
 8000802:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <MX_TIM2_Init+0x94>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000000;
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_TIM2_Init+0x94>)
 800080c:	4a18      	ldr	r2, [pc, #96]	; (8000870 <MX_TIM2_Init+0x98>)
 800080e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000810:	4b16      	ldr	r3, [pc, #88]	; (800086c <MX_TIM2_Init+0x94>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_TIM2_Init+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081c:	4813      	ldr	r0, [pc, #76]	; (800086c <MX_TIM2_Init+0x94>)
 800081e:	f003 ff15 	bl	800464c <HAL_TIM_Base_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000828:	f000 f924 	bl	8000a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000830:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	4619      	mov	r1, r3
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <MX_TIM2_Init+0x94>)
 800083a:	f004 f997 	bl	8004b6c <HAL_TIM_ConfigClockSource>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000844:	f000 f916 	bl	8000a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_TIM2_Init+0x94>)
 8000856:	f004 fc17 	bl	8005088 <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000860:	f000 f908 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000018c 	.word	0x2000018c
 8000870:	004c4b40 	.word	0x004c4b40

08000874 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000892:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <MX_TIM4_Init+0x94>)
 8000894:	4a1d      	ldr	r2, [pc, #116]	; (800090c <MX_TIM4_Init+0x98>)
 8000896:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_TIM4_Init+0x94>)
 800089a:	22a9      	movs	r2, #169	; 0xa9
 800089c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_TIM4_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 333;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_TIM4_Init+0x94>)
 80008a6:	f240 124d 	movw	r2, #333	; 0x14d
 80008aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_TIM4_Init+0x94>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_TIM4_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008b8:	4813      	ldr	r0, [pc, #76]	; (8000908 <MX_TIM4_Init+0x94>)
 80008ba:	f003 fec7 	bl	800464c <HAL_TIM_Base_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80008c4:	f000 f8d6 	bl	8000a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4619      	mov	r1, r3
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <MX_TIM4_Init+0x94>)
 80008d6:	f004 f949 	bl	8004b6c <HAL_TIM_ConfigClockSource>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80008e0:	f000 f8c8 	bl	8000a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008e4:	2320      	movs	r3, #32
 80008e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_TIM4_Init+0x94>)
 80008f2:	f004 fbc9 	bl	8005088 <HAL_TIMEx_MasterConfigSynchronization>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80008fc:	f000 f8ba 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200001d8 	.word	0x200001d8
 800090c:	40000800 	.word	0x40000800

08000910 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_DMA_Init+0x50>)
 8000918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800091a:	4a11      	ldr	r2, [pc, #68]	; (8000960 <MX_DMA_Init+0x50>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6493      	str	r3, [r2, #72]	; 0x48
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_DMA_Init+0x50>)
 8000924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_DMA_Init+0x50>)
 8000930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <MX_DMA_Init+0x50>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6493      	str	r3, [r2, #72]	; 0x48
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_DMA_Init+0x50>)
 800093c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	200b      	movs	r0, #11
 800094c:	f002 f9e9 	bl	8002d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000950:	200b      	movs	r0, #11
 8000952:	f002 fa00 	bl	8002d56 <HAL_NVIC_EnableIRQ>

}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <MX_GPIO_Init+0xd4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a2e      	ldr	r2, [pc, #184]	; (8000a38 <MX_GPIO_Init+0xd4>)
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <MX_GPIO_Init+0xd4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000992:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <MX_GPIO_Init+0xd4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a28      	ldr	r2, [pc, #160]	; (8000a38 <MX_GPIO_Init+0xd4>)
 8000998:	f043 0320 	orr.w	r3, r3, #32
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0320 	and.w	r3, r3, #32
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2120      	movs	r1, #32
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f002 fdc7 	bl	8003574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <MX_GPIO_Init+0xd8>)
 80009fe:	f002 fc37 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a02:	2320      	movs	r3, #32
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1c:	f002 fc28 	bl	8003270 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	2028      	movs	r0, #40	; 0x28
 8000a26:	f002 f97c 	bl	8002d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a2a:	2028      	movs	r0, #40	; 0x28
 8000a2c:	f002 f993 	bl	8002d56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	48000800 	.word	0x48000800

08000a40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	4808      	ldr	r0, [pc, #32]	; (8000a6c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a4c:	4281      	cmp	r1, r0
 8000a4e:	d107      	bne.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		count += 4294967296 ;
 8000a50:	4907      	ldr	r1, [pc, #28]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a56:	1c4b      	adds	r3, r1, #1
 8000a58:	4602      	mov	r2, r0
 8000a5a:	4905      	ldr	r1, [pc, #20]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a5c:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	2000018c 	.word	0x2000018c
 8000a70:	20000230 	.word	0x20000230

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>
	...

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <HAL_MspInit+0x44>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <HAL_MspInit+0x44>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6613      	str	r3, [r2, #96]	; 0x60
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <HAL_MspInit+0x44>)
 8000a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_MspInit+0x44>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <HAL_MspInit+0x44>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x44>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ab6:	f002 fe3d 	bl	8003734 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0a0      	sub	sp, #128	; 0x80
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae0:	f107 0318 	add.w	r3, r7, #24
 8000ae4:	2254      	movs	r2, #84	; 0x54
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f005 fa17 	bl	8005f1c <memset>
  if(hadc->Instance==ADC1)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000af6:	d17f      	bne.n	8000bf8 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000af8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000afc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000afe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b02:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b04:	f107 0318 	add.w	r3, r7, #24
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 fb51 	bl	80041b0 <HAL_RCCEx_PeriphCLKConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b14:	f7ff ffae 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b18:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <HAL_ADC_MspInit+0x138>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	4a38      	ldr	r2, [pc, #224]	; (8000c00 <HAL_ADC_MspInit+0x138>)
 8000b1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b24:	4b36      	ldr	r3, [pc, #216]	; (8000c00 <HAL_ADC_MspInit+0x138>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b30:	4b33      	ldr	r3, [pc, #204]	; (8000c00 <HAL_ADC_MspInit+0x138>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b34:	4a32      	ldr	r2, [pc, #200]	; (8000c00 <HAL_ADC_MspInit+0x138>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3c:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <HAL_ADC_MspInit+0x138>)
 8000b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b48:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <HAL_ADC_MspInit+0x138>)
 8000b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4c:	4a2c      	ldr	r2, [pc, #176]	; (8000c00 <HAL_ADC_MspInit+0x138>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b54:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <HAL_ADC_MspInit+0x138>)
 8000b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b60:	2302      	movs	r3, #2
 8000b62:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b64:	2303      	movs	r3, #3
 8000b66:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b70:	4619      	mov	r1, r3
 8000b72:	4824      	ldr	r0, [pc, #144]	; (8000c04 <HAL_ADC_MspInit+0x13c>)
 8000b74:	f002 fb7c 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f002 fb6f 	bl	8003270 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <HAL_ADC_MspInit+0x140>)
 8000b94:	4a1d      	ldr	r2, [pc, #116]	; (8000c0c <HAL_ADC_MspInit+0x144>)
 8000b96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <HAL_ADC_MspInit+0x140>)
 8000b9a:	2205      	movs	r2, #5
 8000b9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <HAL_ADC_MspInit+0x140>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_ADC_MspInit+0x140>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <HAL_ADC_MspInit+0x140>)
 8000bac:	2280      	movs	r2, #128	; 0x80
 8000bae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_ADC_MspInit+0x140>)
 8000bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <HAL_ADC_MspInit+0x140>)
 8000bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bbe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_ADC_MspInit+0x140>)
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_ADC_MspInit+0x140>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bcc:	480e      	ldr	r0, [pc, #56]	; (8000c08 <HAL_ADC_MspInit+0x140>)
 8000bce:	f002 f8dd 	bl	8002d8c <HAL_DMA_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000bd8:	f7ff ff4c 	bl	8000a74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <HAL_ADC_MspInit+0x140>)
 8000be0:	655a      	str	r2, [r3, #84]	; 0x54
 8000be2:	4a09      	ldr	r2, [pc, #36]	; (8000c08 <HAL_ADC_MspInit+0x140>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2012      	movs	r0, #18
 8000bee:	f002 f898 	bl	8002d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000bf2:	2012      	movs	r0, #18
 8000bf4:	f002 f8af 	bl	8002d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	3780      	adds	r7, #128	; 0x80
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40021000 	.word	0x40021000
 8000c04:	48000800 	.word	0x48000800
 8000c08:	20000098 	.word	0x20000098
 8000c0c:	40020008 	.word	0x40020008

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b09e      	sub	sp, #120	; 0x78
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	2254      	movs	r2, #84	; 0x54
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f005 f973 	bl	8005f1c <memset>
  if(huart->Instance==LPUART1)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a1f      	ldr	r2, [pc, #124]	; (8000cb8 <HAL_UART_MspInit+0xa8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d136      	bne.n	8000cae <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c40:	2320      	movs	r3, #32
 8000c42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 faaf 	bl	80041b0 <HAL_RCCEx_PeriphCLKConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c58:	f7ff ff0c 	bl	8000a74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <HAL_UART_MspInit+0xac>)
 8000c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c60:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <HAL_UART_MspInit+0xac>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <HAL_UART_MspInit+0xac>)
 8000c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_UART_MspInit+0xac>)
 8000c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c78:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_UART_MspInit+0xac>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_UART_MspInit+0xac>)
 8000c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c9c:	230c      	movs	r3, #12
 8000c9e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000caa:	f002 fae1 	bl	8003270 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3778      	adds	r7, #120	; 0x78
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40008000 	.word	0x40008000
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd0:	d114      	bne.n	8000cfc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_TIM_Base_MspInit+0x68>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <HAL_TIM_Base_MspInit+0x68>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_TIM_Base_MspInit+0x68>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	201c      	movs	r0, #28
 8000cf0:	f002 f817 	bl	8002d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cf4:	201c      	movs	r0, #28
 8000cf6:	f002 f82e 	bl	8002d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cfa:	e010      	b.n	8000d1e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_TIM_Base_MspInit+0x6c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d10b      	bne.n	8000d1e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_TIM_Base_MspInit+0x68>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_TIM_Base_MspInit+0x68>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	6593      	str	r3, [r2, #88]	; 0x58
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_TIM_Base_MspInit+0x68>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40000800 	.word	0x40000800

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 f8b6 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <DMA1_Channel1_IRQHandler+0x10>)
 8000d8a:	f002 f922 	bl	8002fd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000098 	.word	0x20000098

08000d98 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <ADC1_2_IRQHandler+0x10>)
 8000d9e:	f000 fd93 	bl	80018c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000002c 	.word	0x2000002c

08000dac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <TIM2_IRQHandler+0x10>)
 8000db2:	f003 fd8b 	bl	80048cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000018c 	.word	0x2000018c

08000dc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000dc4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dc8:	f002 fbec 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <SystemInit+0x20>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <SystemInit+0x20>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000df6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000df8:	f7ff ffea 	bl	8000dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	; (8000e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <LoopForever+0xe>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	; (8000e40 <LoopForever+0x16>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e22:	f005 f883 	bl	8005f2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e26:	f7ff fb75 	bl	8000514 <main>

08000e2a <LoopForever>:

LoopForever:
    b LoopForever
 8000e2a:	e7fe      	b.n	8000e2a <LoopForever>
  ldr   r0, =_estack
 8000e2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e38:	08005fdc 	.word	0x08005fdc
  ldr r2, =_sbss
 8000e3c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e40:	20000494 	.word	0x20000494

08000e44 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC3_IRQHandler>

08000e46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e50:	2003      	movs	r0, #3
 8000e52:	f001 ff5b 	bl	8002d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 f80e 	bl	8000e78 <HAL_InitTick>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	71fb      	strb	r3, [r7, #7]
 8000e66:	e001      	b.n	8000e6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e68:	f7ff fe0a 	bl	8000a80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e6c:	79fb      	ldrb	r3, [r7, #7]

}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_InitTick+0x68>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d022      	beq.n	8000ed2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_InitTick+0x6c>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <HAL_InitTick+0x68>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e98:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f001 ff66 	bl	8002d72 <HAL_SYSTICK_Config>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10f      	bne.n	8000ecc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b0f      	cmp	r3, #15
 8000eb0:	d809      	bhi.n	8000ec6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eba:	f001 ff32 	bl	8002d22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_InitTick+0x70>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	e007      	b.n	8000ed6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	e004      	b.n	8000ed6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e001      	b.n	8000ed6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_IncTick+0x1c>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a03      	ldr	r2, [pc, #12]	; (8000f08 <HAL_IncTick+0x1c>)
 8000efc:	6013      	str	r3, [r2, #0]
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	20000490 	.word	0x20000490
 8000f0c:	20000008 	.word	0x20000008

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000490 	.word	0x20000490

08000f28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	609a      	str	r2, [r3, #8]
}
 8000f42:	bf00      	nop
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	609a      	str	r2, [r3, #8]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3360      	adds	r3, #96	; 0x60
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <LL_ADC_SetOffset+0x44>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fc8:	bf00      	nop
 8000fca:	371c      	adds	r7, #28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	03fff000 	.word	0x03fff000

08000fd8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3360      	adds	r3, #96	; 0x60
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3360      	adds	r3, #96	; 0x60
 8001014:	461a      	mov	r2, r3
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	431a      	orrs	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800102e:	bf00      	nop
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800103a:	b480      	push	{r7}
 800103c:	b087      	sub	sp, #28
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3360      	adds	r3, #96	; 0x60
 800104a:	461a      	mov	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	431a      	orrs	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001064:	bf00      	nop
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001070:	b480      	push	{r7}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	3360      	adds	r3, #96	; 0x60
 8001080:	461a      	mov	r2, r3
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	431a      	orrs	r2, r3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800109a:	bf00      	nop
 800109c:	371c      	adds	r7, #28
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	431a      	orrs	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	615a      	str	r2, [r3, #20]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010e0:	2301      	movs	r3, #1
 80010e2:	e000      	b.n	80010e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b087      	sub	sp, #28
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3330      	adds	r3, #48	; 0x30
 8001102:	461a      	mov	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	0a1b      	lsrs	r3, r3, #8
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	4413      	add	r3, r2
 8001110:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	f003 031f 	and.w	r3, r3, #31
 800111c:	211f      	movs	r1, #31
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	401a      	ands	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	0e9b      	lsrs	r3, r3, #26
 800112a:	f003 011f 	and.w	r1, r3, #31
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	fa01 f303 	lsl.w	r3, r1, r3
 8001138:	431a      	orrs	r2, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800113e:	bf00      	nop
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800115e:	2301      	movs	r3, #1
 8001160:	e000      	b.n	8001164 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3314      	adds	r3, #20
 8001180:	461a      	mov	r2, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	0e5b      	lsrs	r3, r3, #25
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	4413      	add	r3, r2
 800118e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	0d1b      	lsrs	r3, r3, #20
 8001198:	f003 031f 	and.w	r3, r3, #31
 800119c:	2107      	movs	r1, #7
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	401a      	ands	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	0d1b      	lsrs	r3, r3, #20
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	431a      	orrs	r2, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011ba:	bf00      	nop
 80011bc:	371c      	adds	r7, #28
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011e0:	43db      	mvns	r3, r3
 80011e2:	401a      	ands	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0318 	and.w	r3, r3, #24
 80011ea:	4908      	ldr	r1, [pc, #32]	; (800120c <LL_ADC_SetChannelSingleDiff+0x44>)
 80011ec:	40d9      	lsrs	r1, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	400b      	ands	r3, r1
 80011f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011f6:	431a      	orrs	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	0007ffff 	.word	0x0007ffff

08001210 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 031f 	and.w	r3, r3, #31
}
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001258:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6093      	str	r3, [r2, #8]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800127c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001280:	d101      	bne.n	8001286 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80012a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012d0:	d101      	bne.n	80012d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012f8:	f043 0201 	orr.w	r2, r3, #1
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <LL_ADC_IsEnabled+0x18>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <LL_ADC_IsEnabled+0x1a>
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001342:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001346:	f043 0204 	orr.w	r2, r3, #4
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	2b04      	cmp	r3, #4
 800136c:	d101      	bne.n	8001372 <LL_ADC_REG_IsConversionOngoing+0x18>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	2b08      	cmp	r3, #8
 8001392:	d101      	bne.n	8001398 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001394:	2301      	movs	r3, #1
 8001396:	e000      	b.n	800139a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e1a9      	b.n	8001716 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d109      	bne.n	80013e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff fb79 	bl	8000ac8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff3f 	bl	800126c <LL_ADC_IsDeepPowerDownEnabled>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d004      	beq.n	80013fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff25 	bl	8001248 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff5a 	bl	80012bc <LL_ADC_IsInternalRegulatorEnabled>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d115      	bne.n	800143a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff3e 	bl	8001294 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001418:	4b9c      	ldr	r3, [pc, #624]	; (800168c <HAL_ADC_Init+0x2e4>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	099b      	lsrs	r3, r3, #6
 800141e:	4a9c      	ldr	r2, [pc, #624]	; (8001690 <HAL_ADC_Init+0x2e8>)
 8001420:	fba2 2303 	umull	r2, r3, r2, r3
 8001424:	099b      	lsrs	r3, r3, #6
 8001426:	3301      	adds	r3, #1
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800142c:	e002      	b.n	8001434 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3b01      	subs	r3, #1
 8001432:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f9      	bne.n	800142e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff ff3c 	bl	80012bc <LL_ADC_IsInternalRegulatorEnabled>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10d      	bne.n	8001466 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144e:	f043 0210 	orr.w	r2, r3, #16
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145a:	f043 0201 	orr.w	r2, r3, #1
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff75 	bl	800135a <LL_ADC_REG_IsConversionOngoing>
 8001470:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 8142 	bne.w	8001704 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f040 813e 	bne.w	8001704 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001490:	f043 0202 	orr.w	r2, r3, #2
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff35 	bl	800130c <LL_ADC_IsEnabled>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d141      	bne.n	800152c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014b0:	d004      	beq.n	80014bc <HAL_ADC_Init+0x114>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a77      	ldr	r2, [pc, #476]	; (8001694 <HAL_ADC_Init+0x2ec>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d10f      	bne.n	80014dc <HAL_ADC_Init+0x134>
 80014bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80014c0:	f7ff ff24 	bl	800130c <LL_ADC_IsEnabled>
 80014c4:	4604      	mov	r4, r0
 80014c6:	4873      	ldr	r0, [pc, #460]	; (8001694 <HAL_ADC_Init+0x2ec>)
 80014c8:	f7ff ff20 	bl	800130c <LL_ADC_IsEnabled>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4323      	orrs	r3, r4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	bf0c      	ite	eq
 80014d4:	2301      	moveq	r3, #1
 80014d6:	2300      	movne	r3, #0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	e012      	b.n	8001502 <HAL_ADC_Init+0x15a>
 80014dc:	486e      	ldr	r0, [pc, #440]	; (8001698 <HAL_ADC_Init+0x2f0>)
 80014de:	f7ff ff15 	bl	800130c <LL_ADC_IsEnabled>
 80014e2:	4604      	mov	r4, r0
 80014e4:	486d      	ldr	r0, [pc, #436]	; (800169c <HAL_ADC_Init+0x2f4>)
 80014e6:	f7ff ff11 	bl	800130c <LL_ADC_IsEnabled>
 80014ea:	4603      	mov	r3, r0
 80014ec:	431c      	orrs	r4, r3
 80014ee:	486c      	ldr	r0, [pc, #432]	; (80016a0 <HAL_ADC_Init+0x2f8>)
 80014f0:	f7ff ff0c 	bl	800130c <LL_ADC_IsEnabled>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4323      	orrs	r3, r4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	bf0c      	ite	eq
 80014fc:	2301      	moveq	r3, #1
 80014fe:	2300      	movne	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d012      	beq.n	800152c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800150e:	d004      	beq.n	800151a <HAL_ADC_Init+0x172>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a5f      	ldr	r2, [pc, #380]	; (8001694 <HAL_ADC_Init+0x2ec>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d101      	bne.n	800151e <HAL_ADC_Init+0x176>
 800151a:	4a62      	ldr	r2, [pc, #392]	; (80016a4 <HAL_ADC_Init+0x2fc>)
 800151c:	e000      	b.n	8001520 <HAL_ADC_Init+0x178>
 800151e:	4a62      	ldr	r2, [pc, #392]	; (80016a8 <HAL_ADC_Init+0x300>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4619      	mov	r1, r3
 8001526:	4610      	mov	r0, r2
 8001528:	f7ff fcfe 	bl	8000f28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7f5b      	ldrb	r3, [r3, #29]
 8001530:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001536:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800153c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001542:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800154a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001556:	2b01      	cmp	r3, #1
 8001558:	d106      	bne.n	8001568 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155e:	3b01      	subs	r3, #1
 8001560:	045b      	lsls	r3, r3, #17
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	2b00      	cmp	r3, #0
 800156e:	d009      	beq.n	8001584 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001574:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	4b48      	ldr	r3, [pc, #288]	; (80016ac <HAL_ADC_Init+0x304>)
 800158c:	4013      	ands	r3, r2
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	69b9      	ldr	r1, [r7, #24]
 8001594:	430b      	orrs	r3, r1
 8001596:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fee4 	bl	8001380 <LL_ADC_INJ_IsConversionOngoing>
 80015b8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d17f      	bne.n	80016c0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d17c      	bne.n	80016c0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015ca:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015d2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015e2:	f023 0302 	bic.w	r3, r3, #2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	69b9      	ldr	r1, [r7, #24]
 80015ec:	430b      	orrs	r3, r1
 80015ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d017      	beq.n	8001628 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001606:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001610:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001614:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6911      	ldr	r1, [r2, #16]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	430b      	orrs	r3, r1
 8001622:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001626:	e013      	b.n	8001650 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001636:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001648:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800164c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001656:	2b01      	cmp	r3, #1
 8001658:	d12a      	bne.n	80016b0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001670:	4311      	orrs	r1, r2
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001676:	4311      	orrs	r1, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800167c:	430a      	orrs	r2, r1
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0201 	orr.w	r2, r2, #1
 8001688:	611a      	str	r2, [r3, #16]
 800168a:	e019      	b.n	80016c0 <HAL_ADC_Init+0x318>
 800168c:	20000000 	.word	0x20000000
 8001690:	053e2d63 	.word	0x053e2d63
 8001694:	50000100 	.word	0x50000100
 8001698:	50000400 	.word	0x50000400
 800169c:	50000500 	.word	0x50000500
 80016a0:	50000600 	.word	0x50000600
 80016a4:	50000300 	.word	0x50000300
 80016a8:	50000700 	.word	0x50000700
 80016ac:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691a      	ldr	r2, [r3, #16]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0201 	bic.w	r2, r2, #1
 80016be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d10c      	bne.n	80016e2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f023 010f 	bic.w	r1, r3, #15
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	1e5a      	subs	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	631a      	str	r2, [r3, #48]	; 0x30
 80016e0:	e007      	b.n	80016f2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 020f 	bic.w	r2, r2, #15
 80016f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f6:	f023 0303 	bic.w	r3, r3, #3
 80016fa:	f043 0201 	orr.w	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	65da      	str	r2, [r3, #92]	; 0x5c
 8001702:	e007      	b.n	8001714 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	f043 0210 	orr.w	r2, r3, #16
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001714:	7ffb      	ldrb	r3, [r7, #31]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd90      	pop	{r4, r7, pc}
 800171e:	bf00      	nop

08001720 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001734:	d004      	beq.n	8001740 <HAL_ADC_Start_DMA+0x20>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a5a      	ldr	r2, [pc, #360]	; (80018a4 <HAL_ADC_Start_DMA+0x184>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d101      	bne.n	8001744 <HAL_ADC_Start_DMA+0x24>
 8001740:	4b59      	ldr	r3, [pc, #356]	; (80018a8 <HAL_ADC_Start_DMA+0x188>)
 8001742:	e000      	b.n	8001746 <HAL_ADC_Start_DMA+0x26>
 8001744:	4b59      	ldr	r3, [pc, #356]	; (80018ac <HAL_ADC_Start_DMA+0x18c>)
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fd62 	bl	8001210 <LL_ADC_GetMultimode>
 800174c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fe01 	bl	800135a <LL_ADC_REG_IsConversionOngoing>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 809b 	bne.w	8001896 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_ADC_Start_DMA+0x4e>
 800176a:	2302      	movs	r3, #2
 800176c:	e096      	b.n	800189c <HAL_ADC_Start_DMA+0x17c>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a4d      	ldr	r2, [pc, #308]	; (80018b0 <HAL_ADC_Start_DMA+0x190>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d008      	beq.n	8001792 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2b05      	cmp	r3, #5
 800178a:	d002      	beq.n	8001792 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	2b09      	cmp	r3, #9
 8001790:	d17a      	bne.n	8001888 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 ff60 	bl	8002658 <ADC_Enable>
 8001798:	4603      	mov	r3, r0
 800179a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d16d      	bne.n	800187e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a3a      	ldr	r2, [pc, #232]	; (80018a4 <HAL_ADC_Start_DMA+0x184>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d009      	beq.n	80017d4 <HAL_ADC_Start_DMA+0xb4>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a3b      	ldr	r2, [pc, #236]	; (80018b4 <HAL_ADC_Start_DMA+0x194>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d002      	beq.n	80017d0 <HAL_ADC_Start_DMA+0xb0>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	e003      	b.n	80017d8 <HAL_ADC_Start_DMA+0xb8>
 80017d0:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <HAL_ADC_Start_DMA+0x198>)
 80017d2:	e001      	b.n	80017d8 <HAL_ADC_Start_DMA+0xb8>
 80017d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	4293      	cmp	r3, r2
 80017de:	d002      	beq.n	80017e6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d105      	bne.n	80017f2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d006      	beq.n	800180c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001802:	f023 0206 	bic.w	r2, r3, #6
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	661a      	str	r2, [r3, #96]	; 0x60
 800180a:	e002      	b.n	8001812 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001816:	4a29      	ldr	r2, [pc, #164]	; (80018bc <HAL_ADC_Start_DMA+0x19c>)
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181e:	4a28      	ldr	r2, [pc, #160]	; (80018c0 <HAL_ADC_Start_DMA+0x1a0>)
 8001820:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001826:	4a27      	ldr	r2, [pc, #156]	; (80018c4 <HAL_ADC_Start_DMA+0x1a4>)
 8001828:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	221c      	movs	r2, #28
 8001830:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0210 	orr.w	r2, r2, #16
 8001848:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0201 	orr.w	r2, r2, #1
 8001858:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	3340      	adds	r3, #64	; 0x40
 8001864:	4619      	mov	r1, r3
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f001 fb37 	bl	8002edc <HAL_DMA_Start_IT>
 800186e:	4603      	mov	r3, r0
 8001870:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fd5b 	bl	8001332 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800187c:	e00d      	b.n	800189a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001886:	e008      	b.n	800189a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001894:	e001      	b.n	800189a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001896:	2302      	movs	r3, #2
 8001898:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800189a:	7dfb      	ldrb	r3, [r7, #23]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	50000100 	.word	0x50000100
 80018a8:	50000300 	.word	0x50000300
 80018ac:	50000700 	.word	0x50000700
 80018b0:	50000600 	.word	0x50000600
 80018b4:	50000500 	.word	0x50000500
 80018b8:	50000400 	.word	0x50000400
 80018bc:	08002785 	.word	0x08002785
 80018c0:	0800285d 	.word	0x0800285d
 80018c4:	08002879 	.word	0x08002879

080018c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ec:	d004      	beq.n	80018f8 <HAL_ADC_IRQHandler+0x30>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a8e      	ldr	r2, [pc, #568]	; (8001b2c <HAL_ADC_IRQHandler+0x264>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d101      	bne.n	80018fc <HAL_ADC_IRQHandler+0x34>
 80018f8:	4b8d      	ldr	r3, [pc, #564]	; (8001b30 <HAL_ADC_IRQHandler+0x268>)
 80018fa:	e000      	b.n	80018fe <HAL_ADC_IRQHandler+0x36>
 80018fc:	4b8d      	ldr	r3, [pc, #564]	; (8001b34 <HAL_ADC_IRQHandler+0x26c>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fc86 	bl	8001210 <LL_ADC_GetMultimode>
 8001904:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d017      	beq.n	8001940 <HAL_ADC_IRQHandler+0x78>
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d012      	beq.n	8001940 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191e:	f003 0310 	and.w	r3, r3, #16
 8001922:	2b00      	cmp	r3, #0
 8001924:	d105      	bne.n	8001932 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f001 f808 	bl	8002948 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2202      	movs	r2, #2
 800193e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <HAL_ADC_IRQHandler+0x8c>
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10b      	bne.n	800196c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 8094 	beq.w	8001a88 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 808e 	beq.w	8001a88 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d105      	bne.n	8001984 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fb9f 	bl	80010cc <LL_ADC_REG_IsTriggerSourceSWStart>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d072      	beq.n	8001a7a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a64      	ldr	r2, [pc, #400]	; (8001b2c <HAL_ADC_IRQHandler+0x264>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d009      	beq.n	80019b2 <HAL_ADC_IRQHandler+0xea>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a65      	ldr	r2, [pc, #404]	; (8001b38 <HAL_ADC_IRQHandler+0x270>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d002      	beq.n	80019ae <HAL_ADC_IRQHandler+0xe6>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	e003      	b.n	80019b6 <HAL_ADC_IRQHandler+0xee>
 80019ae:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_ADC_IRQHandler+0x274>)
 80019b0:	e001      	b.n	80019b6 <HAL_ADC_IRQHandler+0xee>
 80019b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d008      	beq.n	80019d0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b05      	cmp	r3, #5
 80019c8:	d002      	beq.n	80019d0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b09      	cmp	r3, #9
 80019ce:	d104      	bne.n	80019da <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	623b      	str	r3, [r7, #32]
 80019d8:	e014      	b.n	8001a04 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a53      	ldr	r2, [pc, #332]	; (8001b2c <HAL_ADC_IRQHandler+0x264>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d009      	beq.n	80019f8 <HAL_ADC_IRQHandler+0x130>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a53      	ldr	r2, [pc, #332]	; (8001b38 <HAL_ADC_IRQHandler+0x270>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d002      	beq.n	80019f4 <HAL_ADC_IRQHandler+0x12c>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	e003      	b.n	80019fc <HAL_ADC_IRQHandler+0x134>
 80019f4:	4b51      	ldr	r3, [pc, #324]	; (8001b3c <HAL_ADC_IRQHandler+0x274>)
 80019f6:	e001      	b.n	80019fc <HAL_ADC_IRQHandler+0x134>
 80019f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019fc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d135      	bne.n	8001a7a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d12e      	bne.n	8001a7a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fc9a 	bl	800135a <LL_ADC_REG_IsConversionOngoing>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d11a      	bne.n	8001a62 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 020c 	bic.w	r2, r2, #12
 8001a3a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d112      	bne.n	8001a7a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a60:	e00b      	b.n	8001a7a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	f043 0210 	orr.w	r2, r3, #16
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a72:	f043 0201 	orr.w	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f984 	bl	8001d88 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	220c      	movs	r2, #12
 8001a86:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0320 	and.w	r3, r3, #32
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d004      	beq.n	8001a9c <HAL_ADC_IRQHandler+0x1d4>
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	f003 0320 	and.w	r3, r3, #32
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10b      	bne.n	8001ab4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80b3 	beq.w	8001c0e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80ad 	beq.w	8001c0e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fb3a 	bl	800114a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001ad6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff faf5 	bl	80010cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ae2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a10      	ldr	r2, [pc, #64]	; (8001b2c <HAL_ADC_IRQHandler+0x264>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <HAL_ADC_IRQHandler+0x23a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a11      	ldr	r2, [pc, #68]	; (8001b38 <HAL_ADC_IRQHandler+0x270>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d002      	beq.n	8001afe <HAL_ADC_IRQHandler+0x236>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	e003      	b.n	8001b06 <HAL_ADC_IRQHandler+0x23e>
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_ADC_IRQHandler+0x274>)
 8001b00:	e001      	b.n	8001b06 <HAL_ADC_IRQHandler+0x23e>
 8001b02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d008      	beq.n	8001b20 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d002      	beq.n	8001b20 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2b07      	cmp	r3, #7
 8001b1e:	d10f      	bne.n	8001b40 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	623b      	str	r3, [r7, #32]
 8001b28:	e01f      	b.n	8001b6a <HAL_ADC_IRQHandler+0x2a2>
 8001b2a:	bf00      	nop
 8001b2c:	50000100 	.word	0x50000100
 8001b30:	50000300 	.word	0x50000300
 8001b34:	50000700 	.word	0x50000700
 8001b38:	50000500 	.word	0x50000500
 8001b3c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a8b      	ldr	r2, [pc, #556]	; (8001d74 <HAL_ADC_IRQHandler+0x4ac>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d009      	beq.n	8001b5e <HAL_ADC_IRQHandler+0x296>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a8a      	ldr	r2, [pc, #552]	; (8001d78 <HAL_ADC_IRQHandler+0x4b0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d002      	beq.n	8001b5a <HAL_ADC_IRQHandler+0x292>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	e003      	b.n	8001b62 <HAL_ADC_IRQHandler+0x29a>
 8001b5a:	4b88      	ldr	r3, [pc, #544]	; (8001d7c <HAL_ADC_IRQHandler+0x4b4>)
 8001b5c:	e001      	b.n	8001b62 <HAL_ADC_IRQHandler+0x29a>
 8001b5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b62:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d047      	beq.n	8001c00 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_ADC_IRQHandler+0x2c2>
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d03f      	beq.n	8001c00 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d13a      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b94:	2b40      	cmp	r3, #64	; 0x40
 8001b96:	d133      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d12e      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fbea 	bl	8001380 <LL_ADC_INJ_IsConversionOngoing>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d11a      	bne.n	8001be8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bc0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d112      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bde:	f043 0201 	orr.w	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001be6:	e00b      	b.n	8001c00 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bec:	f043 0210 	orr.w	r2, r3, #16
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf8:	f043 0201 	orr.w	r2, r3, #1
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 fe79 	bl	80028f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2260      	movs	r2, #96	; 0x60
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d011      	beq.n	8001c3c <HAL_ADC_IRQHandler+0x374>
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00c      	beq.n	8001c3c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8be 	bl	8001db0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d012      	beq.n	8001c6c <HAL_ADC_IRQHandler+0x3a4>
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00d      	beq.n	8001c6c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 fe5f 	bl	8002920 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d012      	beq.n	8001c9c <HAL_ADC_IRQHandler+0x3d4>
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00d      	beq.n	8001c9c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 fe51 	bl	8002934 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d043      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x466>
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d03e      	beq.n	8001d2e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d102      	bne.n	8001cbe <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbc:	e021      	b.n	8001d02 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d015      	beq.n	8001cf0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ccc:	d004      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0x410>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a28      	ldr	r2, [pc, #160]	; (8001d74 <HAL_ADC_IRQHandler+0x4ac>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADC_IRQHandler+0x414>
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <HAL_ADC_IRQHandler+0x4b8>)
 8001cda:	e000      	b.n	8001cde <HAL_ADC_IRQHandler+0x416>
 8001cdc:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <HAL_ADC_IRQHandler+0x4bc>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff faa4 	bl	800122c <LL_ADC_GetMultiDMATransfer>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00b      	beq.n	8001d02 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001cea:	2301      	movs	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
 8001cee:	e008      	b.n	8001d02 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d10e      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d18:	f043 0202 	orr.w	r2, r3, #2
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f84f 	bl	8001dc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2210      	movs	r2, #16
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d018      	beq.n	8001d6a <HAL_ADC_IRQHandler+0x4a2>
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d013      	beq.n	8001d6a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d52:	f043 0208 	orr.w	r2, r3, #8
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d62:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fdd1 	bl	800290c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	; 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	50000100 	.word	0x50000100
 8001d78:	50000500 	.word	0x50000500
 8001d7c:	50000400 	.word	0x50000400
 8001d80:	50000300 	.word	0x50000300
 8001d84:	50000700 	.word	0x50000700

08001d88 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0b6      	sub	sp, #216	; 0xd8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d102      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x24>
 8001df6:	2302      	movs	r3, #2
 8001df8:	f000 bc13 	b.w	8002622 <HAL_ADC_ConfigChannel+0x84a>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff faa6 	bl	800135a <LL_ADC_REG_IsConversionOngoing>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f040 83f3 	bne.w	80025fc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6859      	ldr	r1, [r3, #4]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	f7ff f965 	bl	80010f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fa94 	bl	800135a <LL_ADC_REG_IsConversionOngoing>
 8001e32:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff faa0 	bl	8001380 <LL_ADC_INJ_IsConversionOngoing>
 8001e40:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f040 81d9 	bne.w	8002200 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 81d4 	bne.w	8002200 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e60:	d10f      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f7ff f97f 	bl	8001170 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff f913 	bl	80010a6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001e80:	e00e      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6819      	ldr	r1, [r3, #0]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	f7ff f96e 	bl	8001170 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff f903 	bl	80010a6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	695a      	ldr	r2, [r3, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	08db      	lsrs	r3, r3, #3
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d022      	beq.n	8001f08 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	6919      	ldr	r1, [r3, #16]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ed2:	f7ff f85d 	bl	8000f90 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	6919      	ldr	r1, [r3, #16]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f7ff f8a9 	bl	800103a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d102      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x126>
 8001ef8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001efc:	e000      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x128>
 8001efe:	2300      	movs	r3, #0
 8001f00:	461a      	mov	r2, r3
 8001f02:	f7ff f8b5 	bl	8001070 <LL_ADC_SetOffsetSaturation>
 8001f06:	e17b      	b.n	8002200 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f862 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10a      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x15c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff f857 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	0e9b      	lsrs	r3, r3, #26
 8001f2e:	f003 021f 	and.w	r2, r3, #31
 8001f32:	e01e      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x19a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff f84c 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001f62:	2320      	movs	r3, #32
 8001f64:	e004      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001f66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d105      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x1b2>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	0e9b      	lsrs	r3, r3, #26
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	e018      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x1e4>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001fa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001fae:	2320      	movs	r3, #32
 8001fb0:	e004      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001fb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d106      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff f81b 	bl	8001004 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe ffff 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d10a      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x222>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2101      	movs	r1, #1
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fff4 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	0e9b      	lsrs	r3, r3, #26
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	e01e      	b.n	8002038 <HAL_ADC_ConfigChannel+0x260>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2101      	movs	r1, #1
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe ffe9 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8002006:	4603      	mov	r3, r0
 8002008:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002010:	fa93 f3a3 	rbit	r3, r3
 8002014:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002018:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800201c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002020:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002028:	2320      	movs	r3, #32
 800202a:	e004      	b.n	8002036 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800202c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002040:	2b00      	cmp	r3, #0
 8002042:	d105      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x278>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0e9b      	lsrs	r3, r3, #26
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	e018      	b.n	8002082 <HAL_ADC_ConfigChannel+0x2aa>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800205c:	fa93 f3a3 	rbit	r3, r3
 8002060:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002064:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002068:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800206c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002074:	2320      	movs	r3, #32
 8002076:	e004      	b.n	8002082 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800207c:	fab3 f383 	clz	r3, r3
 8002080:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002082:	429a      	cmp	r2, r3
 8002084:	d106      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2200      	movs	r2, #0
 800208c:	2101      	movs	r1, #1
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe ffb8 	bl	8001004 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2102      	movs	r1, #2
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe ff9c 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10a      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x2e8>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2102      	movs	r1, #2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe ff91 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 80020b6:	4603      	mov	r3, r0
 80020b8:	0e9b      	lsrs	r3, r3, #26
 80020ba:	f003 021f 	and.w	r2, r3, #31
 80020be:	e01e      	b.n	80020fe <HAL_ADC_ConfigChannel+0x326>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2102      	movs	r1, #2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe ff86 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80020de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80020e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80020ee:	2320      	movs	r3, #32
 80020f0:	e004      	b.n	80020fc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80020f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002106:	2b00      	cmp	r3, #0
 8002108:	d105      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x33e>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	0e9b      	lsrs	r3, r3, #26
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	e016      	b.n	8002144 <HAL_ADC_ConfigChannel+0x36c>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002128:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800212a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800212e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002136:	2320      	movs	r3, #32
 8002138:	e004      	b.n	8002144 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800213a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002144:	429a      	cmp	r2, r3
 8002146:	d106      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2200      	movs	r2, #0
 800214e:	2102      	movs	r1, #2
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe ff57 	bl	8001004 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2103      	movs	r1, #3
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe ff3b 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8002162:	4603      	mov	r3, r0
 8002164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10a      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x3aa>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2103      	movs	r1, #3
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe ff30 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 8002178:	4603      	mov	r3, r0
 800217a:	0e9b      	lsrs	r3, r3, #26
 800217c:	f003 021f 	and.w	r2, r3, #31
 8002180:	e017      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x3da>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2103      	movs	r1, #3
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe ff25 	bl	8000fd8 <LL_ADC_GetOffsetChannel>
 800218e:	4603      	mov	r3, r0
 8002190:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800219a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800219c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800219e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80021a4:	2320      	movs	r3, #32
 80021a6:	e003      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80021a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d105      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x3f2>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	0e9b      	lsrs	r3, r3, #26
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	e011      	b.n	80021ee <HAL_ADC_ConfigChannel+0x416>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80021d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80021dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80021e2:	2320      	movs	r3, #32
 80021e4:	e003      	b.n	80021ee <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80021e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e8:	fab3 f383 	clz	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d106      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2200      	movs	r2, #0
 80021f8:	2103      	movs	r1, #3
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe ff02 	bl	8001004 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff f881 	bl	800130c <LL_ADC_IsEnabled>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	f040 813d 	bne.w	800248c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6819      	ldr	r1, [r3, #0]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	461a      	mov	r2, r3
 8002220:	f7fe ffd2 	bl	80011c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4aa2      	ldr	r2, [pc, #648]	; (80024b4 <HAL_ADC_ConfigChannel+0x6dc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	f040 812e 	bne.w	800248c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10b      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x480>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	0e9b      	lsrs	r3, r3, #26
 8002246:	3301      	adds	r3, #1
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	2b09      	cmp	r3, #9
 800224e:	bf94      	ite	ls
 8002250:	2301      	movls	r3, #1
 8002252:	2300      	movhi	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	e019      	b.n	800228c <HAL_ADC_ConfigChannel+0x4b4>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002268:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800226a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002270:	2320      	movs	r3, #32
 8002272:	e003      	b.n	800227c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002274:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f003 031f 	and.w	r3, r3, #31
 8002282:	2b09      	cmp	r3, #9
 8002284:	bf94      	ite	ls
 8002286:	2301      	movls	r3, #1
 8002288:	2300      	movhi	r3, #0
 800228a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800228c:	2b00      	cmp	r3, #0
 800228e:	d079      	beq.n	8002384 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002298:	2b00      	cmp	r3, #0
 800229a:	d107      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x4d4>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	0e9b      	lsrs	r3, r3, #26
 80022a2:	3301      	adds	r3, #1
 80022a4:	069b      	lsls	r3, r3, #26
 80022a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022aa:	e015      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x500>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80022be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e003      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80022c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	3301      	adds	r3, #1
 80022d2:	069b      	lsls	r3, r3, #26
 80022d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d109      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x520>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	3301      	adds	r3, #1
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	2101      	movs	r1, #1
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	e017      	b.n	8002328 <HAL_ADC_ConfigChannel+0x550>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002308:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800230a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002310:	2320      	movs	r3, #32
 8002312:	e003      	b.n	800231c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	3301      	adds	r3, #1
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	2101      	movs	r1, #1
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	ea42 0103 	orr.w	r1, r2, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10a      	bne.n	800234e <HAL_ADC_ConfigChannel+0x576>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0e9b      	lsrs	r3, r3, #26
 800233e:	3301      	adds	r3, #1
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	051b      	lsls	r3, r3, #20
 800234c:	e018      	b.n	8002380 <HAL_ADC_ConfigChannel+0x5a8>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800235c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002366:	2320      	movs	r3, #32
 8002368:	e003      	b.n	8002372 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800236a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	3301      	adds	r3, #1
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002380:	430b      	orrs	r3, r1
 8002382:	e07e      	b.n	8002482 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x5c8>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0e9b      	lsrs	r3, r3, #26
 8002396:	3301      	adds	r3, #1
 8002398:	069b      	lsls	r3, r3, #26
 800239a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800239e:	e015      	b.n	80023cc <HAL_ADC_ConfigChannel+0x5f4>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80023b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80023b8:	2320      	movs	r3, #32
 80023ba:	e003      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80023bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	3301      	adds	r3, #1
 80023c6:	069b      	lsls	r3, r3, #26
 80023c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x614>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	3301      	adds	r3, #1
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2101      	movs	r1, #1
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	e017      	b.n	800241c <HAL_ADC_ConfigChannel+0x644>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	61fb      	str	r3, [r7, #28]
  return result;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002404:	2320      	movs	r3, #32
 8002406:	e003      	b.n	8002410 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3301      	adds	r3, #1
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	2101      	movs	r1, #1
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	ea42 0103 	orr.w	r1, r2, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10d      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x670>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	0e9b      	lsrs	r3, r3, #26
 8002432:	3301      	adds	r3, #1
 8002434:	f003 021f 	and.w	r2, r3, #31
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	3b1e      	subs	r3, #30
 8002440:	051b      	lsls	r3, r3, #20
 8002442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002446:	e01b      	b.n	8002480 <HAL_ADC_ConfigChannel+0x6a8>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	613b      	str	r3, [r7, #16]
  return result;
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002460:	2320      	movs	r3, #32
 8002462:	e003      	b.n	800246c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	3301      	adds	r3, #1
 800246e:	f003 021f 	and.w	r2, r3, #31
 8002472:	4613      	mov	r3, r2
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	4413      	add	r3, r2
 8002478:	3b1e      	subs	r3, #30
 800247a:	051b      	lsls	r3, r3, #20
 800247c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002480:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002486:	4619      	mov	r1, r3
 8002488:	f7fe fe72 	bl	8001170 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <HAL_ADC_ConfigChannel+0x6e0>)
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80be 	beq.w	8002616 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024a2:	d004      	beq.n	80024ae <HAL_ADC_ConfigChannel+0x6d6>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a04      	ldr	r2, [pc, #16]	; (80024bc <HAL_ADC_ConfigChannel+0x6e4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d10a      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x6ec>
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <HAL_ADC_ConfigChannel+0x6e8>)
 80024b0:	e009      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x6ee>
 80024b2:	bf00      	nop
 80024b4:	407f0000 	.word	0x407f0000
 80024b8:	80080000 	.word	0x80080000
 80024bc:	50000100 	.word	0x50000100
 80024c0:	50000300 	.word	0x50000300
 80024c4:	4b59      	ldr	r3, [pc, #356]	; (800262c <HAL_ADC_ConfigChannel+0x854>)
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe fd54 	bl	8000f74 <LL_ADC_GetCommonPathInternalCh>
 80024cc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a56      	ldr	r2, [pc, #344]	; (8002630 <HAL_ADC_ConfigChannel+0x858>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d004      	beq.n	80024e4 <HAL_ADC_ConfigChannel+0x70c>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a55      	ldr	r2, [pc, #340]	; (8002634 <HAL_ADC_ConfigChannel+0x85c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d13a      	bne.n	800255a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d134      	bne.n	800255a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024f8:	d005      	beq.n	8002506 <HAL_ADC_ConfigChannel+0x72e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a4e      	ldr	r2, [pc, #312]	; (8002638 <HAL_ADC_ConfigChannel+0x860>)
 8002500:	4293      	cmp	r3, r2
 8002502:	f040 8085 	bne.w	8002610 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800250e:	d004      	beq.n	800251a <HAL_ADC_ConfigChannel+0x742>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a49      	ldr	r2, [pc, #292]	; (800263c <HAL_ADC_ConfigChannel+0x864>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x746>
 800251a:	4a49      	ldr	r2, [pc, #292]	; (8002640 <HAL_ADC_ConfigChannel+0x868>)
 800251c:	e000      	b.n	8002520 <HAL_ADC_ConfigChannel+0x748>
 800251e:	4a43      	ldr	r2, [pc, #268]	; (800262c <HAL_ADC_ConfigChannel+0x854>)
 8002520:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002524:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002528:	4619      	mov	r1, r3
 800252a:	4610      	mov	r0, r2
 800252c:	f7fe fd0f 	bl	8000f4e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002530:	4b44      	ldr	r3, [pc, #272]	; (8002644 <HAL_ADC_ConfigChannel+0x86c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	099b      	lsrs	r3, r3, #6
 8002536:	4a44      	ldr	r2, [pc, #272]	; (8002648 <HAL_ADC_ConfigChannel+0x870>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	099b      	lsrs	r3, r3, #6
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800254a:	e002      	b.n	8002552 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	3b01      	subs	r3, #1
 8002550:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f9      	bne.n	800254c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002558:	e05a      	b.n	8002610 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a3b      	ldr	r2, [pc, #236]	; (800264c <HAL_ADC_ConfigChannel+0x874>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d125      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002564:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d11f      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a31      	ldr	r2, [pc, #196]	; (800263c <HAL_ADC_ConfigChannel+0x864>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d104      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x7ac>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a34      	ldr	r2, [pc, #208]	; (8002650 <HAL_ADC_ConfigChannel+0x878>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d047      	beq.n	8002614 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800258c:	d004      	beq.n	8002598 <HAL_ADC_ConfigChannel+0x7c0>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2a      	ldr	r2, [pc, #168]	; (800263c <HAL_ADC_ConfigChannel+0x864>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x7c4>
 8002598:	4a29      	ldr	r2, [pc, #164]	; (8002640 <HAL_ADC_ConfigChannel+0x868>)
 800259a:	e000      	b.n	800259e <HAL_ADC_ConfigChannel+0x7c6>
 800259c:	4a23      	ldr	r2, [pc, #140]	; (800262c <HAL_ADC_ConfigChannel+0x854>)
 800259e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a6:	4619      	mov	r1, r3
 80025a8:	4610      	mov	r0, r2
 80025aa:	f7fe fcd0 	bl	8000f4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025ae:	e031      	b.n	8002614 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a27      	ldr	r2, [pc, #156]	; (8002654 <HAL_ADC_ConfigChannel+0x87c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d12d      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d127      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1c      	ldr	r2, [pc, #112]	; (800263c <HAL_ADC_ConfigChannel+0x864>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d022      	beq.n	8002616 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025d8:	d004      	beq.n	80025e4 <HAL_ADC_ConfigChannel+0x80c>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a17      	ldr	r2, [pc, #92]	; (800263c <HAL_ADC_ConfigChannel+0x864>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d101      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x810>
 80025e4:	4a16      	ldr	r2, [pc, #88]	; (8002640 <HAL_ADC_ConfigChannel+0x868>)
 80025e6:	e000      	b.n	80025ea <HAL_ADC_ConfigChannel+0x812>
 80025e8:	4a10      	ldr	r2, [pc, #64]	; (800262c <HAL_ADC_ConfigChannel+0x854>)
 80025ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025f2:	4619      	mov	r1, r3
 80025f4:	4610      	mov	r0, r2
 80025f6:	f7fe fcaa 	bl	8000f4e <LL_ADC_SetCommonPathInternalCh>
 80025fa:	e00c      	b.n	8002616 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002600:	f043 0220 	orr.w	r2, r3, #32
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800260e:	e002      	b.n	8002616 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002610:	bf00      	nop
 8002612:	e000      	b.n	8002616 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002614:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800261e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002622:	4618      	mov	r0, r3
 8002624:	37d8      	adds	r7, #216	; 0xd8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	50000700 	.word	0x50000700
 8002630:	c3210000 	.word	0xc3210000
 8002634:	90c00010 	.word	0x90c00010
 8002638:	50000600 	.word	0x50000600
 800263c:	50000100 	.word	0x50000100
 8002640:	50000300 	.word	0x50000300
 8002644:	20000000 	.word	0x20000000
 8002648:	053e2d63 	.word	0x053e2d63
 800264c:	c7520000 	.word	0xc7520000
 8002650:	50000500 	.word	0x50000500
 8002654:	cb840000 	.word	0xcb840000

08002658 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002660:	2300      	movs	r3, #0
 8002662:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fe4f 	bl	800130c <LL_ADC_IsEnabled>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d176      	bne.n	8002762 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	4b3c      	ldr	r3, [pc, #240]	; (800276c <ADC_Enable+0x114>)
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00d      	beq.n	800269e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002686:	f043 0210 	orr.w	r2, r3, #16
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e062      	b.n	8002764 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fe1e 	bl	80012e4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026b0:	d004      	beq.n	80026bc <ADC_Enable+0x64>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a2e      	ldr	r2, [pc, #184]	; (8002770 <ADC_Enable+0x118>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d101      	bne.n	80026c0 <ADC_Enable+0x68>
 80026bc:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <ADC_Enable+0x11c>)
 80026be:	e000      	b.n	80026c2 <ADC_Enable+0x6a>
 80026c0:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <ADC_Enable+0x120>)
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fc56 	bl	8000f74 <LL_ADC_GetCommonPathInternalCh>
 80026c8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80026ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d013      	beq.n	80026fa <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026d2:	4b2a      	ldr	r3, [pc, #168]	; (800277c <ADC_Enable+0x124>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	099b      	lsrs	r3, r3, #6
 80026d8:	4a29      	ldr	r2, [pc, #164]	; (8002780 <ADC_Enable+0x128>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	099b      	lsrs	r3, r3, #6
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026ec:	e002      	b.n	80026f4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f9      	bne.n	80026ee <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026fa:	f7fe fc09 	bl	8000f10 <HAL_GetTick>
 80026fe:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002700:	e028      	b.n	8002754 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fe00 	bl	800130c <LL_ADC_IsEnabled>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d104      	bne.n	800271c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fde4 	bl	80012e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800271c:	f7fe fbf8 	bl	8000f10 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d914      	bls.n	8002754 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	d00d      	beq.n	8002754 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	f043 0210 	orr.w	r2, r3, #16
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e007      	b.n	8002764 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d1cf      	bne.n	8002702 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	8000003f 	.word	0x8000003f
 8002770:	50000100 	.word	0x50000100
 8002774:	50000300 	.word	0x50000300
 8002778:	50000700 	.word	0x50000700
 800277c:	20000000 	.word	0x20000000
 8002780:	053e2d63 	.word	0x053e2d63

08002784 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002796:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800279a:	2b00      	cmp	r3, #0
 800279c:	d14b      	bne.n	8002836 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d021      	beq.n	80027fc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fc85 	bl	80010cc <LL_ADC_REG_IsTriggerSourceSWStart>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d032      	beq.n	800282e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d12b      	bne.n	800282e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d11f      	bne.n	800282e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80027fa:	e018      	b.n	800282e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d111      	bne.n	800282e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d105      	bne.n	800282e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	f043 0201 	orr.w	r2, r3, #1
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff faaa 	bl	8001d88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002834:	e00e      	b.n	8002854 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f7ff fabe 	bl	8001dc4 <HAL_ADC_ErrorCallback>
}
 8002848:	e004      	b.n	8002854 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4798      	blx	r3
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f7ff fa96 	bl	8001d9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002896:	f043 0204 	orr.w	r2, r3, #4
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f7ff fa90 	bl	8001dc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <LL_ADC_IsEnabled>:
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <LL_ADC_IsEnabled+0x18>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <LL_ADC_IsEnabled+0x1a>
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d101      	bne.n	80028ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b0a1      	sub	sp, #132	; 0x84
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002976:	2302      	movs	r3, #2
 8002978:	e0e7      	b.n	8002b4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002982:	2300      	movs	r3, #0
 8002984:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002986:	2300      	movs	r3, #0
 8002988:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002992:	d102      	bne.n	800299a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002994:	4b6f      	ldr	r3, [pc, #444]	; (8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	e009      	b.n	80029ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a6e      	ldr	r2, [pc, #440]	; (8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d102      	bne.n	80029aa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80029a4:	4b6d      	ldr	r3, [pc, #436]	; (8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	e001      	b.n	80029ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10b      	bne.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	f043 0220 	orr.w	r2, r3, #32
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0be      	b.n	8002b4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff ff7f 	bl	80028d2 <LL_ADC_REG_IsConversionOngoing>
 80029d4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff ff79 	bl	80028d2 <LL_ADC_REG_IsConversionOngoing>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f040 80a0 	bne.w	8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80029e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f040 809c 	bne.w	8002b28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029f8:	d004      	beq.n	8002a04 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a55      	ldr	r2, [pc, #340]	; (8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d101      	bne.n	8002a08 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002a04:	4b56      	ldr	r3, [pc, #344]	; (8002b60 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002a06:	e000      	b.n	8002a0a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002a08:	4b56      	ldr	r3, [pc, #344]	; (8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002a0a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d04b      	beq.n	8002aac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a26:	035b      	lsls	r3, r3, #13
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a38:	d004      	beq.n	8002a44 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a45      	ldr	r2, [pc, #276]	; (8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d10f      	bne.n	8002a64 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002a44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a48:	f7ff ff30 	bl	80028ac <LL_ADC_IsEnabled>
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	4841      	ldr	r0, [pc, #260]	; (8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a50:	f7ff ff2c 	bl	80028ac <LL_ADC_IsEnabled>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4323      	orrs	r3, r4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	e012      	b.n	8002a8a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002a64:	483c      	ldr	r0, [pc, #240]	; (8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a66:	f7ff ff21 	bl	80028ac <LL_ADC_IsEnabled>
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	483b      	ldr	r0, [pc, #236]	; (8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a6e:	f7ff ff1d 	bl	80028ac <LL_ADC_IsEnabled>
 8002a72:	4603      	mov	r3, r0
 8002a74:	431c      	orrs	r4, r3
 8002a76:	483c      	ldr	r0, [pc, #240]	; (8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a78:	f7ff ff18 	bl	80028ac <LL_ADC_IsEnabled>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4323      	orrs	r3, r4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d056      	beq.n	8002b3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a96:	f023 030f 	bic.w	r3, r3, #15
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	6811      	ldr	r1, [r2, #0]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	6892      	ldr	r2, [r2, #8]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002aaa:	e047      	b.n	8002b3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ab6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac0:	d004      	beq.n	8002acc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a23      	ldr	r2, [pc, #140]	; (8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d10f      	bne.n	8002aec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002acc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ad0:	f7ff feec 	bl	80028ac <LL_ADC_IsEnabled>
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	481f      	ldr	r0, [pc, #124]	; (8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ad8:	f7ff fee8 	bl	80028ac <LL_ADC_IsEnabled>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4323      	orrs	r3, r4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf0c      	ite	eq
 8002ae4:	2301      	moveq	r3, #1
 8002ae6:	2300      	movne	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	e012      	b.n	8002b12 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002aec:	481a      	ldr	r0, [pc, #104]	; (8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002aee:	f7ff fedd 	bl	80028ac <LL_ADC_IsEnabled>
 8002af2:	4604      	mov	r4, r0
 8002af4:	4819      	ldr	r0, [pc, #100]	; (8002b5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002af6:	f7ff fed9 	bl	80028ac <LL_ADC_IsEnabled>
 8002afa:	4603      	mov	r3, r0
 8002afc:	431c      	orrs	r4, r3
 8002afe:	481a      	ldr	r0, [pc, #104]	; (8002b68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002b00:	f7ff fed4 	bl	80028ac <LL_ADC_IsEnabled>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4323      	orrs	r3, r4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d012      	beq.n	8002b3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b1e:	f023 030f 	bic.w	r3, r3, #15
 8002b22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b24:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b26:	e009      	b.n	8002b3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002b3a:	e000      	b.n	8002b3e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3784      	adds	r7, #132	; 0x84
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd90      	pop	{r4, r7, pc}
 8002b52:	bf00      	nop
 8002b54:	50000100 	.word	0x50000100
 8002b58:	50000400 	.word	0x50000400
 8002b5c:	50000500 	.word	0x50000500
 8002b60:	50000300 	.word	0x50000300
 8002b64:	50000700 	.word	0x50000700
 8002b68:	50000600 	.word	0x50000600

08002b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b9e:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	60d3      	str	r3, [r2, #12]
}
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <__NVIC_GetPriorityGrouping+0x18>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	f003 0307 	and.w	r3, r3, #7
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	db0b      	blt.n	8002bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	f003 021f 	and.w	r2, r3, #31
 8002be8:	4907      	ldr	r1, [pc, #28]	; (8002c08 <__NVIC_EnableIRQ+0x38>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	e000e100 	.word	0xe000e100

08002c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	6039      	str	r1, [r7, #0]
 8002c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	db0a      	blt.n	8002c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	490c      	ldr	r1, [pc, #48]	; (8002c58 <__NVIC_SetPriority+0x4c>)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	0112      	lsls	r2, r2, #4
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	440b      	add	r3, r1
 8002c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c34:	e00a      	b.n	8002c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	4908      	ldr	r1, [pc, #32]	; (8002c5c <__NVIC_SetPriority+0x50>)
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	3b04      	subs	r3, #4
 8002c44:	0112      	lsls	r2, r2, #4
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	440b      	add	r3, r1
 8002c4a:	761a      	strb	r2, [r3, #24]
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000e100 	.word	0xe000e100
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b089      	sub	sp, #36	; 0x24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f1c3 0307 	rsb	r3, r3, #7
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	bf28      	it	cs
 8002c7e:	2304      	movcs	r3, #4
 8002c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3304      	adds	r3, #4
 8002c86:	2b06      	cmp	r3, #6
 8002c88:	d902      	bls.n	8002c90 <NVIC_EncodePriority+0x30>
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3b03      	subs	r3, #3
 8002c8e:	e000      	b.n	8002c92 <NVIC_EncodePriority+0x32>
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c94:	f04f 32ff 	mov.w	r2, #4294967295
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	43d9      	mvns	r1, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb8:	4313      	orrs	r3, r2
         );
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3724      	adds	r7, #36	; 0x24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cd8:	d301      	bcc.n	8002cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e00f      	b.n	8002cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cde:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <SysTick_Config+0x40>)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ce6:	210f      	movs	r1, #15
 8002ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cec:	f7ff ff8e 	bl	8002c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <SysTick_Config+0x40>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cf6:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <SysTick_Config+0x40>)
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	e000e010 	.word	0xe000e010

08002d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff ff29 	bl	8002b6c <__NVIC_SetPriorityGrouping>
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	4603      	mov	r3, r0
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d30:	f7ff ff40 	bl	8002bb4 <__NVIC_GetPriorityGrouping>
 8002d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	6978      	ldr	r0, [r7, #20]
 8002d3c:	f7ff ff90 	bl	8002c60 <NVIC_EncodePriority>
 8002d40:	4602      	mov	r2, r0
 8002d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff5f 	bl	8002c0c <__NVIC_SetPriority>
}
 8002d4e:	bf00      	nop
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff33 	bl	8002bd0 <__NVIC_EnableIRQ>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ffa4 	bl	8002cc8 <SysTick_Config>
 8002d80:	4603      	mov	r3, r0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e08d      	b.n	8002eba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b47      	ldr	r3, [pc, #284]	; (8002ec4 <HAL_DMA_Init+0x138>)
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d80f      	bhi.n	8002dca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	4b45      	ldr	r3, [pc, #276]	; (8002ec8 <HAL_DMA_Init+0x13c>)
 8002db2:	4413      	add	r3, r2
 8002db4:	4a45      	ldr	r2, [pc, #276]	; (8002ecc <HAL_DMA_Init+0x140>)
 8002db6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dba:	091b      	lsrs	r3, r3, #4
 8002dbc:	009a      	lsls	r2, r3, #2
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a42      	ldr	r2, [pc, #264]	; (8002ed0 <HAL_DMA_Init+0x144>)
 8002dc6:	641a      	str	r2, [r3, #64]	; 0x40
 8002dc8:	e00e      	b.n	8002de8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4b40      	ldr	r3, [pc, #256]	; (8002ed4 <HAL_DMA_Init+0x148>)
 8002dd2:	4413      	add	r3, r2
 8002dd4:	4a3d      	ldr	r2, [pc, #244]	; (8002ecc <HAL_DMA_Init+0x140>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	009a      	lsls	r2, r3, #2
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a3c      	ldr	r2, [pc, #240]	; (8002ed8 <HAL_DMA_Init+0x14c>)
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f9b6 	bl	80031ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e48:	d102      	bne.n	8002e50 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e64:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d010      	beq.n	8002e90 <HAL_DMA_Init+0x104>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d80c      	bhi.n	8002e90 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f9d6 	bl	8003228 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	e008      	b.n	8002ea2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40020407 	.word	0x40020407
 8002ec8:	bffdfff8 	.word	0xbffdfff8
 8002ecc:	cccccccd 	.word	0xcccccccd
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	bffdfbf8 	.word	0xbffdfbf8
 8002ed8:	40020400 	.word	0x40020400

08002edc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <HAL_DMA_Start_IT+0x20>
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e066      	b.n	8002fca <HAL_DMA_Start_IT+0xee>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d155      	bne.n	8002fbc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0201 	bic.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f8fb 	bl	8003130 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d008      	beq.n	8002f54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 020e 	orr.w	r2, r2, #14
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e00f      	b.n	8002f74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0204 	bic.w	r2, r2, #4
 8002f62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 020a 	orr.w	r2, r2, #10
 8002f72:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f90:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0201 	orr.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e005      	b.n	8002fc8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	f003 031f 	and.w	r3, r3, #31
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d026      	beq.n	800304c <HAL_DMA_IRQHandler+0x7a>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d021      	beq.n	800304c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d107      	bne.n	8003026 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0204 	bic.w	r2, r2, #4
 8003024:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	f003 021f 	and.w	r2, r3, #31
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	2104      	movs	r1, #4
 8003034:	fa01 f202 	lsl.w	r2, r1, r2
 8003038:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	2b00      	cmp	r3, #0
 8003040:	d071      	beq.n	8003126 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800304a:	e06c      	b.n	8003126 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	2202      	movs	r2, #2
 8003056:	409a      	lsls	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d02e      	beq.n	80030be <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d029      	beq.n	80030be <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0320 	and.w	r3, r3, #32
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10b      	bne.n	8003090 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 020a 	bic.w	r2, r2, #10
 8003086:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	2102      	movs	r1, #2
 800309e:	fa01 f202 	lsl.w	r2, r1, r2
 80030a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d038      	beq.n	8003126 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80030bc:	e033      	b.n	8003126 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	2208      	movs	r2, #8
 80030c8:	409a      	lsls	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d02a      	beq.n	8003128 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d025      	beq.n	8003128 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 020e 	bic.w	r2, r2, #14
 80030ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f0:	f003 021f 	and.w	r2, r3, #31
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	2101      	movs	r1, #1
 80030fa:	fa01 f202 	lsl.w	r2, r1, r2
 80030fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003126:	bf00      	nop
 8003128:	bf00      	nop
}
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003146:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314c:	2b00      	cmp	r3, #0
 800314e:	d004      	beq.n	800315a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003158:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f003 021f 	and.w	r2, r3, #31
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	2101      	movs	r1, #1
 8003168:	fa01 f202 	lsl.w	r2, r1, r2
 800316c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b10      	cmp	r3, #16
 800317c:	d108      	bne.n	8003190 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800318e:	e007      	b.n	80031a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	60da      	str	r2, [r3, #12]
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b16      	ldr	r3, [pc, #88]	; (8003214 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80031bc:	429a      	cmp	r2, r3
 80031be:	d802      	bhi.n	80031c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80031c0:	4b15      	ldr	r3, [pc, #84]	; (8003218 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	e001      	b.n	80031ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80031c6:	4b15      	ldr	r3, [pc, #84]	; (800321c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80031c8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	3b08      	subs	r3, #8
 80031d6:	4a12      	ldr	r2, [pc, #72]	; (8003220 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	009a      	lsls	r2, r3, #2
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	461a      	mov	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a0b      	ldr	r2, [pc, #44]	; (8003224 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80031f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	2201      	movs	r2, #1
 8003200:	409a      	lsls	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40020407 	.word	0x40020407
 8003218:	40020800 	.word	0x40020800
 800321c:	40020820 	.word	0x40020820
 8003220:	cccccccd 	.word	0xcccccccd
 8003224:	40020880 	.word	0x40020880

08003228 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	461a      	mov	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a08      	ldr	r2, [pc, #32]	; (800326c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800324a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3b01      	subs	r3, #1
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2201      	movs	r2, #1
 8003256:	409a      	lsls	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	1000823f 	.word	0x1000823f
 800326c:	40020940 	.word	0x40020940

08003270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800327e:	e15a      	b.n	8003536 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	2101      	movs	r1, #1
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	4013      	ands	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 814c 	beq.w	8003530 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d005      	beq.n	80032b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d130      	bne.n	8003312 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	2203      	movs	r2, #3
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032e6:	2201      	movs	r2, #1
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4013      	ands	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	f003 0201 	and.w	r2, r3, #1
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b03      	cmp	r3, #3
 800331c:	d017      	beq.n	800334e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	2203      	movs	r2, #3
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4013      	ands	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d123      	bne.n	80033a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	08da      	lsrs	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3208      	adds	r2, #8
 8003362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003366:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	220f      	movs	r2, #15
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4013      	ands	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	08da      	lsrs	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3208      	adds	r2, #8
 800339c:	6939      	ldr	r1, [r7, #16]
 800339e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	2203      	movs	r2, #3
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 0203 	and.w	r2, r3, #3
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80a6 	beq.w	8003530 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e4:	4b5b      	ldr	r3, [pc, #364]	; (8003554 <HAL_GPIO_Init+0x2e4>)
 80033e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e8:	4a5a      	ldr	r2, [pc, #360]	; (8003554 <HAL_GPIO_Init+0x2e4>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6613      	str	r3, [r2, #96]	; 0x60
 80033f0:	4b58      	ldr	r3, [pc, #352]	; (8003554 <HAL_GPIO_Init+0x2e4>)
 80033f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033fc:	4a56      	ldr	r2, [pc, #344]	; (8003558 <HAL_GPIO_Init+0x2e8>)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	089b      	lsrs	r3, r3, #2
 8003402:	3302      	adds	r3, #2
 8003404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003408:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	220f      	movs	r2, #15
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4013      	ands	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003426:	d01f      	beq.n	8003468 <HAL_GPIO_Init+0x1f8>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a4c      	ldr	r2, [pc, #304]	; (800355c <HAL_GPIO_Init+0x2ec>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d019      	beq.n	8003464 <HAL_GPIO_Init+0x1f4>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a4b      	ldr	r2, [pc, #300]	; (8003560 <HAL_GPIO_Init+0x2f0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d013      	beq.n	8003460 <HAL_GPIO_Init+0x1f0>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a4a      	ldr	r2, [pc, #296]	; (8003564 <HAL_GPIO_Init+0x2f4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00d      	beq.n	800345c <HAL_GPIO_Init+0x1ec>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a49      	ldr	r2, [pc, #292]	; (8003568 <HAL_GPIO_Init+0x2f8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d007      	beq.n	8003458 <HAL_GPIO_Init+0x1e8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a48      	ldr	r2, [pc, #288]	; (800356c <HAL_GPIO_Init+0x2fc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d101      	bne.n	8003454 <HAL_GPIO_Init+0x1e4>
 8003450:	2305      	movs	r3, #5
 8003452:	e00a      	b.n	800346a <HAL_GPIO_Init+0x1fa>
 8003454:	2306      	movs	r3, #6
 8003456:	e008      	b.n	800346a <HAL_GPIO_Init+0x1fa>
 8003458:	2304      	movs	r3, #4
 800345a:	e006      	b.n	800346a <HAL_GPIO_Init+0x1fa>
 800345c:	2303      	movs	r3, #3
 800345e:	e004      	b.n	800346a <HAL_GPIO_Init+0x1fa>
 8003460:	2302      	movs	r3, #2
 8003462:	e002      	b.n	800346a <HAL_GPIO_Init+0x1fa>
 8003464:	2301      	movs	r3, #1
 8003466:	e000      	b.n	800346a <HAL_GPIO_Init+0x1fa>
 8003468:	2300      	movs	r3, #0
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	f002 0203 	and.w	r2, r2, #3
 8003470:	0092      	lsls	r2, r2, #2
 8003472:	4093      	lsls	r3, r2
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800347a:	4937      	ldr	r1, [pc, #220]	; (8003558 <HAL_GPIO_Init+0x2e8>)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	3302      	adds	r3, #2
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003488:	4b39      	ldr	r3, [pc, #228]	; (8003570 <HAL_GPIO_Init+0x300>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	43db      	mvns	r3, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034ac:	4a30      	ldr	r2, [pc, #192]	; (8003570 <HAL_GPIO_Init+0x300>)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034b2:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <HAL_GPIO_Init+0x300>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4013      	ands	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034d6:	4a26      	ldr	r2, [pc, #152]	; (8003570 <HAL_GPIO_Init+0x300>)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80034dc:	4b24      	ldr	r3, [pc, #144]	; (8003570 <HAL_GPIO_Init+0x300>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003500:	4a1b      	ldr	r2, [pc, #108]	; (8003570 <HAL_GPIO_Init+0x300>)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003506:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <HAL_GPIO_Init+0x300>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	43db      	mvns	r3, r3
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800352a:	4a11      	ldr	r2, [pc, #68]	; (8003570 <HAL_GPIO_Init+0x300>)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	3301      	adds	r3, #1
 8003534:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	f47f ae9d 	bne.w	8003280 <HAL_GPIO_Init+0x10>
  }
}
 8003546:	bf00      	nop
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	40021000 	.word	0x40021000
 8003558:	40010000 	.word	0x40010000
 800355c:	48000400 	.word	0x48000400
 8003560:	48000800 	.word	0x48000800
 8003564:	48000c00 	.word	0x48000c00
 8003568:	48001000 	.word	0x48001000
 800356c:	48001400 	.word	0x48001400
 8003570:	40010400 	.word	0x40010400

08003574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	807b      	strh	r3, [r7, #2]
 8003580:	4613      	mov	r3, r2
 8003582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003584:	787b      	ldrb	r3, [r7, #1]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800358a:	887a      	ldrh	r2, [r7, #2]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003590:	e002      	b.n	8003598 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d006      	beq.n	80035c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f806 	bl	80035d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40010400 	.word	0x40010400

080035d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d141      	bne.n	800367e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035fa:	4b4b      	ldr	r3, [pc, #300]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003606:	d131      	bne.n	800366c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003608:	4b47      	ldr	r3, [pc, #284]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800360a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800360e:	4a46      	ldr	r2, [pc, #280]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003614:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003618:	4b43      	ldr	r3, [pc, #268]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003620:	4a41      	ldr	r2, [pc, #260]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003626:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003628:	4b40      	ldr	r3, [pc, #256]	; (800372c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2232      	movs	r2, #50	; 0x32
 800362e:	fb02 f303 	mul.w	r3, r2, r3
 8003632:	4a3f      	ldr	r2, [pc, #252]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	0c9b      	lsrs	r3, r3, #18
 800363a:	3301      	adds	r3, #1
 800363c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800363e:	e002      	b.n	8003646 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3b01      	subs	r3, #1
 8003644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003646:	4b38      	ldr	r3, [pc, #224]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003652:	d102      	bne.n	800365a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f2      	bne.n	8003640 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800365a:	4b33      	ldr	r3, [pc, #204]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003666:	d158      	bne.n	800371a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e057      	b.n	800371c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800366c:	4b2e      	ldr	r3, [pc, #184]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003672:	4a2d      	ldr	r2, [pc, #180]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003678:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800367c:	e04d      	b.n	800371a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003684:	d141      	bne.n	800370a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003686:	4b28      	ldr	r3, [pc, #160]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800368e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003692:	d131      	bne.n	80036f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003694:	4b24      	ldr	r3, [pc, #144]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800369a:	4a23      	ldr	r2, [pc, #140]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036a4:	4b20      	ldr	r3, [pc, #128]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036ac:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036b4:	4b1d      	ldr	r3, [pc, #116]	; (800372c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2232      	movs	r2, #50	; 0x32
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	4a1c      	ldr	r2, [pc, #112]	; (8003730 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036c0:	fba2 2303 	umull	r2, r3, r2, r3
 80036c4:	0c9b      	lsrs	r3, r3, #18
 80036c6:	3301      	adds	r3, #1
 80036c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ca:	e002      	b.n	80036d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036d2:	4b15      	ldr	r3, [pc, #84]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036de:	d102      	bne.n	80036e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f2      	bne.n	80036cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f2:	d112      	bne.n	800371a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e011      	b.n	800371c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036fe:	4a0a      	ldr	r2, [pc, #40]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003704:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003708:	e007      	b.n	800371a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800370a:	4b07      	ldr	r3, [pc, #28]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003712:	4a05      	ldr	r2, [pc, #20]	; (8003728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003714:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003718:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	40007000 	.word	0x40007000
 800372c:	20000000 	.word	0x20000000
 8003730:	431bde83 	.word	0x431bde83

08003734 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4a04      	ldr	r2, [pc, #16]	; (8003750 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800373e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003742:	6093      	str	r3, [r2, #8]
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40007000 	.word	0x40007000

08003754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e2fe      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d075      	beq.n	800385e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003772:	4b97      	ldr	r3, [pc, #604]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f003 030c 	and.w	r3, r3, #12
 800377a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800377c:	4b94      	ldr	r3, [pc, #592]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b0c      	cmp	r3, #12
 800378a:	d102      	bne.n	8003792 <HAL_RCC_OscConfig+0x3e>
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b03      	cmp	r3, #3
 8003790:	d002      	beq.n	8003798 <HAL_RCC_OscConfig+0x44>
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d10b      	bne.n	80037b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003798:	4b8d      	ldr	r3, [pc, #564]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d05b      	beq.n	800385c <HAL_RCC_OscConfig+0x108>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d157      	bne.n	800385c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e2d9      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b8:	d106      	bne.n	80037c8 <HAL_RCC_OscConfig+0x74>
 80037ba:	4b85      	ldr	r3, [pc, #532]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a84      	ldr	r2, [pc, #528]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	e01d      	b.n	8003804 <HAL_RCC_OscConfig+0xb0>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037d0:	d10c      	bne.n	80037ec <HAL_RCC_OscConfig+0x98>
 80037d2:	4b7f      	ldr	r3, [pc, #508]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a7e      	ldr	r2, [pc, #504]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	4b7c      	ldr	r3, [pc, #496]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a7b      	ldr	r2, [pc, #492]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e00b      	b.n	8003804 <HAL_RCC_OscConfig+0xb0>
 80037ec:	4b78      	ldr	r3, [pc, #480]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a77      	ldr	r2, [pc, #476]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	4b75      	ldr	r3, [pc, #468]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a74      	ldr	r2, [pc, #464]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80037fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d013      	beq.n	8003834 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800380c:	f7fd fb80 	bl	8000f10 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003814:	f7fd fb7c 	bl	8000f10 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e29e      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003826:	4b6a      	ldr	r3, [pc, #424]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0xc0>
 8003832:	e014      	b.n	800385e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fd fb6c 	bl	8000f10 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383c:	f7fd fb68 	bl	8000f10 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	; 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e28a      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800384e:	4b60      	ldr	r3, [pc, #384]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0xe8>
 800385a:	e000      	b.n	800385e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d075      	beq.n	8003956 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800386a:	4b59      	ldr	r3, [pc, #356]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003874:	4b56      	ldr	r3, [pc, #344]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b0c      	cmp	r3, #12
 8003882:	d102      	bne.n	800388a <HAL_RCC_OscConfig+0x136>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d002      	beq.n	8003890 <HAL_RCC_OscConfig+0x13c>
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b04      	cmp	r3, #4
 800388e:	d11f      	bne.n	80038d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003890:	4b4f      	ldr	r3, [pc, #316]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_RCC_OscConfig+0x154>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e25d      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a8:	4b49      	ldr	r3, [pc, #292]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	061b      	lsls	r3, r3, #24
 80038b6:	4946      	ldr	r1, [pc, #280]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80038bc:	4b45      	ldr	r3, [pc, #276]	; (80039d4 <HAL_RCC_OscConfig+0x280>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fd fad9 	bl	8000e78 <HAL_InitTick>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d043      	beq.n	8003954 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e249      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d023      	beq.n	8003920 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038d8:	4b3d      	ldr	r3, [pc, #244]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a3c      	ldr	r2, [pc, #240]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80038de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fd fb14 	bl	8000f10 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ec:	f7fd fb10 	bl	8000f10 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e232      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038fe:	4b34      	ldr	r3, [pc, #208]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390a:	4b31      	ldr	r3, [pc, #196]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	061b      	lsls	r3, r3, #24
 8003918:	492d      	ldr	r1, [pc, #180]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 800391a:	4313      	orrs	r3, r2
 800391c:	604b      	str	r3, [r1, #4]
 800391e:	e01a      	b.n	8003956 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003920:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003926:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800392a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fd faf0 	bl	8000f10 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003934:	f7fd faec 	bl	8000f10 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e20e      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003946:	4b22      	ldr	r3, [pc, #136]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x1e0>
 8003952:	e000      	b.n	8003956 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003954:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d041      	beq.n	80039e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d01c      	beq.n	80039a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800396a:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 800396c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003970:	4a17      	ldr	r2, [pc, #92]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397a:	f7fd fac9 	bl	8000f10 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003982:	f7fd fac5 	bl	8000f10 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e1e7      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003994:	4b0e      	ldr	r3, [pc, #56]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 8003996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0ef      	beq.n	8003982 <HAL_RCC_OscConfig+0x22e>
 80039a2:	e020      	b.n	80039e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80039a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039aa:	4a09      	ldr	r2, [pc, #36]	; (80039d0 <HAL_RCC_OscConfig+0x27c>)
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fd faac 	bl	8000f10 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039ba:	e00d      	b.n	80039d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039bc:	f7fd faa8 	bl	8000f10 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d906      	bls.n	80039d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e1ca      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000
 80039d4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039d8:	4b8c      	ldr	r3, [pc, #560]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 80039da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1ea      	bne.n	80039bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80a6 	beq.w	8003b40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f4:	2300      	movs	r3, #0
 80039f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039f8:	4b84      	ldr	r3, [pc, #528]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_RCC_OscConfig+0x2b4>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x2b6>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00d      	beq.n	8003a2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a0e:	4b7f      	ldr	r3, [pc, #508]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	4a7e      	ldr	r2, [pc, #504]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a18:	6593      	str	r3, [r2, #88]	; 0x58
 8003a1a:	4b7c      	ldr	r3, [pc, #496]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a26:	2301      	movs	r3, #1
 8003a28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a2a:	4b79      	ldr	r3, [pc, #484]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d118      	bne.n	8003a68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a36:	4b76      	ldr	r3, [pc, #472]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a75      	ldr	r2, [pc, #468]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a42:	f7fd fa65 	bl	8000f10 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4a:	f7fd fa61 	bl	8000f10 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e183      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a5c:	4b6c      	ldr	r3, [pc, #432]	; (8003c10 <HAL_RCC_OscConfig+0x4bc>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0f0      	beq.n	8003a4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d108      	bne.n	8003a82 <HAL_RCC_OscConfig+0x32e>
 8003a70:	4b66      	ldr	r3, [pc, #408]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a76:	4a65      	ldr	r2, [pc, #404]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a80:	e024      	b.n	8003acc <HAL_RCC_OscConfig+0x378>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b05      	cmp	r3, #5
 8003a88:	d110      	bne.n	8003aac <HAL_RCC_OscConfig+0x358>
 8003a8a:	4b60      	ldr	r3, [pc, #384]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a90:	4a5e      	ldr	r2, [pc, #376]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003a92:	f043 0304 	orr.w	r3, r3, #4
 8003a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a9a:	4b5c      	ldr	r3, [pc, #368]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa0:	4a5a      	ldr	r2, [pc, #360]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aaa:	e00f      	b.n	8003acc <HAL_RCC_OscConfig+0x378>
 8003aac:	4b57      	ldr	r3, [pc, #348]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab2:	4a56      	ldr	r2, [pc, #344]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003abc:	4b53      	ldr	r3, [pc, #332]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac2:	4a52      	ldr	r2, [pc, #328]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003ac4:	f023 0304 	bic.w	r3, r3, #4
 8003ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d016      	beq.n	8003b02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7fd fa1c 	bl	8000f10 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003adc:	f7fd fa18 	bl	8000f10 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e138      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af2:	4b46      	ldr	r3, [pc, #280]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0ed      	beq.n	8003adc <HAL_RCC_OscConfig+0x388>
 8003b00:	e015      	b.n	8003b2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b02:	f7fd fa05 	bl	8000f10 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b08:	e00a      	b.n	8003b20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0a:	f7fd fa01 	bl	8000f10 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e121      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b20:	4b3a      	ldr	r3, [pc, #232]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1ed      	bne.n	8003b0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b2e:	7ffb      	ldrb	r3, [r7, #31]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d105      	bne.n	8003b40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b34:	4b35      	ldr	r3, [pc, #212]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b38:	4a34      	ldr	r2, [pc, #208]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003b3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d03c      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01c      	beq.n	8003b8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b54:	4b2d      	ldr	r3, [pc, #180]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b5a:	4a2c      	ldr	r2, [pc, #176]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7fd f9d4 	bl	8000f10 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b6c:	f7fd f9d0 	bl	8000f10 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e0f2      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b7e:	4b23      	ldr	r3, [pc, #140]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003b80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0ef      	beq.n	8003b6c <HAL_RCC_OscConfig+0x418>
 8003b8c:	e01b      	b.n	8003bc6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b8e:	4b1f      	ldr	r3, [pc, #124]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b94:	4a1d      	ldr	r2, [pc, #116]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003b96:	f023 0301 	bic.w	r3, r3, #1
 8003b9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9e:	f7fd f9b7 	bl	8000f10 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ba6:	f7fd f9b3 	bl	8000f10 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e0d5      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bb8:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1ef      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80c9 	beq.w	8003d62 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bd0:	4b0e      	ldr	r3, [pc, #56]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 030c 	and.w	r3, r3, #12
 8003bd8:	2b0c      	cmp	r3, #12
 8003bda:	f000 8083 	beq.w	8003ce4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d15e      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be6:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a08      	ldr	r2, [pc, #32]	; (8003c0c <HAL_RCC_OscConfig+0x4b8>)
 8003bec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf2:	f7fd f98d 	bl	8000f10 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf8:	e00c      	b.n	8003c14 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfa:	f7fd f989 	bl	8000f10 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d905      	bls.n	8003c14 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e0ab      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c14:	4b55      	ldr	r3, [pc, #340]	; (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1ec      	bne.n	8003bfa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c20:	4b52      	ldr	r3, [pc, #328]	; (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	4b52      	ldr	r3, [pc, #328]	; (8003d70 <HAL_RCC_OscConfig+0x61c>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6a11      	ldr	r1, [r2, #32]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c30:	3a01      	subs	r2, #1
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	4311      	orrs	r1, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c3a:	0212      	lsls	r2, r2, #8
 8003c3c:	4311      	orrs	r1, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c42:	0852      	lsrs	r2, r2, #1
 8003c44:	3a01      	subs	r2, #1
 8003c46:	0552      	lsls	r2, r2, #21
 8003c48:	4311      	orrs	r1, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c4e:	0852      	lsrs	r2, r2, #1
 8003c50:	3a01      	subs	r2, #1
 8003c52:	0652      	lsls	r2, r2, #25
 8003c54:	4311      	orrs	r1, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c5a:	06d2      	lsls	r2, r2, #27
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	4943      	ldr	r1, [pc, #268]	; (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c64:	4b41      	ldr	r3, [pc, #260]	; (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a40      	ldr	r2, [pc, #256]	; (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c70:	4b3e      	ldr	r3, [pc, #248]	; (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a3d      	ldr	r2, [pc, #244]	; (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fd f948 	bl	8000f10 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c84:	f7fd f944 	bl	8000f10 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e066      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c96:	4b35      	ldr	r3, [pc, #212]	; (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0x530>
 8003ca2:	e05e      	b.n	8003d62 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca4:	4b31      	ldr	r3, [pc, #196]	; (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a30      	ldr	r2, [pc, #192]	; (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003caa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fd f92e 	bl	8000f10 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7fd f92a 	bl	8000f10 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e04c      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cca:	4b28      	ldr	r3, [pc, #160]	; (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003cd6:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	4924      	ldr	r1, [pc, #144]	; (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003cdc:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <HAL_RCC_OscConfig+0x620>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	60cb      	str	r3, [r1, #12]
 8003ce2:	e03e      	b.n	8003d62 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e039      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003cf0:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <HAL_RCC_OscConfig+0x618>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 0203 	and.w	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d12c      	bne.n	8003d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d123      	bne.n	8003d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d11b      	bne.n	8003d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d113      	bne.n	8003d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	085b      	lsrs	r3, r3, #1
 8003d42:	3b01      	subs	r3, #1
 8003d44:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d109      	bne.n	8003d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	3b01      	subs	r3, #1
 8003d58:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d001      	beq.n	8003d62 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	019f800c 	.word	0x019f800c
 8003d74:	feeefffc 	.word	0xfeeefffc

08003d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e11e      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d90:	4b91      	ldr	r3, [pc, #580]	; (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d910      	bls.n	8003dc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9e:	4b8e      	ldr	r3, [pc, #568]	; (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 020f 	bic.w	r2, r3, #15
 8003da6:	498c      	ldr	r1, [pc, #560]	; (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	4b8a      	ldr	r3, [pc, #552]	; (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e106      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d073      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d129      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd4:	4b81      	ldr	r3, [pc, #516]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0f4      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003de4:	f000 f99e 	bl	8004124 <RCC_GetSysClockFreqFromPLLSource>
 8003de8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4a7c      	ldr	r2, [pc, #496]	; (8003fe0 <HAL_RCC_ClockConfig+0x268>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d93f      	bls.n	8003e72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003df2:	4b7a      	ldr	r3, [pc, #488]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d009      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d033      	beq.n	8003e72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d12f      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e12:	4b72      	ldr	r3, [pc, #456]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e1a:	4a70      	ldr	r2, [pc, #448]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e22:	2380      	movs	r3, #128	; 0x80
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e024      	b.n	8003e72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d107      	bne.n	8003e40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e30:	4b6a      	ldr	r3, [pc, #424]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d109      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0c6      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e40:	4b66      	ldr	r3, [pc, #408]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0be      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e50:	f000 f8ce 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4a61      	ldr	r2, [pc, #388]	; (8003fe0 <HAL_RCC_ClockConfig+0x268>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d909      	bls.n	8003e72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e5e:	4b5f      	ldr	r3, [pc, #380]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e66:	4a5d      	ldr	r2, [pc, #372]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e6e:	2380      	movs	r3, #128	; 0x80
 8003e70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e72:	4b5a      	ldr	r3, [pc, #360]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f023 0203 	bic.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	4957      	ldr	r1, [pc, #348]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e84:	f7fd f844 	bl	8000f10 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8c:	f7fd f840 	bl	8000f10 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e095      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	4b4e      	ldr	r3, [pc, #312]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 020c 	and.w	r2, r3, #12
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d1eb      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d023      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ecc:	4b43      	ldr	r3, [pc, #268]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	4a42      	ldr	r2, [pc, #264]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003ed2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ed6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d007      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ee4:	4b3d      	ldr	r3, [pc, #244]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003eec:	4a3b      	ldr	r2, [pc, #236]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003eee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ef2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef4:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	4936      	ldr	r1, [pc, #216]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b80      	cmp	r3, #128	; 0x80
 8003f0c:	d105      	bne.n	8003f1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f0e:	4b33      	ldr	r3, [pc, #204]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	4a32      	ldr	r2, [pc, #200]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f1a:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d21d      	bcs.n	8003f64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f28:	4b2b      	ldr	r3, [pc, #172]	; (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f023 020f 	bic.w	r2, r3, #15
 8003f30:	4929      	ldr	r1, [pc, #164]	; (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f38:	f7fc ffea 	bl	8000f10 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f40:	f7fc ffe6 	bl	8000f10 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e03b      	b.n	8003fce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f56:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1ed      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f70:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4917      	ldr	r1, [pc, #92]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f8e:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	490f      	ldr	r1, [pc, #60]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fa2:	f000 f825 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <HAL_RCC_ClockConfig+0x264>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	490c      	ldr	r1, [pc, #48]	; (8003fe4 <HAL_RCC_ClockConfig+0x26c>)
 8003fb4:	5ccb      	ldrb	r3, [r1, r3]
 8003fb6:	f003 031f 	and.w	r3, r3, #31
 8003fba:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbe:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <HAL_RCC_ClockConfig+0x270>)
 8003fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fc2:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <HAL_RCC_ClockConfig+0x274>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fc ff56 	bl	8000e78 <HAL_InitTick>
 8003fcc:	4603      	mov	r3, r0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40022000 	.word	0x40022000
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	04c4b400 	.word	0x04c4b400
 8003fe4:	08005f8c 	.word	0x08005f8c
 8003fe8:	20000000 	.word	0x20000000
 8003fec:	20000004 	.word	0x20000004

08003ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ff6:	4b2c      	ldr	r3, [pc, #176]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d102      	bne.n	8004008 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004002:	4b2a      	ldr	r3, [pc, #168]	; (80040ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	e047      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004008:	4b27      	ldr	r3, [pc, #156]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 030c 	and.w	r3, r3, #12
 8004010:	2b08      	cmp	r3, #8
 8004012:	d102      	bne.n	800401a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004014:	4b26      	ldr	r3, [pc, #152]	; (80040b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	e03e      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800401a:	4b23      	ldr	r3, [pc, #140]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b0c      	cmp	r3, #12
 8004024:	d136      	bne.n	8004094 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004026:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004030:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	091b      	lsrs	r3, r3, #4
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	3301      	adds	r3, #1
 800403c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b03      	cmp	r3, #3
 8004042:	d10c      	bne.n	800405e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004044:	4a1a      	ldr	r2, [pc, #104]	; (80040b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	4a16      	ldr	r2, [pc, #88]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800404e:	68d2      	ldr	r2, [r2, #12]
 8004050:	0a12      	lsrs	r2, r2, #8
 8004052:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004056:	fb02 f303 	mul.w	r3, r2, r3
 800405a:	617b      	str	r3, [r7, #20]
      break;
 800405c:	e00c      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800405e:	4a13      	ldr	r2, [pc, #76]	; (80040ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	fbb2 f3f3 	udiv	r3, r2, r3
 8004066:	4a10      	ldr	r2, [pc, #64]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004068:	68d2      	ldr	r2, [r2, #12]
 800406a:	0a12      	lsrs	r2, r2, #8
 800406c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004070:	fb02 f303 	mul.w	r3, r2, r3
 8004074:	617b      	str	r3, [r7, #20]
      break;
 8004076:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	0e5b      	lsrs	r3, r3, #25
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	3301      	adds	r3, #1
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	e001      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004098:	693b      	ldr	r3, [r7, #16]
}
 800409a:	4618      	mov	r0, r3
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40021000 	.word	0x40021000
 80040ac:	00f42400 	.word	0x00f42400
 80040b0:	016e3600 	.word	0x016e3600

080040b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040ba:	681b      	ldr	r3, [r3, #0]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	20000000 	.word	0x20000000

080040cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040d0:	f7ff fff0 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	0a1b      	lsrs	r3, r3, #8
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	4904      	ldr	r1, [pc, #16]	; (80040f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040e2:	5ccb      	ldrb	r3, [r1, r3]
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40021000 	.word	0x40021000
 80040f4:	08005f9c 	.word	0x08005f9c

080040f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040fc:	f7ff ffda 	bl	80040b4 <HAL_RCC_GetHCLKFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	0adb      	lsrs	r3, r3, #11
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	4904      	ldr	r1, [pc, #16]	; (8004120 <HAL_RCC_GetPCLK2Freq+0x28>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004118:	4618      	mov	r0, r3
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40021000 	.word	0x40021000
 8004120:	08005f9c 	.word	0x08005f9c

08004124 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800412a:	4b1e      	ldr	r3, [pc, #120]	; (80041a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004134:	4b1b      	ldr	r3, [pc, #108]	; (80041a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	3301      	adds	r3, #1
 8004140:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d10c      	bne.n	8004162 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004148:	4a17      	ldr	r2, [pc, #92]	; (80041a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004150:	4a14      	ldr	r2, [pc, #80]	; (80041a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004152:	68d2      	ldr	r2, [r2, #12]
 8004154:	0a12      	lsrs	r2, r2, #8
 8004156:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800415a:	fb02 f303 	mul.w	r3, r2, r3
 800415e:	617b      	str	r3, [r7, #20]
    break;
 8004160:	e00c      	b.n	800417c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004162:	4a12      	ldr	r2, [pc, #72]	; (80041ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	fbb2 f3f3 	udiv	r3, r2, r3
 800416a:	4a0e      	ldr	r2, [pc, #56]	; (80041a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800416c:	68d2      	ldr	r2, [r2, #12]
 800416e:	0a12      	lsrs	r2, r2, #8
 8004170:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004174:	fb02 f303 	mul.w	r3, r2, r3
 8004178:	617b      	str	r3, [r7, #20]
    break;
 800417a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	0e5b      	lsrs	r3, r3, #25
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	3301      	adds	r3, #1
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	fbb2 f3f3 	udiv	r3, r2, r3
 8004194:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004196:	687b      	ldr	r3, [r7, #4]
}
 8004198:	4618      	mov	r0, r3
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	40021000 	.word	0x40021000
 80041a8:	016e3600 	.word	0x016e3600
 80041ac:	00f42400 	.word	0x00f42400

080041b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041b8:	2300      	movs	r3, #0
 80041ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041bc:	2300      	movs	r3, #0
 80041be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 8098 	beq.w	80042fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ce:	2300      	movs	r3, #0
 80041d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d2:	4b43      	ldr	r3, [pc, #268]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10d      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	4b40      	ldr	r3, [pc, #256]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e2:	4a3f      	ldr	r2, [pc, #252]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e8:	6593      	str	r3, [r2, #88]	; 0x58
 80041ea:	4b3d      	ldr	r3, [pc, #244]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f6:	2301      	movs	r3, #1
 80041f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041fa:	4b3a      	ldr	r3, [pc, #232]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a39      	ldr	r2, [pc, #228]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004204:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004206:	f7fc fe83 	bl	8000f10 <HAL_GetTick>
 800420a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800420c:	e009      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420e:	f7fc fe7f 	bl	8000f10 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d902      	bls.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	74fb      	strb	r3, [r7, #19]
        break;
 8004220:	e005      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004222:	4b30      	ldr	r3, [pc, #192]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0ef      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800422e:	7cfb      	ldrb	r3, [r7, #19]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d159      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004234:	4b2a      	ldr	r3, [pc, #168]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800423e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d01e      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	429a      	cmp	r2, r3
 800424e:	d019      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004250:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800425a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800425c:	4b20      	ldr	r3, [pc, #128]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004262:	4a1f      	ldr	r2, [pc, #124]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800426c:	4b1c      	ldr	r3, [pc, #112]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800427c:	4a18      	ldr	r2, [pc, #96]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d016      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7fc fe3f 	bl	8000f10 <HAL_GetTick>
 8004292:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004294:	e00b      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004296:	f7fc fe3b 	bl	8000f10 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d902      	bls.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	74fb      	strb	r3, [r7, #19]
            break;
 80042ac:	e006      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ae:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0ec      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042bc:	7cfb      	ldrb	r3, [r7, #19]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d0:	4903      	ldr	r1, [pc, #12]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042d8:	e008      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042da:	7cfb      	ldrb	r3, [r7, #19]
 80042dc:	74bb      	strb	r3, [r7, #18]
 80042de:	e005      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e8:	7cfb      	ldrb	r3, [r7, #19]
 80042ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ec:	7c7b      	ldrb	r3, [r7, #17]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d105      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f2:	4ba7      	ldr	r3, [pc, #668]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f6:	4aa6      	ldr	r2, [pc, #664]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800430a:	4ba1      	ldr	r3, [pc, #644]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004310:	f023 0203 	bic.w	r2, r3, #3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	499d      	ldr	r1, [pc, #628]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800432c:	4b98      	ldr	r3, [pc, #608]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004332:	f023 020c 	bic.w	r2, r3, #12
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	4995      	ldr	r1, [pc, #596]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800434e:	4b90      	ldr	r3, [pc, #576]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004354:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	498c      	ldr	r1, [pc, #560]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004370:	4b87      	ldr	r3, [pc, #540]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	4984      	ldr	r1, [pc, #528]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004392:	4b7f      	ldr	r3, [pc, #508]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	497b      	ldr	r1, [pc, #492]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043b4:	4b76      	ldr	r3, [pc, #472]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	4973      	ldr	r1, [pc, #460]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043d6:	4b6e      	ldr	r3, [pc, #440]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	496a      	ldr	r1, [pc, #424]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043f8:	4b65      	ldr	r3, [pc, #404]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	4962      	ldr	r1, [pc, #392]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800441a:	4b5d      	ldr	r3, [pc, #372]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800441c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004420:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	4959      	ldr	r1, [pc, #356]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800443c:	4b54      	ldr	r3, [pc, #336]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004442:	f023 0203 	bic.w	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	4951      	ldr	r1, [pc, #324]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800445e:	4b4c      	ldr	r3, [pc, #304]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004464:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	4948      	ldr	r1, [pc, #288]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447c:	2b00      	cmp	r3, #0
 800447e:	d015      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004480:	4b43      	ldr	r3, [pc, #268]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004486:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	4940      	ldr	r1, [pc, #256]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800449e:	d105      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a0:	4b3b      	ldr	r3, [pc, #236]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4a3a      	ldr	r2, [pc, #232]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d015      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044b8:	4b35      	ldr	r3, [pc, #212]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c6:	4932      	ldr	r1, [pc, #200]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044d6:	d105      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044d8:	4b2d      	ldr	r3, [pc, #180]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	4a2c      	ldr	r2, [pc, #176]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d015      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044f0:	4b27      	ldr	r3, [pc, #156]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	4924      	ldr	r1, [pc, #144]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800450e:	d105      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004510:	4b1f      	ldr	r3, [pc, #124]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4a1e      	ldr	r2, [pc, #120]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800451a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d015      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004528:	4b19      	ldr	r3, [pc, #100]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004536:	4916      	ldr	r1, [pc, #88]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004546:	d105      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004548:	4b11      	ldr	r3, [pc, #68]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4a10      	ldr	r2, [pc, #64]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004552:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d019      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004566:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	4908      	ldr	r1, [pc, #32]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800457e:	d109      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004580:	4b03      	ldr	r3, [pc, #12]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	4a02      	ldr	r2, [pc, #8]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800458a:	60d3      	str	r3, [r2, #12]
 800458c:	e002      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800458e:	bf00      	nop
 8004590:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d015      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045a0:	4b29      	ldr	r3, [pc, #164]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ae:	4926      	ldr	r1, [pc, #152]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045be:	d105      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045c0:	4b21      	ldr	r3, [pc, #132]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	4a20      	ldr	r2, [pc, #128]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d015      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80045d8:	4b1b      	ldr	r3, [pc, #108]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e6:	4918      	ldr	r1, [pc, #96]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f6:	d105      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045f8:	4b13      	ldr	r3, [pc, #76]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4a12      	ldr	r2, [pc, #72]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004602:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d015      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004612:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004616:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461e:	490a      	ldr	r1, [pc, #40]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800462e:	d105      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4a04      	ldr	r2, [pc, #16]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800463a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800463c:	7cbb      	ldrb	r3, [r7, #18]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000

0800464c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e049      	b.n	80046f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fc fb24 	bl	8000cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3304      	adds	r3, #4
 8004688:	4619      	mov	r1, r3
 800468a:	4610      	mov	r0, r2
 800468c:	f000 fbac 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b01      	cmp	r3, #1
 800470e:	d001      	beq.n	8004714 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e04c      	b.n	80047ae <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a26      	ldr	r2, [pc, #152]	; (80047bc <HAL_TIM_Base_Start+0xc0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d022      	beq.n	800476c <HAL_TIM_Base_Start+0x70>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472e:	d01d      	beq.n	800476c <HAL_TIM_Base_Start+0x70>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a22      	ldr	r2, [pc, #136]	; (80047c0 <HAL_TIM_Base_Start+0xc4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d018      	beq.n	800476c <HAL_TIM_Base_Start+0x70>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a21      	ldr	r2, [pc, #132]	; (80047c4 <HAL_TIM_Base_Start+0xc8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d013      	beq.n	800476c <HAL_TIM_Base_Start+0x70>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1f      	ldr	r2, [pc, #124]	; (80047c8 <HAL_TIM_Base_Start+0xcc>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00e      	beq.n	800476c <HAL_TIM_Base_Start+0x70>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <HAL_TIM_Base_Start+0xd0>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d009      	beq.n	800476c <HAL_TIM_Base_Start+0x70>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1c      	ldr	r2, [pc, #112]	; (80047d0 <HAL_TIM_Base_Start+0xd4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d004      	beq.n	800476c <HAL_TIM_Base_Start+0x70>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1b      	ldr	r2, [pc, #108]	; (80047d4 <HAL_TIM_Base_Start+0xd8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d115      	bne.n	8004798 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	4b19      	ldr	r3, [pc, #100]	; (80047d8 <HAL_TIM_Base_Start+0xdc>)
 8004774:	4013      	ands	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b06      	cmp	r3, #6
 800477c:	d015      	beq.n	80047aa <HAL_TIM_Base_Start+0xae>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004784:	d011      	beq.n	80047aa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0201 	orr.w	r2, r2, #1
 8004794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004796:	e008      	b.n	80047aa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	e000      	b.n	80047ac <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40012c00 	.word	0x40012c00
 80047c0:	40000400 	.word	0x40000400
 80047c4:	40000800 	.word	0x40000800
 80047c8:	40000c00 	.word	0x40000c00
 80047cc:	40013400 	.word	0x40013400
 80047d0:	40014000 	.word	0x40014000
 80047d4:	40015000 	.word	0x40015000
 80047d8:	00010007 	.word	0x00010007

080047dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d001      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e054      	b.n	800489e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a26      	ldr	r2, [pc, #152]	; (80048ac <HAL_TIM_Base_Start_IT+0xd0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d022      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481e:	d01d      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a22      	ldr	r2, [pc, #136]	; (80048b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d018      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a21      	ldr	r2, [pc, #132]	; (80048b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d013      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1f      	ldr	r2, [pc, #124]	; (80048b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00e      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a1e      	ldr	r2, [pc, #120]	; (80048bc <HAL_TIM_Base_Start_IT+0xe0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d009      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1c      	ldr	r2, [pc, #112]	; (80048c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d004      	beq.n	800485c <HAL_TIM_Base_Start_IT+0x80>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1b      	ldr	r2, [pc, #108]	; (80048c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d115      	bne.n	8004888 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	4b19      	ldr	r3, [pc, #100]	; (80048c8 <HAL_TIM_Base_Start_IT+0xec>)
 8004864:	4013      	ands	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b06      	cmp	r3, #6
 800486c:	d015      	beq.n	800489a <HAL_TIM_Base_Start_IT+0xbe>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004874:	d011      	beq.n	800489a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0201 	orr.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004886:	e008      	b.n	800489a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	e000      	b.n	800489c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800489a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40012c00 	.word	0x40012c00
 80048b0:	40000400 	.word	0x40000400
 80048b4:	40000800 	.word	0x40000800
 80048b8:	40000c00 	.word	0x40000c00
 80048bc:	40013400 	.word	0x40013400
 80048c0:	40014000 	.word	0x40014000
 80048c4:	40015000 	.word	0x40015000
 80048c8:	00010007 	.word	0x00010007

080048cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d020      	beq.n	8004930 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01b      	beq.n	8004930 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0202 	mvn.w	r2, #2
 8004900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fa48 	bl	8004dac <HAL_TIM_IC_CaptureCallback>
 800491c:	e005      	b.n	800492a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa3a 	bl	8004d98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fa4b 	bl	8004dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	d020      	beq.n	800497c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01b      	beq.n	800497c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0204 	mvn.w	r2, #4
 800494c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fa22 	bl	8004dac <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fa14 	bl	8004d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fa25 	bl	8004dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d020      	beq.n	80049c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01b      	beq.n	80049c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0208 	mvn.w	r2, #8
 8004998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2204      	movs	r2, #4
 800499e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f9fc 	bl	8004dac <HAL_TIM_IC_CaptureCallback>
 80049b4:	e005      	b.n	80049c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f9ee 	bl	8004d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f9ff 	bl	8004dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d020      	beq.n	8004a14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01b      	beq.n	8004a14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0210 	mvn.w	r2, #16
 80049e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2208      	movs	r2, #8
 80049ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f9d6 	bl	8004dac <HAL_TIM_IC_CaptureCallback>
 8004a00:	e005      	b.n	8004a0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f9c8 	bl	8004d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f9d9 	bl	8004dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00c      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0201 	mvn.w	r2, #1
 8004a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fc f804 	bl	8000a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d104      	bne.n	8004a4c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00c      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fbb1 	bl	80051c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00c      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fba9 	bl	80051dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00c      	beq.n	8004aae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f993 	bl	8004dd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00c      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f06f 0220 	mvn.w	r2, #32
 8004aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fb71 	bl	80051b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00c      	beq.n	8004af6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fb7d 	bl	80051f0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00c      	beq.n	8004b1a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d007      	beq.n	8004b1a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fb75 	bl	8005204 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00c      	beq.n	8004b3e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fb6d 	bl	8005218 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00c      	beq.n	8004b62 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d007      	beq.n	8004b62 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fb65 	bl	800522c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_TIM_ConfigClockSource+0x1c>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e0f6      	b.n	8004d76 <HAL_TIM_ConfigClockSource+0x20a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004ba6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a6f      	ldr	r2, [pc, #444]	; (8004d80 <HAL_TIM_ConfigClockSource+0x214>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	f000 80c1 	beq.w	8004d4a <HAL_TIM_ConfigClockSource+0x1de>
 8004bc8:	4a6d      	ldr	r2, [pc, #436]	; (8004d80 <HAL_TIM_ConfigClockSource+0x214>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	f200 80c6 	bhi.w	8004d5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004bd0:	4a6c      	ldr	r2, [pc, #432]	; (8004d84 <HAL_TIM_ConfigClockSource+0x218>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	f000 80b9 	beq.w	8004d4a <HAL_TIM_ConfigClockSource+0x1de>
 8004bd8:	4a6a      	ldr	r2, [pc, #424]	; (8004d84 <HAL_TIM_ConfigClockSource+0x218>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	f200 80be 	bhi.w	8004d5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004be0:	4a69      	ldr	r2, [pc, #420]	; (8004d88 <HAL_TIM_ConfigClockSource+0x21c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	f000 80b1 	beq.w	8004d4a <HAL_TIM_ConfigClockSource+0x1de>
 8004be8:	4a67      	ldr	r2, [pc, #412]	; (8004d88 <HAL_TIM_ConfigClockSource+0x21c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	f200 80b6 	bhi.w	8004d5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004bf0:	4a66      	ldr	r2, [pc, #408]	; (8004d8c <HAL_TIM_ConfigClockSource+0x220>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	f000 80a9 	beq.w	8004d4a <HAL_TIM_ConfigClockSource+0x1de>
 8004bf8:	4a64      	ldr	r2, [pc, #400]	; (8004d8c <HAL_TIM_ConfigClockSource+0x220>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	f200 80ae 	bhi.w	8004d5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004c00:	4a63      	ldr	r2, [pc, #396]	; (8004d90 <HAL_TIM_ConfigClockSource+0x224>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	f000 80a1 	beq.w	8004d4a <HAL_TIM_ConfigClockSource+0x1de>
 8004c08:	4a61      	ldr	r2, [pc, #388]	; (8004d90 <HAL_TIM_ConfigClockSource+0x224>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	f200 80a6 	bhi.w	8004d5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004c10:	4a60      	ldr	r2, [pc, #384]	; (8004d94 <HAL_TIM_ConfigClockSource+0x228>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	f000 8099 	beq.w	8004d4a <HAL_TIM_ConfigClockSource+0x1de>
 8004c18:	4a5e      	ldr	r2, [pc, #376]	; (8004d94 <HAL_TIM_ConfigClockSource+0x228>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	f200 809e 	bhi.w	8004d5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004c20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c24:	f000 8091 	beq.w	8004d4a <HAL_TIM_ConfigClockSource+0x1de>
 8004c28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c2c:	f200 8096 	bhi.w	8004d5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c34:	f000 8089 	beq.w	8004d4a <HAL_TIM_ConfigClockSource+0x1de>
 8004c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c3c:	f200 808e 	bhi.w	8004d5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c44:	d03e      	beq.n	8004cc4 <HAL_TIM_ConfigClockSource+0x158>
 8004c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c4a:	f200 8087 	bhi.w	8004d5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c52:	f000 8086 	beq.w	8004d62 <HAL_TIM_ConfigClockSource+0x1f6>
 8004c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5a:	d87f      	bhi.n	8004d5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004c5c:	2b70      	cmp	r3, #112	; 0x70
 8004c5e:	d01a      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x12a>
 8004c60:	2b70      	cmp	r3, #112	; 0x70
 8004c62:	d87b      	bhi.n	8004d5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004c64:	2b60      	cmp	r3, #96	; 0x60
 8004c66:	d050      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0x19e>
 8004c68:	2b60      	cmp	r3, #96	; 0x60
 8004c6a:	d877      	bhi.n	8004d5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004c6c:	2b50      	cmp	r3, #80	; 0x50
 8004c6e:	d03c      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x17e>
 8004c70:	2b50      	cmp	r3, #80	; 0x50
 8004c72:	d873      	bhi.n	8004d5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004c74:	2b40      	cmp	r3, #64	; 0x40
 8004c76:	d058      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x1be>
 8004c78:	2b40      	cmp	r3, #64	; 0x40
 8004c7a:	d86f      	bhi.n	8004d5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004c7c:	2b30      	cmp	r3, #48	; 0x30
 8004c7e:	d064      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x1de>
 8004c80:	2b30      	cmp	r3, #48	; 0x30
 8004c82:	d86b      	bhi.n	8004d5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d060      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x1de>
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	d867      	bhi.n	8004d5c <HAL_TIM_ConfigClockSource+0x1f0>
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d05c      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x1de>
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d05a      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x1de>
 8004c94:	e062      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ca6:	f000 f9cf 	bl	8005048 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	609a      	str	r2, [r3, #8]
      break;
 8004cc2:	e04f      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cd4:	f000 f9b8 	bl	8005048 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ce6:	609a      	str	r2, [r3, #8]
      break;
 8004ce8:	e03c      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f000 f92a 	bl	8004f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2150      	movs	r1, #80	; 0x50
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 f983 	bl	800500e <TIM_ITRx_SetConfig>
      break;
 8004d08:	e02c      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d16:	461a      	mov	r2, r3
 8004d18:	f000 f949 	bl	8004fae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2160      	movs	r1, #96	; 0x60
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 f973 	bl	800500e <TIM_ITRx_SetConfig>
      break;
 8004d28:	e01c      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d36:	461a      	mov	r2, r3
 8004d38:	f000 f90a 	bl	8004f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2140      	movs	r1, #64	; 0x40
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 f963 	bl	800500e <TIM_ITRx_SetConfig>
      break;
 8004d48:	e00c      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4619      	mov	r1, r3
 8004d54:	4610      	mov	r0, r2
 8004d56:	f000 f95a 	bl	800500e <TIM_ITRx_SetConfig>
      break;
 8004d5a:	e003      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d60:	e000      	b.n	8004d64 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004d62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	00100070 	.word	0x00100070
 8004d84:	00100060 	.word	0x00100060
 8004d88:	00100050 	.word	0x00100050
 8004d8c:	00100040 	.word	0x00100040
 8004d90:	00100030 	.word	0x00100030
 8004d94:	00100020 	.word	0x00100020

08004d98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a4c      	ldr	r2, [pc, #304]	; (8004f2c <TIM_Base_SetConfig+0x144>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d017      	beq.n	8004e30 <TIM_Base_SetConfig+0x48>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e06:	d013      	beq.n	8004e30 <TIM_Base_SetConfig+0x48>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a49      	ldr	r2, [pc, #292]	; (8004f30 <TIM_Base_SetConfig+0x148>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00f      	beq.n	8004e30 <TIM_Base_SetConfig+0x48>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a48      	ldr	r2, [pc, #288]	; (8004f34 <TIM_Base_SetConfig+0x14c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00b      	beq.n	8004e30 <TIM_Base_SetConfig+0x48>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a47      	ldr	r2, [pc, #284]	; (8004f38 <TIM_Base_SetConfig+0x150>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d007      	beq.n	8004e30 <TIM_Base_SetConfig+0x48>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a46      	ldr	r2, [pc, #280]	; (8004f3c <TIM_Base_SetConfig+0x154>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_Base_SetConfig+0x48>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a45      	ldr	r2, [pc, #276]	; (8004f40 <TIM_Base_SetConfig+0x158>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d108      	bne.n	8004e42 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a39      	ldr	r2, [pc, #228]	; (8004f2c <TIM_Base_SetConfig+0x144>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d023      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e50:	d01f      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a36      	ldr	r2, [pc, #216]	; (8004f30 <TIM_Base_SetConfig+0x148>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d01b      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a35      	ldr	r2, [pc, #212]	; (8004f34 <TIM_Base_SetConfig+0x14c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d017      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a34      	ldr	r2, [pc, #208]	; (8004f38 <TIM_Base_SetConfig+0x150>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d013      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a33      	ldr	r2, [pc, #204]	; (8004f3c <TIM_Base_SetConfig+0x154>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00f      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a33      	ldr	r2, [pc, #204]	; (8004f44 <TIM_Base_SetConfig+0x15c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d00b      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a32      	ldr	r2, [pc, #200]	; (8004f48 <TIM_Base_SetConfig+0x160>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d007      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a31      	ldr	r2, [pc, #196]	; (8004f4c <TIM_Base_SetConfig+0x164>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d003      	beq.n	8004e92 <TIM_Base_SetConfig+0xaa>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a2c      	ldr	r2, [pc, #176]	; (8004f40 <TIM_Base_SetConfig+0x158>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d108      	bne.n	8004ea4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a18      	ldr	r2, [pc, #96]	; (8004f2c <TIM_Base_SetConfig+0x144>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d013      	beq.n	8004ef8 <TIM_Base_SetConfig+0x110>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a1a      	ldr	r2, [pc, #104]	; (8004f3c <TIM_Base_SetConfig+0x154>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00f      	beq.n	8004ef8 <TIM_Base_SetConfig+0x110>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a1a      	ldr	r2, [pc, #104]	; (8004f44 <TIM_Base_SetConfig+0x15c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00b      	beq.n	8004ef8 <TIM_Base_SetConfig+0x110>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <TIM_Base_SetConfig+0x160>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d007      	beq.n	8004ef8 <TIM_Base_SetConfig+0x110>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a18      	ldr	r2, [pc, #96]	; (8004f4c <TIM_Base_SetConfig+0x164>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d003      	beq.n	8004ef8 <TIM_Base_SetConfig+0x110>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a13      	ldr	r2, [pc, #76]	; (8004f40 <TIM_Base_SetConfig+0x158>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d103      	bne.n	8004f00 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d105      	bne.n	8004f1e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f023 0201 	bic.w	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	611a      	str	r2, [r3, #16]
  }
}
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40012c00 	.word	0x40012c00
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40000800 	.word	0x40000800
 8004f38:	40000c00 	.word	0x40000c00
 8004f3c:	40013400 	.word	0x40013400
 8004f40:	40015000 	.word	0x40015000
 8004f44:	40014000 	.word	0x40014000
 8004f48:	40014400 	.word	0x40014400
 8004f4c:	40014800 	.word	0x40014800

08004f50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	f023 0201 	bic.w	r2, r3, #1
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f023 030a 	bic.w	r3, r3, #10
 8004f8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	621a      	str	r2, [r3, #32]
}
 8004fa2:	bf00      	nop
 8004fa4:	371c      	adds	r7, #28
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b087      	sub	sp, #28
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f023 0210 	bic.w	r2, r3, #16
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	031b      	lsls	r3, r3, #12
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	011b      	lsls	r3, r3, #4
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	621a      	str	r2, [r3, #32]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800500e:	b480      	push	{r7}
 8005010:	b085      	sub	sp, #20
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005028:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	f043 0307 	orr.w	r3, r3, #7
 8005034:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	609a      	str	r2, [r3, #8]
}
 800503c:	bf00      	nop
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	021a      	lsls	r2, r3, #8
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	431a      	orrs	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4313      	orrs	r3, r2
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	609a      	str	r2, [r3, #8]
}
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800509c:	2302      	movs	r3, #2
 800509e:	e074      	b.n	800518a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a34      	ldr	r2, [pc, #208]	; (8005198 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d009      	beq.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a33      	ldr	r2, [pc, #204]	; (800519c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d004      	beq.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a31      	ldr	r2, [pc, #196]	; (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d108      	bne.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a21      	ldr	r2, [pc, #132]	; (8005198 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d022      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005120:	d01d      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a1f      	ldr	r2, [pc, #124]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d018      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00e      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a15      	ldr	r2, [pc, #84]	; (800519c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d009      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a18      	ldr	r2, [pc, #96]	; (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a11      	ldr	r2, [pc, #68]	; (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d10c      	bne.n	8005178 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005164:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	4313      	orrs	r3, r2
 800516e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40012c00 	.word	0x40012c00
 800519c:	40013400 	.word	0x40013400
 80051a0:	40015000 	.word	0x40015000
 80051a4:	40000400 	.word	0x40000400
 80051a8:	40000800 	.word	0x40000800
 80051ac:	40000c00 	.word	0x40000c00
 80051b0:	40014000 	.word	0x40014000

080051b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e042      	b.n	80052d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005258:	2b00      	cmp	r3, #0
 800525a:	d106      	bne.n	800526a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7fb fcd3 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2224      	movs	r2, #36	; 0x24
 800526e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fb24 	bl	80058d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f825 	bl	80052e0 <UART_SetConfig>
 8005296:	4603      	mov	r3, r0
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e01b      	b.n	80052d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fba3 	bl	8005a1c <UART_CheckIdleState>
 80052d6:	4603      	mov	r3, r0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052e4:	b08c      	sub	sp, #48	; 0x30
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052ea:	2300      	movs	r3, #0
 80052ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	431a      	orrs	r2, r3
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	431a      	orrs	r2, r3
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	4313      	orrs	r3, r2
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	4baa      	ldr	r3, [pc, #680]	; (80055b8 <UART_SetConfig+0x2d8>)
 8005310:	4013      	ands	r3, r2
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005318:	430b      	orrs	r3, r1
 800531a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a9f      	ldr	r2, [pc, #636]	; (80055bc <UART_SetConfig+0x2dc>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d004      	beq.n	800534c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005348:	4313      	orrs	r3, r2
 800534a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005356:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005360:	430b      	orrs	r3, r1
 8005362:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	f023 010f 	bic.w	r1, r3, #15
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a90      	ldr	r2, [pc, #576]	; (80055c0 <UART_SetConfig+0x2e0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d125      	bne.n	80053d0 <UART_SetConfig+0xf0>
 8005384:	4b8f      	ldr	r3, [pc, #572]	; (80055c4 <UART_SetConfig+0x2e4>)
 8005386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b03      	cmp	r3, #3
 8005390:	d81a      	bhi.n	80053c8 <UART_SetConfig+0xe8>
 8005392:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <UART_SetConfig+0xb8>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053a9 	.word	0x080053a9
 800539c:	080053b9 	.word	0x080053b9
 80053a0:	080053b1 	.word	0x080053b1
 80053a4:	080053c1 	.word	0x080053c1
 80053a8:	2301      	movs	r3, #1
 80053aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ae:	e116      	b.n	80055de <UART_SetConfig+0x2fe>
 80053b0:	2302      	movs	r3, #2
 80053b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053b6:	e112      	b.n	80055de <UART_SetConfig+0x2fe>
 80053b8:	2304      	movs	r3, #4
 80053ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053be:	e10e      	b.n	80055de <UART_SetConfig+0x2fe>
 80053c0:	2308      	movs	r3, #8
 80053c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053c6:	e10a      	b.n	80055de <UART_SetConfig+0x2fe>
 80053c8:	2310      	movs	r3, #16
 80053ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ce:	e106      	b.n	80055de <UART_SetConfig+0x2fe>
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a7c      	ldr	r2, [pc, #496]	; (80055c8 <UART_SetConfig+0x2e8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d138      	bne.n	800544c <UART_SetConfig+0x16c>
 80053da:	4b7a      	ldr	r3, [pc, #488]	; (80055c4 <UART_SetConfig+0x2e4>)
 80053dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e0:	f003 030c 	and.w	r3, r3, #12
 80053e4:	2b0c      	cmp	r3, #12
 80053e6:	d82d      	bhi.n	8005444 <UART_SetConfig+0x164>
 80053e8:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <UART_SetConfig+0x110>)
 80053ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ee:	bf00      	nop
 80053f0:	08005425 	.word	0x08005425
 80053f4:	08005445 	.word	0x08005445
 80053f8:	08005445 	.word	0x08005445
 80053fc:	08005445 	.word	0x08005445
 8005400:	08005435 	.word	0x08005435
 8005404:	08005445 	.word	0x08005445
 8005408:	08005445 	.word	0x08005445
 800540c:	08005445 	.word	0x08005445
 8005410:	0800542d 	.word	0x0800542d
 8005414:	08005445 	.word	0x08005445
 8005418:	08005445 	.word	0x08005445
 800541c:	08005445 	.word	0x08005445
 8005420:	0800543d 	.word	0x0800543d
 8005424:	2300      	movs	r3, #0
 8005426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800542a:	e0d8      	b.n	80055de <UART_SetConfig+0x2fe>
 800542c:	2302      	movs	r3, #2
 800542e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005432:	e0d4      	b.n	80055de <UART_SetConfig+0x2fe>
 8005434:	2304      	movs	r3, #4
 8005436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800543a:	e0d0      	b.n	80055de <UART_SetConfig+0x2fe>
 800543c:	2308      	movs	r3, #8
 800543e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005442:	e0cc      	b.n	80055de <UART_SetConfig+0x2fe>
 8005444:	2310      	movs	r3, #16
 8005446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800544a:	e0c8      	b.n	80055de <UART_SetConfig+0x2fe>
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a5e      	ldr	r2, [pc, #376]	; (80055cc <UART_SetConfig+0x2ec>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d125      	bne.n	80054a2 <UART_SetConfig+0x1c2>
 8005456:	4b5b      	ldr	r3, [pc, #364]	; (80055c4 <UART_SetConfig+0x2e4>)
 8005458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005460:	2b30      	cmp	r3, #48	; 0x30
 8005462:	d016      	beq.n	8005492 <UART_SetConfig+0x1b2>
 8005464:	2b30      	cmp	r3, #48	; 0x30
 8005466:	d818      	bhi.n	800549a <UART_SetConfig+0x1ba>
 8005468:	2b20      	cmp	r3, #32
 800546a:	d00a      	beq.n	8005482 <UART_SetConfig+0x1a2>
 800546c:	2b20      	cmp	r3, #32
 800546e:	d814      	bhi.n	800549a <UART_SetConfig+0x1ba>
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <UART_SetConfig+0x19a>
 8005474:	2b10      	cmp	r3, #16
 8005476:	d008      	beq.n	800548a <UART_SetConfig+0x1aa>
 8005478:	e00f      	b.n	800549a <UART_SetConfig+0x1ba>
 800547a:	2300      	movs	r3, #0
 800547c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005480:	e0ad      	b.n	80055de <UART_SetConfig+0x2fe>
 8005482:	2302      	movs	r3, #2
 8005484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005488:	e0a9      	b.n	80055de <UART_SetConfig+0x2fe>
 800548a:	2304      	movs	r3, #4
 800548c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005490:	e0a5      	b.n	80055de <UART_SetConfig+0x2fe>
 8005492:	2308      	movs	r3, #8
 8005494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005498:	e0a1      	b.n	80055de <UART_SetConfig+0x2fe>
 800549a:	2310      	movs	r3, #16
 800549c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054a0:	e09d      	b.n	80055de <UART_SetConfig+0x2fe>
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a4a      	ldr	r2, [pc, #296]	; (80055d0 <UART_SetConfig+0x2f0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d125      	bne.n	80054f8 <UART_SetConfig+0x218>
 80054ac:	4b45      	ldr	r3, [pc, #276]	; (80055c4 <UART_SetConfig+0x2e4>)
 80054ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054b6:	2bc0      	cmp	r3, #192	; 0xc0
 80054b8:	d016      	beq.n	80054e8 <UART_SetConfig+0x208>
 80054ba:	2bc0      	cmp	r3, #192	; 0xc0
 80054bc:	d818      	bhi.n	80054f0 <UART_SetConfig+0x210>
 80054be:	2b80      	cmp	r3, #128	; 0x80
 80054c0:	d00a      	beq.n	80054d8 <UART_SetConfig+0x1f8>
 80054c2:	2b80      	cmp	r3, #128	; 0x80
 80054c4:	d814      	bhi.n	80054f0 <UART_SetConfig+0x210>
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <UART_SetConfig+0x1f0>
 80054ca:	2b40      	cmp	r3, #64	; 0x40
 80054cc:	d008      	beq.n	80054e0 <UART_SetConfig+0x200>
 80054ce:	e00f      	b.n	80054f0 <UART_SetConfig+0x210>
 80054d0:	2300      	movs	r3, #0
 80054d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054d6:	e082      	b.n	80055de <UART_SetConfig+0x2fe>
 80054d8:	2302      	movs	r3, #2
 80054da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054de:	e07e      	b.n	80055de <UART_SetConfig+0x2fe>
 80054e0:	2304      	movs	r3, #4
 80054e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054e6:	e07a      	b.n	80055de <UART_SetConfig+0x2fe>
 80054e8:	2308      	movs	r3, #8
 80054ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ee:	e076      	b.n	80055de <UART_SetConfig+0x2fe>
 80054f0:	2310      	movs	r3, #16
 80054f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054f6:	e072      	b.n	80055de <UART_SetConfig+0x2fe>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a35      	ldr	r2, [pc, #212]	; (80055d4 <UART_SetConfig+0x2f4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d12a      	bne.n	8005558 <UART_SetConfig+0x278>
 8005502:	4b30      	ldr	r3, [pc, #192]	; (80055c4 <UART_SetConfig+0x2e4>)
 8005504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005510:	d01a      	beq.n	8005548 <UART_SetConfig+0x268>
 8005512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005516:	d81b      	bhi.n	8005550 <UART_SetConfig+0x270>
 8005518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800551c:	d00c      	beq.n	8005538 <UART_SetConfig+0x258>
 800551e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005522:	d815      	bhi.n	8005550 <UART_SetConfig+0x270>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <UART_SetConfig+0x250>
 8005528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800552c:	d008      	beq.n	8005540 <UART_SetConfig+0x260>
 800552e:	e00f      	b.n	8005550 <UART_SetConfig+0x270>
 8005530:	2300      	movs	r3, #0
 8005532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005536:	e052      	b.n	80055de <UART_SetConfig+0x2fe>
 8005538:	2302      	movs	r3, #2
 800553a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800553e:	e04e      	b.n	80055de <UART_SetConfig+0x2fe>
 8005540:	2304      	movs	r3, #4
 8005542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005546:	e04a      	b.n	80055de <UART_SetConfig+0x2fe>
 8005548:	2308      	movs	r3, #8
 800554a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800554e:	e046      	b.n	80055de <UART_SetConfig+0x2fe>
 8005550:	2310      	movs	r3, #16
 8005552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005556:	e042      	b.n	80055de <UART_SetConfig+0x2fe>
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a17      	ldr	r2, [pc, #92]	; (80055bc <UART_SetConfig+0x2dc>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d13a      	bne.n	80055d8 <UART_SetConfig+0x2f8>
 8005562:	4b18      	ldr	r3, [pc, #96]	; (80055c4 <UART_SetConfig+0x2e4>)
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005568:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800556c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005570:	d01a      	beq.n	80055a8 <UART_SetConfig+0x2c8>
 8005572:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005576:	d81b      	bhi.n	80055b0 <UART_SetConfig+0x2d0>
 8005578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800557c:	d00c      	beq.n	8005598 <UART_SetConfig+0x2b8>
 800557e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005582:	d815      	bhi.n	80055b0 <UART_SetConfig+0x2d0>
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <UART_SetConfig+0x2b0>
 8005588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800558c:	d008      	beq.n	80055a0 <UART_SetConfig+0x2c0>
 800558e:	e00f      	b.n	80055b0 <UART_SetConfig+0x2d0>
 8005590:	2300      	movs	r3, #0
 8005592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005596:	e022      	b.n	80055de <UART_SetConfig+0x2fe>
 8005598:	2302      	movs	r3, #2
 800559a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800559e:	e01e      	b.n	80055de <UART_SetConfig+0x2fe>
 80055a0:	2304      	movs	r3, #4
 80055a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055a6:	e01a      	b.n	80055de <UART_SetConfig+0x2fe>
 80055a8:	2308      	movs	r3, #8
 80055aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ae:	e016      	b.n	80055de <UART_SetConfig+0x2fe>
 80055b0:	2310      	movs	r3, #16
 80055b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055b6:	e012      	b.n	80055de <UART_SetConfig+0x2fe>
 80055b8:	cfff69f3 	.word	0xcfff69f3
 80055bc:	40008000 	.word	0x40008000
 80055c0:	40013800 	.word	0x40013800
 80055c4:	40021000 	.word	0x40021000
 80055c8:	40004400 	.word	0x40004400
 80055cc:	40004800 	.word	0x40004800
 80055d0:	40004c00 	.word	0x40004c00
 80055d4:	40005000 	.word	0x40005000
 80055d8:	2310      	movs	r3, #16
 80055da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4aae      	ldr	r2, [pc, #696]	; (800589c <UART_SetConfig+0x5bc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	f040 8097 	bne.w	8005718 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d823      	bhi.n	800563a <UART_SetConfig+0x35a>
 80055f2:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <UART_SetConfig+0x318>)
 80055f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f8:	0800561d 	.word	0x0800561d
 80055fc:	0800563b 	.word	0x0800563b
 8005600:	08005625 	.word	0x08005625
 8005604:	0800563b 	.word	0x0800563b
 8005608:	0800562b 	.word	0x0800562b
 800560c:	0800563b 	.word	0x0800563b
 8005610:	0800563b 	.word	0x0800563b
 8005614:	0800563b 	.word	0x0800563b
 8005618:	08005633 	.word	0x08005633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800561c:	f7fe fd56 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 8005620:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005622:	e010      	b.n	8005646 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005624:	4b9e      	ldr	r3, [pc, #632]	; (80058a0 <UART_SetConfig+0x5c0>)
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005628:	e00d      	b.n	8005646 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800562a:	f7fe fce1 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 800562e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005630:	e009      	b.n	8005646 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005638:	e005      	b.n	8005646 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005644:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 8130 	beq.w	80058ae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005652:	4a94      	ldr	r2, [pc, #592]	; (80058a4 <UART_SetConfig+0x5c4>)
 8005654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005658:	461a      	mov	r2, r3
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005660:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	4413      	add	r3, r2
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	429a      	cmp	r2, r3
 8005670:	d305      	bcc.n	800567e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	429a      	cmp	r2, r3
 800567c:	d903      	bls.n	8005686 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005684:	e113      	b.n	80058ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	2200      	movs	r2, #0
 800568a:	60bb      	str	r3, [r7, #8]
 800568c:	60fa      	str	r2, [r7, #12]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	4a84      	ldr	r2, [pc, #528]	; (80058a4 <UART_SetConfig+0x5c4>)
 8005694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005698:	b29b      	uxth	r3, r3
 800569a:	2200      	movs	r2, #0
 800569c:	603b      	str	r3, [r7, #0]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056a8:	f7fa fdb6 	bl	8000218 <__aeabi_uldivmod>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4610      	mov	r0, r2
 80056b2:	4619      	mov	r1, r3
 80056b4:	f04f 0200 	mov.w	r2, #0
 80056b8:	f04f 0300 	mov.w	r3, #0
 80056bc:	020b      	lsls	r3, r1, #8
 80056be:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056c2:	0202      	lsls	r2, r0, #8
 80056c4:	6979      	ldr	r1, [r7, #20]
 80056c6:	6849      	ldr	r1, [r1, #4]
 80056c8:	0849      	lsrs	r1, r1, #1
 80056ca:	2000      	movs	r0, #0
 80056cc:	460c      	mov	r4, r1
 80056ce:	4605      	mov	r5, r0
 80056d0:	eb12 0804 	adds.w	r8, r2, r4
 80056d4:	eb43 0905 	adc.w	r9, r3, r5
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	469a      	mov	sl, r3
 80056e0:	4693      	mov	fp, r2
 80056e2:	4652      	mov	r2, sl
 80056e4:	465b      	mov	r3, fp
 80056e6:	4640      	mov	r0, r8
 80056e8:	4649      	mov	r1, r9
 80056ea:	f7fa fd95 	bl	8000218 <__aeabi_uldivmod>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4613      	mov	r3, r2
 80056f4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056fc:	d308      	bcc.n	8005710 <UART_SetConfig+0x430>
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005704:	d204      	bcs.n	8005710 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a3a      	ldr	r2, [r7, #32]
 800570c:	60da      	str	r2, [r3, #12]
 800570e:	e0ce      	b.n	80058ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005716:	e0ca      	b.n	80058ae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005720:	d166      	bne.n	80057f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005722:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005726:	2b08      	cmp	r3, #8
 8005728:	d827      	bhi.n	800577a <UART_SetConfig+0x49a>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <UART_SetConfig+0x450>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005755 	.word	0x08005755
 8005734:	0800575d 	.word	0x0800575d
 8005738:	08005765 	.word	0x08005765
 800573c:	0800577b 	.word	0x0800577b
 8005740:	0800576b 	.word	0x0800576b
 8005744:	0800577b 	.word	0x0800577b
 8005748:	0800577b 	.word	0x0800577b
 800574c:	0800577b 	.word	0x0800577b
 8005750:	08005773 	.word	0x08005773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005754:	f7fe fcba 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 8005758:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800575a:	e014      	b.n	8005786 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800575c:	f7fe fccc 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 8005760:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005762:	e010      	b.n	8005786 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005764:	4b4e      	ldr	r3, [pc, #312]	; (80058a0 <UART_SetConfig+0x5c0>)
 8005766:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005768:	e00d      	b.n	8005786 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800576a:	f7fe fc41 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 800576e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005770:	e009      	b.n	8005786 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005778:	e005      	b.n	8005786 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005784:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 8090 	beq.w	80058ae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	4a44      	ldr	r2, [pc, #272]	; (80058a4 <UART_SetConfig+0x5c4>)
 8005794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005798:	461a      	mov	r2, r3
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	fbb3 f3f2 	udiv	r3, r3, r2
 80057a0:	005a      	lsls	r2, r3, #1
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	085b      	lsrs	r3, r3, #1
 80057a8:	441a      	add	r2, r3
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	2b0f      	cmp	r3, #15
 80057b8:	d916      	bls.n	80057e8 <UART_SetConfig+0x508>
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c0:	d212      	bcs.n	80057e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f023 030f 	bic.w	r3, r3, #15
 80057ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	085b      	lsrs	r3, r3, #1
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	8bfb      	ldrh	r3, [r7, #30]
 80057da:	4313      	orrs	r3, r2
 80057dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	8bfa      	ldrh	r2, [r7, #30]
 80057e4:	60da      	str	r2, [r3, #12]
 80057e6:	e062      	b.n	80058ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80057ee:	e05e      	b.n	80058ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d828      	bhi.n	800584a <UART_SetConfig+0x56a>
 80057f8:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <UART_SetConfig+0x520>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005825 	.word	0x08005825
 8005804:	0800582d 	.word	0x0800582d
 8005808:	08005835 	.word	0x08005835
 800580c:	0800584b 	.word	0x0800584b
 8005810:	0800583b 	.word	0x0800583b
 8005814:	0800584b 	.word	0x0800584b
 8005818:	0800584b 	.word	0x0800584b
 800581c:	0800584b 	.word	0x0800584b
 8005820:	08005843 	.word	0x08005843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005824:	f7fe fc52 	bl	80040cc <HAL_RCC_GetPCLK1Freq>
 8005828:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800582a:	e014      	b.n	8005856 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800582c:	f7fe fc64 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 8005830:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005832:	e010      	b.n	8005856 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005834:	4b1a      	ldr	r3, [pc, #104]	; (80058a0 <UART_SetConfig+0x5c0>)
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005838:	e00d      	b.n	8005856 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800583a:	f7fe fbd9 	bl	8003ff0 <HAL_RCC_GetSysClockFreq>
 800583e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005840:	e009      	b.n	8005856 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005846:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005848:	e005      	b.n	8005856 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005854:	bf00      	nop
    }

    if (pclk != 0U)
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	2b00      	cmp	r3, #0
 800585a:	d028      	beq.n	80058ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	4a10      	ldr	r2, [pc, #64]	; (80058a4 <UART_SetConfig+0x5c4>)
 8005862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005866:	461a      	mov	r2, r3
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	fbb3 f2f2 	udiv	r2, r3, r2
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	085b      	lsrs	r3, r3, #1
 8005874:	441a      	add	r2, r3
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	fbb2 f3f3 	udiv	r3, r2, r3
 800587e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	2b0f      	cmp	r3, #15
 8005884:	d910      	bls.n	80058a8 <UART_SetConfig+0x5c8>
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800588c:	d20c      	bcs.n	80058a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	b29a      	uxth	r2, r3
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	60da      	str	r2, [r3, #12]
 8005898:	e009      	b.n	80058ae <UART_SetConfig+0x5ce>
 800589a:	bf00      	nop
 800589c:	40008000 	.word	0x40008000
 80058a0:	00f42400 	.word	0x00f42400
 80058a4:	08005fa4 	.word	0x08005fa4
      }
      else
      {
        ret = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2200      	movs	r2, #0
 80058c2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	2200      	movs	r2, #0
 80058c8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80058ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3730      	adds	r7, #48	; 0x30
 80058d2:	46bd      	mov	sp, r7
 80058d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080058d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596c:	f003 0310 	and.w	r3, r3, #16
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01a      	beq.n	80059ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059d6:	d10a      	bne.n	80059ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	605a      	str	r2, [r3, #4]
  }
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b098      	sub	sp, #96	; 0x60
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a2c:	f7fb fa70 	bl	8000f10 <HAL_GetTick>
 8005a30:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d12f      	bne.n	8005aa0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f88e 	bl	8005b70 <UART_WaitOnFlagUntilTimeout>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d022      	beq.n	8005aa0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a6e:	653b      	str	r3, [r7, #80]	; 0x50
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	461a      	mov	r2, r3
 8005a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a78:	647b      	str	r3, [r7, #68]	; 0x44
 8005a7a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a80:	e841 2300 	strex	r3, r2, [r1]
 8005a84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e6      	bne.n	8005a5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e063      	b.n	8005b68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0304 	and.w	r3, r3, #4
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d149      	bne.n	8005b42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f857 	bl	8005b70 <UART_WaitOnFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d03c      	beq.n	8005b42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005adc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae6:	633b      	str	r3, [r7, #48]	; 0x30
 8005ae8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e6      	bne.n	8005ac8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3308      	adds	r3, #8
 8005b00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f023 0301 	bic.w	r3, r3, #1
 8005b10:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3308      	adds	r3, #8
 8005b18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b1a:	61fa      	str	r2, [r7, #28]
 8005b1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	69b9      	ldr	r1, [r7, #24]
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	617b      	str	r3, [r7, #20]
   return(result);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e5      	bne.n	8005afa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e012      	b.n	8005b68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3758      	adds	r7, #88	; 0x58
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b80:	e04f      	b.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d04b      	beq.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b8a:	f7fb f9c1 	bl	8000f10 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d302      	bcc.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d101      	bne.n	8005ba4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e04e      	b.n	8005c42 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d037      	beq.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b80      	cmp	r3, #128	; 0x80
 8005bb6:	d034      	beq.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b40      	cmp	r3, #64	; 0x40
 8005bbc:	d031      	beq.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69db      	ldr	r3, [r3, #28]
 8005bc4:	f003 0308 	and.w	r3, r3, #8
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d110      	bne.n	8005bee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2208      	movs	r2, #8
 8005bd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f838 	bl	8005c4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2208      	movs	r2, #8
 8005bde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e029      	b.n	8005c42 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bfc:	d111      	bne.n	8005c22 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f81e 	bl	8005c4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e00f      	b.n	8005c42 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69da      	ldr	r2, [r3, #28]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	bf0c      	ite	eq
 8005c32:	2301      	moveq	r3, #1
 8005c34:	2300      	movne	r3, #0
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d0a0      	beq.n	8005b82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b095      	sub	sp, #84	; 0x54
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
 8005c5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c70:	643b      	str	r3, [r7, #64]	; 0x40
 8005c72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e6      	bne.n	8005c52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3308      	adds	r3, #8
 8005c8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c9a:	f023 0301 	bic.w	r3, r3, #1
 8005c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ca8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005caa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e3      	bne.n	8005c84 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d118      	bne.n	8005cf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f023 0310 	bic.w	r3, r3, #16
 8005cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce2:	61bb      	str	r3, [r7, #24]
 8005ce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	6979      	ldr	r1, [r7, #20]
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e6      	bne.n	8005cc4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005d0a:	bf00      	nop
 8005d0c:	3754      	adds	r7, #84	; 0x54
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_UARTEx_DisableFifoMode+0x16>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e027      	b.n	8005d7c <HAL_UARTEx_DisableFifoMode+0x66>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2224      	movs	r2, #36	; 0x24
 8005d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0201 	bic.w	r2, r2, #1
 8005d52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e02d      	b.n	8005dfc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2224      	movs	r2, #36	; 0x24
 8005dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0201 	bic.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	683a      	ldr	r2, [r7, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 f84f 	bl	8005e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e02d      	b.n	8005e78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2224      	movs	r2, #36	; 0x24
 8005e28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0201 	bic.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f811 	bl	8005e80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d108      	bne.n	8005ea2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ea0:	e031      	b.n	8005f06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ea2:	2308      	movs	r3, #8
 8005ea4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ea6:	2308      	movs	r3, #8
 8005ea8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	0e5b      	lsrs	r3, r3, #25
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	0f5b      	lsrs	r3, r3, #29
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005eca:	7bbb      	ldrb	r3, [r7, #14]
 8005ecc:	7b3a      	ldrb	r2, [r7, #12]
 8005ece:	4911      	ldr	r1, [pc, #68]	; (8005f14 <UARTEx_SetNbDataToProcess+0x94>)
 8005ed0:	5c8a      	ldrb	r2, [r1, r2]
 8005ed2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ed6:	7b3a      	ldrb	r2, [r7, #12]
 8005ed8:	490f      	ldr	r1, [pc, #60]	; (8005f18 <UARTEx_SetNbDataToProcess+0x98>)
 8005eda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005edc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
 8005eea:	7b7a      	ldrb	r2, [r7, #13]
 8005eec:	4909      	ldr	r1, [pc, #36]	; (8005f14 <UARTEx_SetNbDataToProcess+0x94>)
 8005eee:	5c8a      	ldrb	r2, [r1, r2]
 8005ef0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ef4:	7b7a      	ldrb	r2, [r7, #13]
 8005ef6:	4908      	ldr	r1, [pc, #32]	; (8005f18 <UARTEx_SetNbDataToProcess+0x98>)
 8005ef8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005efa:	fb93 f3f2 	sdiv	r3, r3, r2
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f06:	bf00      	nop
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	08005fbc 	.word	0x08005fbc
 8005f18:	08005fc4 	.word	0x08005fc4

08005f1c <memset>:
 8005f1c:	4402      	add	r2, r0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d100      	bne.n	8005f26 <memset+0xa>
 8005f24:	4770      	bx	lr
 8005f26:	f803 1b01 	strb.w	r1, [r3], #1
 8005f2a:	e7f9      	b.n	8005f20 <memset+0x4>

08005f2c <__libc_init_array>:
 8005f2c:	b570      	push	{r4, r5, r6, lr}
 8005f2e:	4d0d      	ldr	r5, [pc, #52]	; (8005f64 <__libc_init_array+0x38>)
 8005f30:	4c0d      	ldr	r4, [pc, #52]	; (8005f68 <__libc_init_array+0x3c>)
 8005f32:	1b64      	subs	r4, r4, r5
 8005f34:	10a4      	asrs	r4, r4, #2
 8005f36:	2600      	movs	r6, #0
 8005f38:	42a6      	cmp	r6, r4
 8005f3a:	d109      	bne.n	8005f50 <__libc_init_array+0x24>
 8005f3c:	4d0b      	ldr	r5, [pc, #44]	; (8005f6c <__libc_init_array+0x40>)
 8005f3e:	4c0c      	ldr	r4, [pc, #48]	; (8005f70 <__libc_init_array+0x44>)
 8005f40:	f000 f818 	bl	8005f74 <_init>
 8005f44:	1b64      	subs	r4, r4, r5
 8005f46:	10a4      	asrs	r4, r4, #2
 8005f48:	2600      	movs	r6, #0
 8005f4a:	42a6      	cmp	r6, r4
 8005f4c:	d105      	bne.n	8005f5a <__libc_init_array+0x2e>
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}
 8005f50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f54:	4798      	blx	r3
 8005f56:	3601      	adds	r6, #1
 8005f58:	e7ee      	b.n	8005f38 <__libc_init_array+0xc>
 8005f5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f5e:	4798      	blx	r3
 8005f60:	3601      	adds	r6, #1
 8005f62:	e7f2      	b.n	8005f4a <__libc_init_array+0x1e>
 8005f64:	08005fd4 	.word	0x08005fd4
 8005f68:	08005fd4 	.word	0x08005fd4
 8005f6c:	08005fd4 	.word	0x08005fd4
 8005f70:	08005fd8 	.word	0x08005fd8

08005f74 <_init>:
 8005f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f76:	bf00      	nop
 8005f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7a:	bc08      	pop	{r3}
 8005f7c:	469e      	mov	lr, r3
 8005f7e:	4770      	bx	lr

08005f80 <_fini>:
 8005f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f82:	bf00      	nop
 8005f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f86:	bc08      	pop	{r3}
 8005f88:	469e      	mov	lr, r3
 8005f8a:	4770      	bx	lr
