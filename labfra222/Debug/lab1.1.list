
lab1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e94  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800806c  0800806c  0001806c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080ac  080080ac  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080080ac  080080ac  000180ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080b4  080080b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080b4  080080b4  000180b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080b8  080080b8  000180b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080080bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  20000010  080080cc  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  080080cc  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a2d  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002acb  00000000  00000000  00037ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  0003a580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001036  00000000  00000000  0003ba38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003ca6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000176d4  00000000  00000000  000644a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ea47  00000000  00000000  0007bb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b34  00000000  00000000  0018a5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001900f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008054 	.word	0x08008054

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08008054 	.word	0x08008054

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295
 80007f8:	f000 b98e 	b.w	8000b18 <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f824 	bl	8000850 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__aeabi_d2ulz>:
 8000814:	b5d0      	push	{r4, r6, r7, lr}
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <__aeabi_d2ulz+0x34>)
 8000818:	2200      	movs	r2, #0
 800081a:	4606      	mov	r6, r0
 800081c:	460f      	mov	r7, r1
 800081e:	f7ff fcfb 	bl	8000218 <__aeabi_dmul>
 8000822:	f000 f97b 	bl	8000b1c <__aeabi_d2uiz>
 8000826:	4604      	mov	r4, r0
 8000828:	f7ff ff62 	bl	80006f0 <__aeabi_ui2d>
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <__aeabi_d2ulz+0x38>)
 800082e:	2200      	movs	r2, #0
 8000830:	f7ff fcf2 	bl	8000218 <__aeabi_dmul>
 8000834:	4602      	mov	r2, r0
 8000836:	460b      	mov	r3, r1
 8000838:	4630      	mov	r0, r6
 800083a:	4639      	mov	r1, r7
 800083c:	f7ff fe1a 	bl	8000474 <__aeabi_dsub>
 8000840:	f000 f96c 	bl	8000b1c <__aeabi_d2uiz>
 8000844:	4621      	mov	r1, r4
 8000846:	bdd0      	pop	{r4, r6, r7, pc}
 8000848:	3df00000 	.word	0x3df00000
 800084c:	41f00000 	.word	0x41f00000

08000850 <__udivmoddi4>:
 8000850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000854:	9e08      	ldr	r6, [sp, #32]
 8000856:	460d      	mov	r5, r1
 8000858:	4604      	mov	r4, r0
 800085a:	460f      	mov	r7, r1
 800085c:	2b00      	cmp	r3, #0
 800085e:	d14a      	bne.n	80008f6 <__udivmoddi4+0xa6>
 8000860:	428a      	cmp	r2, r1
 8000862:	4694      	mov	ip, r2
 8000864:	d965      	bls.n	8000932 <__udivmoddi4+0xe2>
 8000866:	fab2 f382 	clz	r3, r2
 800086a:	b143      	cbz	r3, 800087e <__udivmoddi4+0x2e>
 800086c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000870:	f1c3 0220 	rsb	r2, r3, #32
 8000874:	409f      	lsls	r7, r3
 8000876:	fa20 f202 	lsr.w	r2, r0, r2
 800087a:	4317      	orrs	r7, r2
 800087c:	409c      	lsls	r4, r3
 800087e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000882:	fa1f f58c 	uxth.w	r5, ip
 8000886:	fbb7 f1fe 	udiv	r1, r7, lr
 800088a:	0c22      	lsrs	r2, r4, #16
 800088c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000890:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000894:	fb01 f005 	mul.w	r0, r1, r5
 8000898:	4290      	cmp	r0, r2
 800089a:	d90a      	bls.n	80008b2 <__udivmoddi4+0x62>
 800089c:	eb1c 0202 	adds.w	r2, ip, r2
 80008a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80008a4:	f080 811c 	bcs.w	8000ae0 <__udivmoddi4+0x290>
 80008a8:	4290      	cmp	r0, r2
 80008aa:	f240 8119 	bls.w	8000ae0 <__udivmoddi4+0x290>
 80008ae:	3902      	subs	r1, #2
 80008b0:	4462      	add	r2, ip
 80008b2:	1a12      	subs	r2, r2, r0
 80008b4:	b2a4      	uxth	r4, r4
 80008b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80008ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80008be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008c2:	fb00 f505 	mul.w	r5, r0, r5
 80008c6:	42a5      	cmp	r5, r4
 80008c8:	d90a      	bls.n	80008e0 <__udivmoddi4+0x90>
 80008ca:	eb1c 0404 	adds.w	r4, ip, r4
 80008ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80008d2:	f080 8107 	bcs.w	8000ae4 <__udivmoddi4+0x294>
 80008d6:	42a5      	cmp	r5, r4
 80008d8:	f240 8104 	bls.w	8000ae4 <__udivmoddi4+0x294>
 80008dc:	4464      	add	r4, ip
 80008de:	3802      	subs	r0, #2
 80008e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008e4:	1b64      	subs	r4, r4, r5
 80008e6:	2100      	movs	r1, #0
 80008e8:	b11e      	cbz	r6, 80008f2 <__udivmoddi4+0xa2>
 80008ea:	40dc      	lsrs	r4, r3
 80008ec:	2300      	movs	r3, #0
 80008ee:	e9c6 4300 	strd	r4, r3, [r6]
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d908      	bls.n	800090c <__udivmoddi4+0xbc>
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	f000 80ed 	beq.w	8000ada <__udivmoddi4+0x28a>
 8000900:	2100      	movs	r1, #0
 8000902:	e9c6 0500 	strd	r0, r5, [r6]
 8000906:	4608      	mov	r0, r1
 8000908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090c:	fab3 f183 	clz	r1, r3
 8000910:	2900      	cmp	r1, #0
 8000912:	d149      	bne.n	80009a8 <__udivmoddi4+0x158>
 8000914:	42ab      	cmp	r3, r5
 8000916:	d302      	bcc.n	800091e <__udivmoddi4+0xce>
 8000918:	4282      	cmp	r2, r0
 800091a:	f200 80f8 	bhi.w	8000b0e <__udivmoddi4+0x2be>
 800091e:	1a84      	subs	r4, r0, r2
 8000920:	eb65 0203 	sbc.w	r2, r5, r3
 8000924:	2001      	movs	r0, #1
 8000926:	4617      	mov	r7, r2
 8000928:	2e00      	cmp	r6, #0
 800092a:	d0e2      	beq.n	80008f2 <__udivmoddi4+0xa2>
 800092c:	e9c6 4700 	strd	r4, r7, [r6]
 8000930:	e7df      	b.n	80008f2 <__udivmoddi4+0xa2>
 8000932:	b902      	cbnz	r2, 8000936 <__udivmoddi4+0xe6>
 8000934:	deff      	udf	#255	; 0xff
 8000936:	fab2 f382 	clz	r3, r2
 800093a:	2b00      	cmp	r3, #0
 800093c:	f040 8090 	bne.w	8000a60 <__udivmoddi4+0x210>
 8000940:	1a8a      	subs	r2, r1, r2
 8000942:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000946:	fa1f fe8c 	uxth.w	lr, ip
 800094a:	2101      	movs	r1, #1
 800094c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000950:	fb07 2015 	mls	r0, r7, r5, r2
 8000954:	0c22      	lsrs	r2, r4, #16
 8000956:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800095a:	fb0e f005 	mul.w	r0, lr, r5
 800095e:	4290      	cmp	r0, r2
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x124>
 8000962:	eb1c 0202 	adds.w	r2, ip, r2
 8000966:	f105 38ff 	add.w	r8, r5, #4294967295
 800096a:	d202      	bcs.n	8000972 <__udivmoddi4+0x122>
 800096c:	4290      	cmp	r0, r2
 800096e:	f200 80cb 	bhi.w	8000b08 <__udivmoddi4+0x2b8>
 8000972:	4645      	mov	r5, r8
 8000974:	1a12      	subs	r2, r2, r0
 8000976:	b2a4      	uxth	r4, r4
 8000978:	fbb2 f0f7 	udiv	r0, r2, r7
 800097c:	fb07 2210 	mls	r2, r7, r0, r2
 8000980:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000984:	fb0e fe00 	mul.w	lr, lr, r0
 8000988:	45a6      	cmp	lr, r4
 800098a:	d908      	bls.n	800099e <__udivmoddi4+0x14e>
 800098c:	eb1c 0404 	adds.w	r4, ip, r4
 8000990:	f100 32ff 	add.w	r2, r0, #4294967295
 8000994:	d202      	bcs.n	800099c <__udivmoddi4+0x14c>
 8000996:	45a6      	cmp	lr, r4
 8000998:	f200 80bb 	bhi.w	8000b12 <__udivmoddi4+0x2c2>
 800099c:	4610      	mov	r0, r2
 800099e:	eba4 040e 	sub.w	r4, r4, lr
 80009a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009a6:	e79f      	b.n	80008e8 <__udivmoddi4+0x98>
 80009a8:	f1c1 0720 	rsb	r7, r1, #32
 80009ac:	408b      	lsls	r3, r1
 80009ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80009b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80009b6:	fa05 f401 	lsl.w	r4, r5, r1
 80009ba:	fa20 f307 	lsr.w	r3, r0, r7
 80009be:	40fd      	lsrs	r5, r7
 80009c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009c4:	4323      	orrs	r3, r4
 80009c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80009ca:	fa1f fe8c 	uxth.w	lr, ip
 80009ce:	fb09 5518 	mls	r5, r9, r8, r5
 80009d2:	0c1c      	lsrs	r4, r3, #16
 80009d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009d8:	fb08 f50e 	mul.w	r5, r8, lr
 80009dc:	42a5      	cmp	r5, r4
 80009de:	fa02 f201 	lsl.w	r2, r2, r1
 80009e2:	fa00 f001 	lsl.w	r0, r0, r1
 80009e6:	d90b      	bls.n	8000a00 <__udivmoddi4+0x1b0>
 80009e8:	eb1c 0404 	adds.w	r4, ip, r4
 80009ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80009f0:	f080 8088 	bcs.w	8000b04 <__udivmoddi4+0x2b4>
 80009f4:	42a5      	cmp	r5, r4
 80009f6:	f240 8085 	bls.w	8000b04 <__udivmoddi4+0x2b4>
 80009fa:	f1a8 0802 	sub.w	r8, r8, #2
 80009fe:	4464      	add	r4, ip
 8000a00:	1b64      	subs	r4, r4, r5
 8000a02:	b29d      	uxth	r5, r3
 8000a04:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a08:	fb09 4413 	mls	r4, r9, r3, r4
 8000a0c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a10:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a14:	45a6      	cmp	lr, r4
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x1da>
 8000a18:	eb1c 0404 	adds.w	r4, ip, r4
 8000a1c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a20:	d26c      	bcs.n	8000afc <__udivmoddi4+0x2ac>
 8000a22:	45a6      	cmp	lr, r4
 8000a24:	d96a      	bls.n	8000afc <__udivmoddi4+0x2ac>
 8000a26:	3b02      	subs	r3, #2
 8000a28:	4464      	add	r4, ip
 8000a2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a2e:	fba3 9502 	umull	r9, r5, r3, r2
 8000a32:	eba4 040e 	sub.w	r4, r4, lr
 8000a36:	42ac      	cmp	r4, r5
 8000a38:	46c8      	mov	r8, r9
 8000a3a:	46ae      	mov	lr, r5
 8000a3c:	d356      	bcc.n	8000aec <__udivmoddi4+0x29c>
 8000a3e:	d053      	beq.n	8000ae8 <__udivmoddi4+0x298>
 8000a40:	b156      	cbz	r6, 8000a58 <__udivmoddi4+0x208>
 8000a42:	ebb0 0208 	subs.w	r2, r0, r8
 8000a46:	eb64 040e 	sbc.w	r4, r4, lr
 8000a4a:	fa04 f707 	lsl.w	r7, r4, r7
 8000a4e:	40ca      	lsrs	r2, r1
 8000a50:	40cc      	lsrs	r4, r1
 8000a52:	4317      	orrs	r7, r2
 8000a54:	e9c6 7400 	strd	r7, r4, [r6]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a60:	f1c3 0120 	rsb	r1, r3, #32
 8000a64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a68:	fa20 f201 	lsr.w	r2, r0, r1
 8000a6c:	fa25 f101 	lsr.w	r1, r5, r1
 8000a70:	409d      	lsls	r5, r3
 8000a72:	432a      	orrs	r2, r5
 8000a74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a78:	fa1f fe8c 	uxth.w	lr, ip
 8000a7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a80:	fb07 1510 	mls	r5, r7, r0, r1
 8000a84:	0c11      	lsrs	r1, r2, #16
 8000a86:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a8a:	fb00 f50e 	mul.w	r5, r0, lr
 8000a8e:	428d      	cmp	r5, r1
 8000a90:	fa04 f403 	lsl.w	r4, r4, r3
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0x258>
 8000a96:	eb1c 0101 	adds.w	r1, ip, r1
 8000a9a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a9e:	d22f      	bcs.n	8000b00 <__udivmoddi4+0x2b0>
 8000aa0:	428d      	cmp	r5, r1
 8000aa2:	d92d      	bls.n	8000b00 <__udivmoddi4+0x2b0>
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	4461      	add	r1, ip
 8000aa8:	1b49      	subs	r1, r1, r5
 8000aaa:	b292      	uxth	r2, r2
 8000aac:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ab0:	fb07 1115 	mls	r1, r7, r5, r1
 8000ab4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ab8:	fb05 f10e 	mul.w	r1, r5, lr
 8000abc:	4291      	cmp	r1, r2
 8000abe:	d908      	bls.n	8000ad2 <__udivmoddi4+0x282>
 8000ac0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ac4:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ac8:	d216      	bcs.n	8000af8 <__udivmoddi4+0x2a8>
 8000aca:	4291      	cmp	r1, r2
 8000acc:	d914      	bls.n	8000af8 <__udivmoddi4+0x2a8>
 8000ace:	3d02      	subs	r5, #2
 8000ad0:	4462      	add	r2, ip
 8000ad2:	1a52      	subs	r2, r2, r1
 8000ad4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ad8:	e738      	b.n	800094c <__udivmoddi4+0xfc>
 8000ada:	4631      	mov	r1, r6
 8000adc:	4630      	mov	r0, r6
 8000ade:	e708      	b.n	80008f2 <__udivmoddi4+0xa2>
 8000ae0:	4639      	mov	r1, r7
 8000ae2:	e6e6      	b.n	80008b2 <__udivmoddi4+0x62>
 8000ae4:	4610      	mov	r0, r2
 8000ae6:	e6fb      	b.n	80008e0 <__udivmoddi4+0x90>
 8000ae8:	4548      	cmp	r0, r9
 8000aea:	d2a9      	bcs.n	8000a40 <__udivmoddi4+0x1f0>
 8000aec:	ebb9 0802 	subs.w	r8, r9, r2
 8000af0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000af4:	3b01      	subs	r3, #1
 8000af6:	e7a3      	b.n	8000a40 <__udivmoddi4+0x1f0>
 8000af8:	4645      	mov	r5, r8
 8000afa:	e7ea      	b.n	8000ad2 <__udivmoddi4+0x282>
 8000afc:	462b      	mov	r3, r5
 8000afe:	e794      	b.n	8000a2a <__udivmoddi4+0x1da>
 8000b00:	4640      	mov	r0, r8
 8000b02:	e7d1      	b.n	8000aa8 <__udivmoddi4+0x258>
 8000b04:	46d0      	mov	r8, sl
 8000b06:	e77b      	b.n	8000a00 <__udivmoddi4+0x1b0>
 8000b08:	3d02      	subs	r5, #2
 8000b0a:	4462      	add	r2, ip
 8000b0c:	e732      	b.n	8000974 <__udivmoddi4+0x124>
 8000b0e:	4608      	mov	r0, r1
 8000b10:	e70a      	b.n	8000928 <__udivmoddi4+0xd8>
 8000b12:	4464      	add	r4, ip
 8000b14:	3802      	subs	r0, #2
 8000b16:	e742      	b.n	800099e <__udivmoddi4+0x14e>

08000b18 <__aeabi_idiv0>:
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b5b0      	push	{r4, r5, r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b60:	f000 ffad 	bl	8001abe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b64:	f000 f86a 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f000 fb5c 	bl	8001224 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6c:	f000 fb30 	bl	80011d0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000b70:	f000 f94a 	bl	8000e08 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8000b74:	f000 fa18 	bl	8000fa8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b78:	f000 f8ac 	bl	8000cd4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000b7c:	f000 fada 	bl	8001134 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000b80:	f000 fa60 	bl	8001044 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000b84:	f000 f98a 	bl	8000e9c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b88:	4823      	ldr	r0, [pc, #140]	; (8000c18 <main+0xbc>)
 8000b8a:	f004 fc7b 	bl	8005484 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 8000b8e:	4823      	ldr	r0, [pc, #140]	; (8000c1c <main+0xc0>)
 8000b90:	f004 fc08 	bl	80053a4 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
 8000b94:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b98:	4921      	ldr	r1, [pc, #132]	; (8000c20 <main+0xc4>)
 8000b9a:	4822      	ldr	r0, [pc, #136]	; (8000c24 <main+0xc8>)
 8000b9c:	f001 fbfc 	bl	8002398 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000ba0:	4821      	ldr	r0, [pc, #132]	; (8000c28 <main+0xcc>)
 8000ba2:	f004 fbff 	bl	80053a4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	481f      	ldr	r0, [pc, #124]	; (8000c28 <main+0xcc>)
 8000baa:	f004 fd45 	bl	8005638 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim1);
 8000bae:	481f      	ldr	r0, [pc, #124]	; (8000c2c <main+0xd0>)
 8000bb0:	f004 fbf8 	bl	80053a4 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	481d      	ldr	r0, [pc, #116]	; (8000c2c <main+0xd0>)
 8000bb8:	f004 fea8 	bl	800590c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	481b      	ldr	r0, [pc, #108]	; (8000c2c <main+0xd0>)
 8000bc0:	f004 fea4 	bl	800590c <HAL_TIM_IC_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  timestamp =(pow(2,32)*count)+__HAL_TIM_GET_COUNTER(&htim2);
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <main+0xd4>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fda1 	bl	8000710 <__aeabi_i2d>
 8000bce:	f04f 0200 	mov.w	r2, #0
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <main+0xd8>)
 8000bd4:	f7ff fb20 	bl	8000218 <__aeabi_dmul>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	460b      	mov	r3, r1
 8000bdc:	4614      	mov	r4, r2
 8000bde:	461d      	mov	r5, r3
 8000be0:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <main+0xbc>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fd82 	bl	80006f0 <__aeabi_ui2d>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	4629      	mov	r1, r5
 8000bf4:	f7ff fc40 	bl	8000478 <__adddf3>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f7ff fe08 	bl	8000814 <__aeabi_d2ulz>
 8000c04:	4602      	mov	r2, r0
 8000c06:	460b      	mov	r3, r1
 8000c08:	490b      	ldr	r1, [pc, #44]	; (8000c38 <main+0xdc>)
 8000c0a:	e9c1 2300 	strd	r2, r3, [r1]


	  Avg();
 8000c0e:	f000 fb8f 	bl	8001330 <Avg>

	  swap();
 8000c12:	f000 fc9b 	bl	800154c <swap>
  {
 8000c16:	e7d5      	b.n	8000bc4 <main+0x68>
 8000c18:	200001d8 	.word	0x200001d8
 8000c1c:	20000270 	.word	0x20000270
 8000c20:	200002c8 	.word	0x200002c8
 8000c24:	2000002c 	.word	0x2000002c
 8000c28:	20000224 	.word	0x20000224
 8000c2c:	2000018c 	.word	0x2000018c
 8000c30:	20000000 	.word	0x20000000
 8000c34:	41f00000 	.word	0x41f00000
 8000c38:	200002c0 	.word	0x200002c0

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	; 0x50
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 0318 	add.w	r3, r7, #24
 8000c46:	2238      	movs	r2, #56	; 0x38
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f007 f9d6 	bl	8007ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f003 fb18 	bl	8004294 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6e:	2340      	movs	r3, #64	; 0x40
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c72:	2302      	movs	r3, #2
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c76:	2302      	movs	r3, #2
 8000c78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c7e:	2355      	movs	r3, #85	; 0x55
 8000c80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c82:	2302      	movs	r3, #2
 8000c84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c86:	2302      	movs	r3, #2
 8000c88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8e:	f107 0318 	add.w	r3, r7, #24
 8000c92:	4618      	mov	r0, r3
 8000c94:	f003 fbb2 	bl	80043fc <HAL_RCC_OscConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c9e:	f000 fc95 	bl	80015cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2104      	movs	r1, #4
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 feb0 	bl	8004a20 <HAL_RCC_ClockConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000cc6:	f000 fc81 	bl	80015cc <Error_Handler>
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3750      	adds	r7, #80	; 0x50
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08c      	sub	sp, #48	; 0x30
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2220      	movs	r2, #32
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f007 f985 	bl	8007ffc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cf2:	4b41      	ldr	r3, [pc, #260]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000cf4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cf8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cfa:	4b3f      	ldr	r3, [pc, #252]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000cfc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d02:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d08:	4b3b      	ldr	r3, [pc, #236]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d0e:	4b3a      	ldr	r3, [pc, #232]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d14:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d1a:	4b37      	ldr	r3, [pc, #220]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d20:	4b35      	ldr	r3, [pc, #212]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d26:	4b34      	ldr	r3, [pc, #208]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000d2c:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000d2e:	2203      	movs	r2, #3
 8000d30:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d32:	4b31      	ldr	r3, [pc, #196]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8000d3a:	4b2f      	ldr	r3, [pc, #188]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000d3c:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 8000d40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d42:	4b2d      	ldr	r3, [pc, #180]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000d44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d48:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d4a:	4b2b      	ldr	r3, [pc, #172]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d52:	4b29      	ldr	r3, [pc, #164]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d58:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d60:	4825      	ldr	r0, [pc, #148]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000d62:	f001 f95d 	bl	8002020 <HAL_ADC_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000d6c:	f000 fc2e 	bl	80015cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	4619      	mov	r1, r3
 8000d7a:	481f      	ldr	r0, [pc, #124]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000d7c:	f002 fc2a 	bl	80035d4 <HAL_ADCEx_MultiModeConfigChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000d86:	f000 fc21 	bl	80015cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <MX_ADC1_Init+0x128>)
 8000d8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d8e:	2306      	movs	r3, #6
 8000d90:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000d92:	2307      	movs	r3, #7
 8000d94:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d96:	237f      	movs	r3, #127	; 0x7f
 8000d98:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	4814      	ldr	r0, [pc, #80]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000da8:	f001 fe52 	bl	8002a50 <HAL_ADC_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000db2:	f000 fc0b 	bl	80015cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_ADC1_Init+0x12c>)
 8000db8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000dba:	230c      	movs	r3, #12
 8000dbc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000dc4:	f001 fe44 	bl	8002a50 <HAL_ADC_ConfigChannel>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000dce:	f000 fbfd 	bl	80015cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_ADC1_Init+0x130>)
 8000dd4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000dd6:	2312      	movs	r3, #18
 8000dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_ADC1_Init+0x124>)
 8000de0:	f001 fe36 	bl	8002a50 <HAL_ADC_ConfigChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000dea:	f000 fbef 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	3730      	adds	r7, #48	; 0x30
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000002c 	.word	0x2000002c
 8000dfc:	04300002 	.word	0x04300002
 8000e00:	08600004 	.word	0x08600004
 8000e04:	1d500080 	.word	0x1d500080

08000e08 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e0c:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e0e:	4a22      	ldr	r2, [pc, #136]	; (8000e98 <MX_LPUART1_UART_Init+0x90>)
 8000e10:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e18:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e4a:	4812      	ldr	r0, [pc, #72]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e4c:	f006 fa68 	bl	8007320 <HAL_UART_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e56:	f000 fbb9 	bl	80015cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e5e:	f007 f803 	bl	8007e68 <HAL_UARTEx_SetTxFifoThreshold>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000e68:	f000 fbb0 	bl	80015cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4809      	ldr	r0, [pc, #36]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e70:	f007 f838 	bl	8007ee4 <HAL_UARTEx_SetRxFifoThreshold>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000e7a:	f000 fba7 	bl	80015cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_LPUART1_UART_Init+0x8c>)
 8000e80:	f006 ffb9 	bl	8007df6 <HAL_UARTEx_DisableFifoMode>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000e8a:	f000 fb9f 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200000f8 	.word	0x200000f8
 8000e98:	40008000 	.word	0x40008000

08000e9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	; 0x30
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eca:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <MX_TIM1_Init+0x104>)
 8000ecc:	4a35      	ldr	r2, [pc, #212]	; (8000fa4 <MX_TIM1_Init+0x108>)
 8000ece:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000ed0:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <MX_TIM1_Init+0x104>)
 8000ed2:	22a9      	movs	r2, #169	; 0xa9
 8000ed4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed6:	4b32      	ldr	r3, [pc, #200]	; (8000fa0 <MX_TIM1_Init+0x104>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000edc:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <MX_TIM1_Init+0x104>)
 8000ede:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ee2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee4:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <MX_TIM1_Init+0x104>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <MX_TIM1_Init+0x104>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef0:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <MX_TIM1_Init+0x104>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000ef6:	482a      	ldr	r0, [pc, #168]	; (8000fa0 <MX_TIM1_Init+0x104>)
 8000ef8:	f004 fcb0 	bl	800585c <HAL_TIM_IC_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8000f02:	f000 fb63 	bl	80015cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f06:	2304      	movs	r3, #4
 8000f08:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000f0a:	2350      	movs	r3, #80	; 0x50
 8000f0c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	481f      	ldr	r0, [pc, #124]	; (8000fa0 <MX_TIM1_Init+0x104>)
 8000f22:	f005 fa0d 	bl	8006340 <HAL_TIM_SlaveConfigSynchro>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000f2c:	f000 fb4e 	bl	80015cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f34:	2301      	movs	r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2200      	movs	r2, #0
 8000f46:	4619      	mov	r1, r3
 8000f48:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <MX_TIM1_Init+0x104>)
 8000f4a:	f004 ff32 	bl	8005db2 <HAL_TIM_IC_ConfigChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000f54:	f000 fb3a 	bl	80015cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2204      	movs	r2, #4
 8000f66:	4619      	mov	r1, r3
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <MX_TIM1_Init+0x104>)
 8000f6a:	f004 ff22 	bl	8005db2 <HAL_TIM_IC_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000f74:	f000 fb2a 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f84:	463b      	mov	r3, r7
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_TIM1_Init+0x104>)
 8000f8a:	f006 f8ed 	bl	8007168 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000f94:	f000 fb1a 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3730      	adds	r7, #48	; 0x30
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000018c 	.word	0x2000018c
 8000fa4:	40012c00 	.word	0x40012c00

08000fa8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_TIM2_Init+0x94>)
 8000fc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fcc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_TIM2_Init+0x94>)
 8000fd0:	22a9      	movs	r2, #169	; 0xa9
 8000fd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <MX_TIM2_Init+0x94>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000000;
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_TIM2_Init+0x94>)
 8000fdc:	4a18      	ldr	r2, [pc, #96]	; (8001040 <MX_TIM2_Init+0x98>)
 8000fde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <MX_TIM2_Init+0x94>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_TIM2_Init+0x94>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fec:	4813      	ldr	r0, [pc, #76]	; (800103c <MX_TIM2_Init+0x94>)
 8000fee:	f004 f981 	bl	80052f4 <HAL_TIM_Base_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ff8:	f000 fae8 	bl	80015cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001000:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001002:	f107 0310 	add.w	r3, r7, #16
 8001006:	4619      	mov	r1, r3
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <MX_TIM2_Init+0x94>)
 800100a:	f005 f883 	bl	8006114 <HAL_TIM_ConfigClockSource>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001014:	f000 fada 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_TIM2_Init+0x94>)
 8001026:	f006 f89f 	bl	8007168 <HAL_TIMEx_MasterConfigSynchronization>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001030:	f000 facc 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200001d8 	.word	0x200001d8
 8001040:	004c4b40 	.word	0x004c4b40

08001044 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	; 0x38
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001064:	463b      	mov	r3, r7
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001076:	4b2d      	ldr	r3, [pc, #180]	; (800112c <MX_TIM3_Init+0xe8>)
 8001078:	4a2d      	ldr	r2, [pc, #180]	; (8001130 <MX_TIM3_Init+0xec>)
 800107a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <MX_TIM3_Init+0xe8>)
 800107e:	22a9      	movs	r2, #169	; 0xa9
 8001080:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001082:	4b2a      	ldr	r3, [pc, #168]	; (800112c <MX_TIM3_Init+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001088:	4b28      	ldr	r3, [pc, #160]	; (800112c <MX_TIM3_Init+0xe8>)
 800108a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800108e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <MX_TIM3_Init+0xe8>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001096:	4b25      	ldr	r3, [pc, #148]	; (800112c <MX_TIM3_Init+0xe8>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800109c:	4823      	ldr	r0, [pc, #140]	; (800112c <MX_TIM3_Init+0xe8>)
 800109e:	f004 f929 	bl	80052f4 <HAL_TIM_Base_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80010a8:	f000 fa90 	bl	80015cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b6:	4619      	mov	r1, r3
 80010b8:	481c      	ldr	r0, [pc, #112]	; (800112c <MX_TIM3_Init+0xe8>)
 80010ba:	f005 f82b 	bl	8006114 <HAL_TIM_ConfigClockSource>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80010c4:	f000 fa82 	bl	80015cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010c8:	4818      	ldr	r0, [pc, #96]	; (800112c <MX_TIM3_Init+0xe8>)
 80010ca:	f004 fa53 	bl	8005574 <HAL_TIM_PWM_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80010d4:	f000 fa7a 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010e0:	f107 031c 	add.w	r3, r7, #28
 80010e4:	4619      	mov	r1, r3
 80010e6:	4811      	ldr	r0, [pc, #68]	; (800112c <MX_TIM3_Init+0xe8>)
 80010e8:	f006 f83e 	bl	8007168 <HAL_TIMEx_MasterConfigSynchronization>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80010f2:	f000 fa6b 	bl	80015cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010f6:	2360      	movs	r3, #96	; 0x60
 80010f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 80010fa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001108:	463b      	mov	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	4807      	ldr	r0, [pc, #28]	; (800112c <MX_TIM3_Init+0xe8>)
 8001110:	f004 feec 	bl	8005eec <HAL_TIM_PWM_ConfigChannel>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800111a:	f000 fa57 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <MX_TIM3_Init+0xe8>)
 8001120:	f000 fc0a 	bl	8001938 <HAL_TIM_MspPostInit>

}
 8001124:	bf00      	nop
 8001126:	3738      	adds	r7, #56	; 0x38
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000224 	.word	0x20000224
 8001130:	40000400 	.word	0x40000400

08001134 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_TIM4_Init+0x94>)
 8001154:	4a1d      	ldr	r2, [pc, #116]	; (80011cc <MX_TIM4_Init+0x98>)
 8001156:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_TIM4_Init+0x94>)
 800115a:	22a9      	movs	r2, #169	; 0xa9
 800115c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_TIM4_Init+0x94>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 333;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_TIM4_Init+0x94>)
 8001166:	f240 124d 	movw	r2, #333	; 0x14d
 800116a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <MX_TIM4_Init+0x94>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <MX_TIM4_Init+0x94>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001178:	4813      	ldr	r0, [pc, #76]	; (80011c8 <MX_TIM4_Init+0x94>)
 800117a:	f004 f8bb 	bl	80052f4 <HAL_TIM_Base_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001184:	f000 fa22 	bl	80015cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4619      	mov	r1, r3
 8001194:	480c      	ldr	r0, [pc, #48]	; (80011c8 <MX_TIM4_Init+0x94>)
 8001196:	f004 ffbd 	bl	8006114 <HAL_TIM_ConfigClockSource>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80011a0:	f000 fa14 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011a4:	2320      	movs	r3, #32
 80011a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_TIM4_Init+0x94>)
 80011b2:	f005 ffd9 	bl	8007168 <HAL_TIMEx_MasterConfigSynchronization>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80011bc:	f000 fa06 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000270 	.word	0x20000270
 80011cc:	40000800 	.word	0x40000800

080011d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_DMA_Init+0x50>)
 80011d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011da:	4a11      	ldr	r2, [pc, #68]	; (8001220 <MX_DMA_Init+0x50>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6493      	str	r3, [r2, #72]	; 0x48
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_DMA_Init+0x50>)
 80011e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_DMA_Init+0x50>)
 80011f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <MX_DMA_Init+0x50>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6493      	str	r3, [r2, #72]	; 0x48
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_DMA_Init+0x50>)
 80011fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	200b      	movs	r0, #11
 800120c:	f002 fbc5 	bl	800399a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001210:	200b      	movs	r0, #11
 8001212:	f002 fbdc 	bl	80039ce <HAL_NVIC_EnableIRQ>

}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000

08001224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <MX_GPIO_Init+0xd4>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	4a2e      	ldr	r2, [pc, #184]	; (80012f8 <MX_GPIO_Init+0xd4>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001246:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <MX_GPIO_Init+0xd4>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <MX_GPIO_Init+0xd4>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	4a28      	ldr	r2, [pc, #160]	; (80012f8 <MX_GPIO_Init+0xd4>)
 8001258:	f043 0320 	orr.w	r3, r3, #32
 800125c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125e:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <MX_GPIO_Init+0xd4>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	f003 0320 	and.w	r3, r3, #32
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <MX_GPIO_Init+0xd4>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a22      	ldr	r2, [pc, #136]	; (80012f8 <MX_GPIO_Init+0xd4>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <MX_GPIO_Init+0xd4>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <MX_GPIO_Init+0xd4>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <MX_GPIO_Init+0xd4>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_GPIO_Init+0xd4>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2120      	movs	r1, #32
 800129e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a2:	f002 ffbb 	bl	800421c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	480f      	ldr	r0, [pc, #60]	; (80012fc <MX_GPIO_Init+0xd8>)
 80012be:	f002 fe13 	bl	8003ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012c2:	2320      	movs	r3, #32
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012dc:	f002 fe04 	bl	8003ee8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	2100      	movs	r1, #0
 80012e4:	2028      	movs	r0, #40	; 0x28
 80012e6:	f002 fb58 	bl	800399a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012ea:	2028      	movs	r0, #40	; 0x28
 80012ec:	f002 fb6f 	bl	80039ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000
 80012fc:	48000800 	.word	0x48000800

08001300 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a07      	ldr	r2, [pc, #28]	; (8001328 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d104      	bne.n	800131a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		count += 1 ;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001318:	6013      	str	r3, [r2, #0]
	}
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	200001d8 	.word	0x200001d8
 800132c:	20000000 	.word	0x20000000

08001330 <Avg>:
void Avg()
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
	pot1 =0;
 8001336:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <Avg+0xb4>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
	pot2 =0;
 800133c:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <Avg+0xb8>)
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
	pot3 =0;
 8001342:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <Avg+0xbc>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
	for (int i=0; i<300; i +=3)
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	e022      	b.n	8001394 <Avg+0x64>
	{
		pot1 += ADC_RawRead[i];
 800134e:	4a28      	ldr	r2, [pc, #160]	; (80013f0 <Avg+0xc0>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001356:	461a      	mov	r2, r3
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <Avg+0xb4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4413      	add	r3, r2
 800135e:	4a21      	ldr	r2, [pc, #132]	; (80013e4 <Avg+0xb4>)
 8001360:	6013      	str	r3, [r2, #0]
		pot2 += ADC_RawRead[i+1];
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3301      	adds	r3, #1
 8001366:	4a22      	ldr	r2, [pc, #136]	; (80013f0 <Avg+0xc0>)
 8001368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800136c:	461a      	mov	r2, r3
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <Avg+0xb8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <Avg+0xb8>)
 8001376:	6013      	str	r3, [r2, #0]
		pot3 += ADC_RawRead[i+2];
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3302      	adds	r3, #2
 800137c:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <Avg+0xc0>)
 800137e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001382:	461a      	mov	r2, r3
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <Avg+0xbc>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4413      	add	r3, r2
 800138a:	4a18      	ldr	r2, [pc, #96]	; (80013ec <Avg+0xbc>)
 800138c:	6013      	str	r3, [r2, #0]
	for (int i=0; i<300; i +=3)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3303      	adds	r3, #3
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800139a:	dbd8      	blt.n	800134e <Avg+0x1e>
	}
	ans1 = pot1/100;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <Avg+0xb4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <Avg+0xc4>)
 80013a2:	fb82 1203 	smull	r1, r2, r2, r3
 80013a6:	1152      	asrs	r2, r2, #5
 80013a8:	17db      	asrs	r3, r3, #31
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <Avg+0xc8>)
 80013ae:	6013      	str	r3, [r2, #0]
	ans2 = pot2/100;
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <Avg+0xb8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <Avg+0xc4>)
 80013b6:	fb82 1203 	smull	r1, r2, r2, r3
 80013ba:	1152      	asrs	r2, r2, #5
 80013bc:	17db      	asrs	r3, r3, #31
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <Avg+0xcc>)
 80013c2:	6013      	str	r3, [r2, #0]
	ans3 = pot3/100;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <Avg+0xbc>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <Avg+0xc4>)
 80013ca:	fb82 1203 	smull	r1, r2, r2, r3
 80013ce:	1152      	asrs	r2, r2, #5
 80013d0:	17db      	asrs	r3, r3, #31
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <Avg+0xd0>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	20000524 	.word	0x20000524
 80013e8:	20000528 	.word	0x20000528
 80013ec:	2000052c 	.word	0x2000052c
 80013f0:	200002c8 	.word	0x200002c8
 80013f4:	51eb851f 	.word	0x51eb851f
 80013f8:	20000530 	.word	0x20000530
 80013fc:	20000534 	.word	0x20000534
 8001400:	20000538 	.word	0x20000538

08001404 <servo>:
void servo()
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
sum1 = 0;
 8001408:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <servo+0xc0>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
sum2 = 0;
 800140e:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <servo+0xc4>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
	if (ans1 >= 0 && ans1 <= (4096*25)/100 )
 8001414:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <servo+0xc8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <servo+0x2e>
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <servo+0xc8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001424:	dc05      	bgt.n	8001432 <servo+0x2e>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 8001426:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <servo+0xcc>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800142e:	635a      	str	r2, [r3, #52]	; 0x34
 8001430:	e043      	b.n	80014ba <servo+0xb6>
	}

	else if (ans1 > 1024 && ans1 <= (4096*50)/100)
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <servo+0xc8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800143a:	dd19      	ble.n	8001470 <servo+0x6c>
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <servo+0xc8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001444:	dc14      	bgt.n	8001470 <servo+0x6c>
	{
		sum1 = (ans2 *(2500 - 500))/4096 + 500;
 8001446:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <servo+0xd0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800144e:	fb02 f303 	mul.w	r3, r2, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	da01      	bge.n	800145a <servo+0x56>
 8001456:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800145a:	131b      	asrs	r3, r3, #12
 800145c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001460:	4a18      	ldr	r2, [pc, #96]	; (80014c4 <servo+0xc0>)
 8001462:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, sum1);
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <servo+0xc0>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <servo+0xcc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	635a      	str	r2, [r3, #52]	; 0x34
 800146e:	e024      	b.n	80014ba <servo+0xb6>
	}

	else if (ans1 > 2048 && ans1 <= (4096*75)/100)
 8001470:	4b16      	ldr	r3, [pc, #88]	; (80014cc <servo+0xc8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001478:	dd19      	ble.n	80014ae <servo+0xaa>
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <servo+0xc8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001482:	dc14      	bgt.n	80014ae <servo+0xaa>
	{
		sum2 = (ans3 *2000)/4096 + 500;
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <servo+0xd4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800148c:	fb02 f303 	mul.w	r3, r2, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	da01      	bge.n	8001498 <servo+0x94>
 8001494:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001498:	131b      	asrs	r3, r3, #12
 800149a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <servo+0xc4>)
 80014a0:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, sum2);
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <servo+0xc4>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <servo+0xcc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	635a      	str	r2, [r3, #52]	; 0x34
 80014ac:	e005      	b.n	80014ba <servo+0xb6>
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2500);
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <servo+0xcc>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80014b6:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	2000053c 	.word	0x2000053c
 80014c8:	20000540 	.word	0x20000540
 80014cc:	20000530 	.word	0x20000530
 80014d0:	20000224 	.word	0x20000224
 80014d4:	20000534 	.word	0x20000534
 80014d8:	20000538 	.word	0x20000538

080014dc <ex>:
void ex()
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
	ServoTime = __HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_2);
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <ex+0x58>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <ex+0x5c>)
 80014ea:	801a      	strh	r2, [r3, #0]
	ServoPeriod=__HAL_TIM_GET_COMPARE(&htim1,TIM_CHANNEL_1);
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <ex+0x58>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <ex+0x60>)
 80014f6:	801a      	strh	r2, [r3, #0]
	A = ((ServoTime - 864)*2000)/(1238) + 500 ;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <ex+0x5c>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001500:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001504:	fb02 f303 	mul.w	r3, r2, r3
 8001508:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <ex+0x64>)
 800150a:	fb82 1203 	smull	r1, r2, r2, r3
 800150e:	441a      	add	r2, r3
 8001510:	1292      	asrs	r2, r2, #10
 8001512:	17db      	asrs	r3, r3, #31
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <ex+0x68>)
 800151c:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,A);
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <ex+0x68>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <ex+0x6c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	2000018c 	.word	0x2000018c
 8001538:	20000520 	.word	0x20000520
 800153c:	20000522 	.word	0x20000522
 8001540:	d3bf7ba9 	.word	0xd3bf7ba9
 8001544:	20000544 	.word	0x20000544
 8001548:	20000224 	.word	0x20000224

0800154c <swap>:
void swap()
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET && S1 == 0)
 8001550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001554:	481b      	ldr	r0, [pc, #108]	; (80015c4 <swap+0x78>)
 8001556:	f002 fe49 	bl	80041ec <HAL_GPIO_ReadPin>
 800155a:	4603      	mov	r3, r0
 800155c:	2b01      	cmp	r3, #1
 800155e:	d10d      	bne.n	800157c <swap+0x30>
 8001560:	4b19      	ldr	r3, [pc, #100]	; (80015c8 <swap+0x7c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d109      	bne.n	800157c <swap+0x30>
		{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001568:	2201      	movs	r2, #1
 800156a:	2120      	movs	r1, #32
 800156c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001570:	f002 fe54 	bl	800421c <HAL_GPIO_WritePin>
		S1 = 1;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <swap+0x7c>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	e014      	b.n	80015a6 <swap+0x5a>
		}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET && S1 == 1)
 800157c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001580:	4810      	ldr	r0, [pc, #64]	; (80015c4 <swap+0x78>)
 8001582:	f002 fe33 	bl	80041ec <HAL_GPIO_ReadPin>
 8001586:	4603      	mov	r3, r0
 8001588:	2b01      	cmp	r3, #1
 800158a:	d10c      	bne.n	80015a6 <swap+0x5a>
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <swap+0x7c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d108      	bne.n	80015a6 <swap+0x5a>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	2120      	movs	r1, #32
 8001598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159c:	f002 fe3e 	bl	800421c <HAL_GPIO_WritePin>
			S1 = 0;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <swap+0x7c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
		}
	 if (S1 == 0)
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <swap+0x7c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <swap+0x68>
	 {
	  servo();
 80015ae:	f7ff ff29 	bl	8001404 <servo>
	 } else if (S1 == 1) {
	  ex();
	 }
}
 80015b2:	e005      	b.n	80015c0 <swap+0x74>
	 } else if (S1 == 1) {
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <swap+0x7c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <swap+0x74>
	  ex();
 80015bc:	f7ff ff8e 	bl	80014dc <ex>
}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	48000800 	.word	0x48000800
 80015c8:	20000548 	.word	0x20000548

080015cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
}
 80015d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <Error_Handler+0x8>
	...

080015d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_MspInit+0x44>)
 80015e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e2:	4a0e      	ldr	r2, [pc, #56]	; (800161c <HAL_MspInit+0x44>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6613      	str	r3, [r2, #96]	; 0x60
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_MspInit+0x44>)
 80015ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_MspInit+0x44>)
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fa:	4a08      	ldr	r2, [pc, #32]	; (800161c <HAL_MspInit+0x44>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	6593      	str	r3, [r2, #88]	; 0x58
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_MspInit+0x44>)
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800160e:	f002 fee5 	bl	80043dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000

08001620 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b0a0      	sub	sp, #128	; 0x80
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001638:	f107 0318 	add.w	r3, r7, #24
 800163c:	2254      	movs	r2, #84	; 0x54
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f006 fcdb 	bl	8007ffc <memset>
  if(hadc->Instance==ADC1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800164e:	d17f      	bne.n	8001750 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001650:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001654:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001656:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800165a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	4618      	mov	r0, r3
 8001662:	f003 fbf9 	bl	8004e58 <HAL_RCCEx_PeriphCLKConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800166c:	f7ff ffae 	bl	80015cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001670:	4b39      	ldr	r3, [pc, #228]	; (8001758 <HAL_ADC_MspInit+0x138>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001674:	4a38      	ldr	r2, [pc, #224]	; (8001758 <HAL_ADC_MspInit+0x138>)
 8001676:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800167a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167c:	4b36      	ldr	r3, [pc, #216]	; (8001758 <HAL_ADC_MspInit+0x138>)
 800167e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001688:	4b33      	ldr	r3, [pc, #204]	; (8001758 <HAL_ADC_MspInit+0x138>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168c:	4a32      	ldr	r2, [pc, #200]	; (8001758 <HAL_ADC_MspInit+0x138>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001694:	4b30      	ldr	r3, [pc, #192]	; (8001758 <HAL_ADC_MspInit+0x138>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a0:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <HAL_ADC_MspInit+0x138>)
 80016a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a4:	4a2c      	ldr	r2, [pc, #176]	; (8001758 <HAL_ADC_MspInit+0x138>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <HAL_ADC_MspInit+0x138>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016b8:	2302      	movs	r3, #2
 80016ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016bc:	2303      	movs	r3, #3
 80016be:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016c8:	4619      	mov	r1, r3
 80016ca:	4824      	ldr	r0, [pc, #144]	; (800175c <HAL_ADC_MspInit+0x13c>)
 80016cc:	f002 fc0c 	bl	8003ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016d0:	2303      	movs	r3, #3
 80016d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d4:	2303      	movs	r3, #3
 80016d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016e0:	4619      	mov	r1, r3
 80016e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e6:	f002 fbff 	bl	8003ee8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <HAL_ADC_MspInit+0x140>)
 80016ec:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <HAL_ADC_MspInit+0x144>)
 80016ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_ADC_MspInit+0x140>)
 80016f2:	2205      	movs	r2, #5
 80016f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f6:	4b1a      	ldr	r3, [pc, #104]	; (8001760 <HAL_ADC_MspInit+0x140>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <HAL_ADC_MspInit+0x140>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001702:	4b17      	ldr	r3, [pc, #92]	; (8001760 <HAL_ADC_MspInit+0x140>)
 8001704:	2280      	movs	r2, #128	; 0x80
 8001706:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_ADC_MspInit+0x140>)
 800170a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800170e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <HAL_ADC_MspInit+0x140>)
 8001712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001716:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_ADC_MspInit+0x140>)
 800171a:	2220      	movs	r2, #32
 800171c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <HAL_ADC_MspInit+0x140>)
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001724:	480e      	ldr	r0, [pc, #56]	; (8001760 <HAL_ADC_MspInit+0x140>)
 8001726:	f002 f96d 	bl	8003a04 <HAL_DMA_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8001730:	f7ff ff4c 	bl	80015cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <HAL_ADC_MspInit+0x140>)
 8001738:	655a      	str	r2, [r3, #84]	; 0x54
 800173a:	4a09      	ldr	r2, [pc, #36]	; (8001760 <HAL_ADC_MspInit+0x140>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	2012      	movs	r0, #18
 8001746:	f002 f928 	bl	800399a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800174a:	2012      	movs	r0, #18
 800174c:	f002 f93f 	bl	80039ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001750:	bf00      	nop
 8001752:	3780      	adds	r7, #128	; 0x80
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40021000 	.word	0x40021000
 800175c:	48000800 	.word	0x48000800
 8001760:	20000098 	.word	0x20000098
 8001764:	40020008 	.word	0x40020008

08001768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b09e      	sub	sp, #120	; 0x78
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	2254      	movs	r2, #84	; 0x54
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f006 fc37 	bl	8007ffc <memset>
  if(huart->Instance==LPUART1)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a1f      	ldr	r2, [pc, #124]	; (8001810 <HAL_UART_MspInit+0xa8>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d136      	bne.n	8001806 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001798:	2320      	movs	r3, #32
 800179a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800179c:	2300      	movs	r3, #0
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	4618      	mov	r0, r3
 80017a6:	f003 fb57 	bl	8004e58 <HAL_RCCEx_PeriphCLKConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017b0:	f7ff ff0c 	bl	80015cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_UART_MspInit+0xac>)
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	4a16      	ldr	r2, [pc, #88]	; (8001814 <HAL_UART_MspInit+0xac>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	65d3      	str	r3, [r2, #92]	; 0x5c
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <HAL_UART_MspInit+0xac>)
 80017c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_UART_MspInit+0xac>)
 80017ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d0:	4a10      	ldr	r2, [pc, #64]	; (8001814 <HAL_UART_MspInit+0xac>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <HAL_UART_MspInit+0xac>)
 80017da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80017e4:	230c      	movs	r3, #12
 80017e6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80017f4:	230c      	movs	r3, #12
 80017f6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017fc:	4619      	mov	r1, r3
 80017fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001802:	f002 fb71 	bl	8003ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001806:	bf00      	nop
 8001808:	3778      	adds	r7, #120	; 0x78
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40008000 	.word	0x40008000
 8001814:	40021000 	.word	0x40021000

08001818 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a17      	ldr	r2, [pc, #92]	; (8001894 <HAL_TIM_IC_MspInit+0x7c>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d127      	bne.n	800188a <HAL_TIM_IC_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <HAL_TIM_IC_MspInit+0x80>)
 800183c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183e:	4a16      	ldr	r2, [pc, #88]	; (8001898 <HAL_TIM_IC_MspInit+0x80>)
 8001840:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001844:	6613      	str	r3, [r2, #96]	; 0x60
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <HAL_TIM_IC_MspInit+0x80>)
 8001848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_TIM_IC_MspInit+0x80>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	4a10      	ldr	r2, [pc, #64]	; (8001898 <HAL_TIM_IC_MspInit+0x80>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <HAL_TIM_IC_MspInit+0x80>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800186a:	2301      	movs	r3, #1
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800187a:	2302      	movs	r3, #2
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <HAL_TIM_IC_MspInit+0x84>)
 8001886:	f002 fb2f 	bl	8003ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	; 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40012c00 	.word	0x40012c00
 8001898:	40021000 	.word	0x40021000
 800189c:	48000800 	.word	0x48000800

080018a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b0:	d114      	bne.n	80018dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018b2:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_TIM_Base_MspInit+0x8c>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	4a1d      	ldr	r2, [pc, #116]	; (800192c <HAL_TIM_Base_MspInit+0x8c>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6593      	str	r3, [r2, #88]	; 0x58
 80018be:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_TIM_Base_MspInit+0x8c>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	201c      	movs	r0, #28
 80018d0:	f002 f863 	bl	800399a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018d4:	201c      	movs	r0, #28
 80018d6:	f002 f87a 	bl	80039ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018da:	e022      	b.n	8001922 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a13      	ldr	r2, [pc, #76]	; (8001930 <HAL_TIM_Base_MspInit+0x90>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d10c      	bne.n	8001900 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_TIM_Base_MspInit+0x8c>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <HAL_TIM_Base_MspInit+0x8c>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6593      	str	r3, [r2, #88]	; 0x58
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_TIM_Base_MspInit+0x8c>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]
}
 80018fe:	e010      	b.n	8001922 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <HAL_TIM_Base_MspInit+0x94>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d10b      	bne.n	8001922 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_TIM_Base_MspInit+0x8c>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_TIM_Base_MspInit+0x8c>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	6593      	str	r3, [r2, #88]	; 0x58
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_TIM_Base_MspInit+0x8c>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
}
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	40000400 	.word	0x40000400
 8001934:	40000800 	.word	0x40000800

08001938 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a11      	ldr	r2, [pc, #68]	; (800199c <HAL_TIM_MspPostInit+0x64>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d11b      	bne.n	8001992 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_TIM_MspPostInit+0x68>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <HAL_TIM_MspPostInit+0x68>)
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_TIM_MspPostInit+0x68>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001972:	2310      	movs	r3, #16
 8001974:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001982:	2302      	movs	r3, #2
 8001984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	4619      	mov	r1, r3
 800198c:	4805      	ldr	r0, [pc, #20]	; (80019a4 <HAL_TIM_MspPostInit+0x6c>)
 800198e:	f002 faab 	bl	8003ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001992:	bf00      	nop
 8001994:	3720      	adds	r7, #32
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40000400 	.word	0x40000400
 80019a0:	40021000 	.word	0x40021000
 80019a4:	48000400 	.word	0x48000400

080019a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <NMI_Handler+0x4>

080019ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <HardFault_Handler+0x4>

080019b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <MemManage_Handler+0x4>

080019ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <BusFault_Handler+0x4>

080019c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <UsageFault_Handler+0x4>

080019c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f4:	f000 f8b6 	bl	8001b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}

080019fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <DMA1_Channel1_IRQHandler+0x10>)
 8001a02:	f002 f922 	bl	8003c4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000098 	.word	0x20000098

08001a10 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <ADC1_2_IRQHandler+0x10>)
 8001a16:	f000 fd93 	bl	8002540 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	2000002c 	.word	0x2000002c

08001a24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <TIM2_IRQHandler+0x10>)
 8001a2a:	f004 f873 	bl	8005b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200001d8 	.word	0x200001d8

08001a38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a40:	f002 fc04 	bl	800424c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <SystemInit+0x20>)
 8001a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <SystemInit+0x20>)
 8001a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a6e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a70:	f7ff ffea 	bl	8001a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a76:	490d      	ldr	r1, [pc, #52]	; (8001aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a78:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <LoopForever+0xe>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a8c:	4c0a      	ldr	r4, [pc, #40]	; (8001ab8 <LoopForever+0x16>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f006 fab7 	bl	800800c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a9e:	f7ff f85d 	bl	8000b5c <main>

08001aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8001aa2:	e7fe      	b.n	8001aa2 <LoopForever>
  ldr   r0, =_estack
 8001aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ab0:	080080bc 	.word	0x080080bc
  ldr r2, =_sbss
 8001ab4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ab8:	20000550 	.word	0x20000550

08001abc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC3_IRQHandler>

08001abe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f001 ff5b 	bl	8003984 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f000 f80e 	bl	8001af0 <HAL_InitTick>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	e001      	b.n	8001ae4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ae0:	f7ff fd7a 	bl	80015d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ae4:	79fb      	ldrb	r3, [r7, #7]

}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001afc:	4b16      	ldr	r3, [pc, #88]	; (8001b58 <HAL_InitTick+0x68>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d022      	beq.n	8001b4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <HAL_InitTick+0x6c>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <HAL_InitTick+0x68>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f001 ff66 	bl	80039ea <HAL_SYSTICK_Config>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10f      	bne.n	8001b44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b0f      	cmp	r3, #15
 8001b28:	d809      	bhi.n	8001b3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b32:	f001 ff32 	bl	800399a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <HAL_InitTick+0x70>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	e007      	b.n	8001b4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
 8001b42:	e004      	b.n	8001b4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
 8001b48:	e001      	b.n	8001b4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	2000000c 	.word	0x2000000c
 8001b5c:	20000004 	.word	0x20000004
 8001b60:	20000008 	.word	0x20000008

08001b64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_IncTick+0x1c>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_IncTick+0x20>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4413      	add	r3, r2
 8001b72:	4a03      	ldr	r2, [pc, #12]	; (8001b80 <HAL_IncTick+0x1c>)
 8001b74:	6013      	str	r3, [r2, #0]
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	2000054c 	.word	0x2000054c
 8001b84:	2000000c 	.word	0x2000000c

08001b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_GetTick+0x14>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	2000054c 	.word	0x2000054c

08001ba0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	609a      	str	r2, [r3, #8]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3360      	adds	r3, #96	; 0x60
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <LL_ADC_SetOffset+0x44>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	4313      	orrs	r3, r2
 8001c38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c40:	bf00      	nop
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	03fff000 	.word	0x03fff000

08001c50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3360      	adds	r3, #96	; 0x60
 8001c5e:	461a      	mov	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	3360      	adds	r3, #96	; 0x60
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ca6:	bf00      	nop
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b087      	sub	sp, #28
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	3360      	adds	r3, #96	; 0x60
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001cdc:	bf00      	nop
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3360      	adds	r3, #96	; 0x60
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d12:	bf00      	nop
 8001d14:	371c      	adds	r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	615a      	str	r2, [r3, #20]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b087      	sub	sp, #28
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3330      	adds	r3, #48	; 0x30
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	4413      	add	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	211f      	movs	r1, #31
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	401a      	ands	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	0e9b      	lsrs	r3, r3, #26
 8001da2:	f003 011f 	and.w	r1, r3, #31
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	431a      	orrs	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001db6:	bf00      	nop
 8001db8:	371c      	adds	r7, #28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	3314      	adds	r3, #20
 8001df8:	461a      	mov	r2, r3
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	0e5b      	lsrs	r3, r3, #25
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	4413      	add	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	0d1b      	lsrs	r3, r3, #20
 8001e10:	f003 031f 	and.w	r3, r3, #31
 8001e14:	2107      	movs	r1, #7
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	0d1b      	lsrs	r3, r3, #20
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e32:	bf00      	nop
 8001e34:	371c      	adds	r7, #28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0318 	and.w	r3, r3, #24
 8001e62:	4908      	ldr	r1, [pc, #32]	; (8001e84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e64:	40d9      	lsrs	r1, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	400b      	ands	r3, r1
 8001e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	0007ffff 	.word	0x0007ffff

08001e88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 031f 	and.w	r3, r3, #31
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ed0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6093      	str	r3, [r2, #8]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ef8:	d101      	bne.n	8001efe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f48:	d101      	bne.n	8001f4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f70:	f043 0201 	orr.w	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <LL_ADC_IsEnabled+0x18>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <LL_ADC_IsEnabled+0x1a>
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fbe:	f043 0204 	orr.w	r2, r3, #4
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d101      	bne.n	8001fea <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b08      	cmp	r3, #8
 800200a:	d101      	bne.n	8002010 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e1a9      	b.n	800238e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	2b00      	cmp	r3, #0
 8002046:	d109      	bne.n	800205c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff fae9 	bl	8001620 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff3f 	bl	8001ee4 <LL_ADC_IsDeepPowerDownEnabled>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d004      	beq.n	8002076 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff25 	bl	8001ec0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff5a 	bl	8001f34 <LL_ADC_IsInternalRegulatorEnabled>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d115      	bne.n	80020b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff ff3e 	bl	8001f0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002090:	4b9c      	ldr	r3, [pc, #624]	; (8002304 <HAL_ADC_Init+0x2e4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	099b      	lsrs	r3, r3, #6
 8002096:	4a9c      	ldr	r2, [pc, #624]	; (8002308 <HAL_ADC_Init+0x2e8>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	3301      	adds	r3, #1
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020a4:	e002      	b.n	80020ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f9      	bne.n	80020a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ff3c 	bl	8001f34 <LL_ADC_IsInternalRegulatorEnabled>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10d      	bne.n	80020de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	f043 0210 	orr.w	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d2:	f043 0201 	orr.w	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff ff75 	bl	8001fd2 <LL_ADC_REG_IsConversionOngoing>
 80020e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f040 8142 	bne.w	800237c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 813e 	bne.w	800237c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002108:	f043 0202 	orr.w	r2, r3, #2
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff35 	bl	8001f84 <LL_ADC_IsEnabled>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d141      	bne.n	80021a4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002128:	d004      	beq.n	8002134 <HAL_ADC_Init+0x114>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a77      	ldr	r2, [pc, #476]	; (800230c <HAL_ADC_Init+0x2ec>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d10f      	bne.n	8002154 <HAL_ADC_Init+0x134>
 8002134:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002138:	f7ff ff24 	bl	8001f84 <LL_ADC_IsEnabled>
 800213c:	4604      	mov	r4, r0
 800213e:	4873      	ldr	r0, [pc, #460]	; (800230c <HAL_ADC_Init+0x2ec>)
 8002140:	f7ff ff20 	bl	8001f84 <LL_ADC_IsEnabled>
 8002144:	4603      	mov	r3, r0
 8002146:	4323      	orrs	r3, r4
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	e012      	b.n	800217a <HAL_ADC_Init+0x15a>
 8002154:	486e      	ldr	r0, [pc, #440]	; (8002310 <HAL_ADC_Init+0x2f0>)
 8002156:	f7ff ff15 	bl	8001f84 <LL_ADC_IsEnabled>
 800215a:	4604      	mov	r4, r0
 800215c:	486d      	ldr	r0, [pc, #436]	; (8002314 <HAL_ADC_Init+0x2f4>)
 800215e:	f7ff ff11 	bl	8001f84 <LL_ADC_IsEnabled>
 8002162:	4603      	mov	r3, r0
 8002164:	431c      	orrs	r4, r3
 8002166:	486c      	ldr	r0, [pc, #432]	; (8002318 <HAL_ADC_Init+0x2f8>)
 8002168:	f7ff ff0c 	bl	8001f84 <LL_ADC_IsEnabled>
 800216c:	4603      	mov	r3, r0
 800216e:	4323      	orrs	r3, r4
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d012      	beq.n	80021a4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002186:	d004      	beq.n	8002192 <HAL_ADC_Init+0x172>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a5f      	ldr	r2, [pc, #380]	; (800230c <HAL_ADC_Init+0x2ec>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_ADC_Init+0x176>
 8002192:	4a62      	ldr	r2, [pc, #392]	; (800231c <HAL_ADC_Init+0x2fc>)
 8002194:	e000      	b.n	8002198 <HAL_ADC_Init+0x178>
 8002196:	4a62      	ldr	r2, [pc, #392]	; (8002320 <HAL_ADC_Init+0x300>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	f7ff fcfe 	bl	8001ba0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7f5b      	ldrb	r3, [r3, #29]
 80021a8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021ae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021b4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021ba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021c2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d106      	bne.n	80021e0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	3b01      	subs	r3, #1
 80021d8:	045b      	lsls	r3, r3, #17
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d009      	beq.n	80021fc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	4b48      	ldr	r3, [pc, #288]	; (8002324 <HAL_ADC_Init+0x304>)
 8002204:	4013      	ands	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	69b9      	ldr	r1, [r7, #24]
 800220c:	430b      	orrs	r3, r1
 800220e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fee4 	bl	8001ff8 <LL_ADC_INJ_IsConversionOngoing>
 8002230:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d17f      	bne.n	8002338 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d17c      	bne.n	8002338 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002242:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800224a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800225a:	f023 0302 	bic.w	r3, r3, #2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	69b9      	ldr	r1, [r7, #24]
 8002264:	430b      	orrs	r3, r1
 8002266:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d017      	beq.n	80022a0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800227e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002288:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800228c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6911      	ldr	r1, [r2, #16]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	430b      	orrs	r3, r1
 800229a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800229e:	e013      	b.n	80022c8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80022c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022c4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d12a      	bne.n	8002328 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022e8:	4311      	orrs	r1, r2
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022ee:	4311      	orrs	r1, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022f4:	430a      	orrs	r2, r1
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	611a      	str	r2, [r3, #16]
 8002302:	e019      	b.n	8002338 <HAL_ADC_Init+0x318>
 8002304:	20000004 	.word	0x20000004
 8002308:	053e2d63 	.word	0x053e2d63
 800230c:	50000100 	.word	0x50000100
 8002310:	50000400 	.word	0x50000400
 8002314:	50000500 	.word	0x50000500
 8002318:	50000600 	.word	0x50000600
 800231c:	50000300 	.word	0x50000300
 8002320:	50000700 	.word	0x50000700
 8002324:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0201 	bic.w	r2, r2, #1
 8002336:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d10c      	bne.n	800235a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f023 010f 	bic.w	r1, r3, #15
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	1e5a      	subs	r2, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
 8002358:	e007      	b.n	800236a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 020f 	bic.w	r2, r2, #15
 8002368:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236e:	f023 0303 	bic.w	r3, r3, #3
 8002372:	f043 0201 	orr.w	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	65da      	str	r2, [r3, #92]	; 0x5c
 800237a:	e007      	b.n	800238c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	f043 0210 	orr.w	r2, r3, #16
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800238c:	7ffb      	ldrb	r3, [r7, #31]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd90      	pop	{r4, r7, pc}
 8002396:	bf00      	nop

08002398 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ac:	d004      	beq.n	80023b8 <HAL_ADC_Start_DMA+0x20>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a5a      	ldr	r2, [pc, #360]	; (800251c <HAL_ADC_Start_DMA+0x184>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_Start_DMA+0x24>
 80023b8:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_ADC_Start_DMA+0x188>)
 80023ba:	e000      	b.n	80023be <HAL_ADC_Start_DMA+0x26>
 80023bc:	4b59      	ldr	r3, [pc, #356]	; (8002524 <HAL_ADC_Start_DMA+0x18c>)
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fd62 	bl	8001e88 <LL_ADC_GetMultimode>
 80023c4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fe01 	bl	8001fd2 <LL_ADC_REG_IsConversionOngoing>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f040 809b 	bne.w	800250e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_Start_DMA+0x4e>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e096      	b.n	8002514 <HAL_ADC_Start_DMA+0x17c>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a4d      	ldr	r2, [pc, #308]	; (8002528 <HAL_ADC_Start_DMA+0x190>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d008      	beq.n	800240a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b05      	cmp	r3, #5
 8002402:	d002      	beq.n	800240a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	2b09      	cmp	r3, #9
 8002408:	d17a      	bne.n	8002500 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 ff60 	bl	80032d0 <ADC_Enable>
 8002410:	4603      	mov	r3, r0
 8002412:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002414:	7dfb      	ldrb	r3, [r7, #23]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d16d      	bne.n	80024f6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a3a      	ldr	r2, [pc, #232]	; (800251c <HAL_ADC_Start_DMA+0x184>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d009      	beq.n	800244c <HAL_ADC_Start_DMA+0xb4>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a3b      	ldr	r2, [pc, #236]	; (800252c <HAL_ADC_Start_DMA+0x194>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d002      	beq.n	8002448 <HAL_ADC_Start_DMA+0xb0>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	e003      	b.n	8002450 <HAL_ADC_Start_DMA+0xb8>
 8002448:	4b39      	ldr	r3, [pc, #228]	; (8002530 <HAL_ADC_Start_DMA+0x198>)
 800244a:	e001      	b.n	8002450 <HAL_ADC_Start_DMA+0xb8>
 800244c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	4293      	cmp	r3, r2
 8002456:	d002      	beq.n	800245e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d105      	bne.n	800246a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002462:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d006      	beq.n	8002484 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800247a:	f023 0206 	bic.w	r2, r3, #6
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	661a      	str	r2, [r3, #96]	; 0x60
 8002482:	e002      	b.n	800248a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248e:	4a29      	ldr	r2, [pc, #164]	; (8002534 <HAL_ADC_Start_DMA+0x19c>)
 8002490:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	4a28      	ldr	r2, [pc, #160]	; (8002538 <HAL_ADC_Start_DMA+0x1a0>)
 8002498:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249e:	4a27      	ldr	r2, [pc, #156]	; (800253c <HAL_ADC_Start_DMA+0x1a4>)
 80024a0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	221c      	movs	r2, #28
 80024a8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 0210 	orr.w	r2, r2, #16
 80024c0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3340      	adds	r3, #64	; 0x40
 80024dc:	4619      	mov	r1, r3
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f001 fb37 	bl	8003b54 <HAL_DMA_Start_IT>
 80024e6:	4603      	mov	r3, r0
 80024e8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fd5b 	bl	8001faa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80024f4:	e00d      	b.n	8002512 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80024fe:	e008      	b.n	8002512 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800250c:	e001      	b.n	8002512 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800250e:	2302      	movs	r3, #2
 8002510:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002512:	7dfb      	ldrb	r3, [r7, #23]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	50000100 	.word	0x50000100
 8002520:	50000300 	.word	0x50000300
 8002524:	50000700 	.word	0x50000700
 8002528:	50000600 	.word	0x50000600
 800252c:	50000500 	.word	0x50000500
 8002530:	50000400 	.word	0x50000400
 8002534:	080033fd 	.word	0x080033fd
 8002538:	080034d5 	.word	0x080034d5
 800253c:	080034f1 	.word	0x080034f1

08002540 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	; 0x28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002564:	d004      	beq.n	8002570 <HAL_ADC_IRQHandler+0x30>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a8e      	ldr	r2, [pc, #568]	; (80027a4 <HAL_ADC_IRQHandler+0x264>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d101      	bne.n	8002574 <HAL_ADC_IRQHandler+0x34>
 8002570:	4b8d      	ldr	r3, [pc, #564]	; (80027a8 <HAL_ADC_IRQHandler+0x268>)
 8002572:	e000      	b.n	8002576 <HAL_ADC_IRQHandler+0x36>
 8002574:	4b8d      	ldr	r3, [pc, #564]	; (80027ac <HAL_ADC_IRQHandler+0x26c>)
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fc86 	bl	8001e88 <LL_ADC_GetMultimode>
 800257c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d017      	beq.n	80025b8 <HAL_ADC_IRQHandler+0x78>
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d012      	beq.n	80025b8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b00      	cmp	r3, #0
 800259c:	d105      	bne.n	80025aa <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f001 f808 	bl	80035c0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2202      	movs	r2, #2
 80025b6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d004      	beq.n	80025cc <HAL_ADC_IRQHandler+0x8c>
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10b      	bne.n	80025e4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 8094 	beq.w	8002700 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 808e 	beq.w	8002700 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d105      	bne.n	80025fc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fb9f 	bl	8001d44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d072      	beq.n	80026f2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a64      	ldr	r2, [pc, #400]	; (80027a4 <HAL_ADC_IRQHandler+0x264>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d009      	beq.n	800262a <HAL_ADC_IRQHandler+0xea>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a65      	ldr	r2, [pc, #404]	; (80027b0 <HAL_ADC_IRQHandler+0x270>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d002      	beq.n	8002626 <HAL_ADC_IRQHandler+0xe6>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	e003      	b.n	800262e <HAL_ADC_IRQHandler+0xee>
 8002626:	4b63      	ldr	r3, [pc, #396]	; (80027b4 <HAL_ADC_IRQHandler+0x274>)
 8002628:	e001      	b.n	800262e <HAL_ADC_IRQHandler+0xee>
 800262a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	4293      	cmp	r3, r2
 8002634:	d008      	beq.n	8002648 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b05      	cmp	r3, #5
 8002640:	d002      	beq.n	8002648 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b09      	cmp	r3, #9
 8002646:	d104      	bne.n	8002652 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	623b      	str	r3, [r7, #32]
 8002650:	e014      	b.n	800267c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a53      	ldr	r2, [pc, #332]	; (80027a4 <HAL_ADC_IRQHandler+0x264>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d009      	beq.n	8002670 <HAL_ADC_IRQHandler+0x130>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a53      	ldr	r2, [pc, #332]	; (80027b0 <HAL_ADC_IRQHandler+0x270>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d002      	beq.n	800266c <HAL_ADC_IRQHandler+0x12c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	e003      	b.n	8002674 <HAL_ADC_IRQHandler+0x134>
 800266c:	4b51      	ldr	r3, [pc, #324]	; (80027b4 <HAL_ADC_IRQHandler+0x274>)
 800266e:	e001      	b.n	8002674 <HAL_ADC_IRQHandler+0x134>
 8002670:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002674:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d135      	bne.n	80026f2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b08      	cmp	r3, #8
 8002692:	d12e      	bne.n	80026f2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fc9a 	bl	8001fd2 <LL_ADC_REG_IsConversionOngoing>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d11a      	bne.n	80026da <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 020c 	bic.w	r2, r2, #12
 80026b2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d112      	bne.n	80026f2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d0:	f043 0201 	orr.w	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80026d8:	e00b      	b.n	80026f2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026de:	f043 0210 	orr.w	r2, r3, #16
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ea:	f043 0201 	orr.w	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f984 	bl	8002a00 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	220c      	movs	r2, #12
 80026fe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d004      	beq.n	8002714 <HAL_ADC_IRQHandler+0x1d4>
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	f003 0320 	and.w	r3, r3, #32
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10b      	bne.n	800272c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80b3 	beq.w	8002886 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 80ad 	beq.w	8002886 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b00      	cmp	r3, #0
 8002736:	d105      	bne.n	8002744 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fb3a 	bl	8001dc2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800274e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff faf5 	bl	8001d44 <LL_ADC_REG_IsTriggerSourceSWStart>
 800275a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a10      	ldr	r2, [pc, #64]	; (80027a4 <HAL_ADC_IRQHandler+0x264>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d009      	beq.n	800277a <HAL_ADC_IRQHandler+0x23a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <HAL_ADC_IRQHandler+0x270>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d002      	beq.n	8002776 <HAL_ADC_IRQHandler+0x236>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	e003      	b.n	800277e <HAL_ADC_IRQHandler+0x23e>
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <HAL_ADC_IRQHandler+0x274>)
 8002778:	e001      	b.n	800277e <HAL_ADC_IRQHandler+0x23e>
 800277a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	4293      	cmp	r3, r2
 8002784:	d008      	beq.n	8002798 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2b06      	cmp	r3, #6
 8002790:	d002      	beq.n	8002798 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b07      	cmp	r3, #7
 8002796:	d10f      	bne.n	80027b8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	623b      	str	r3, [r7, #32]
 80027a0:	e01f      	b.n	80027e2 <HAL_ADC_IRQHandler+0x2a2>
 80027a2:	bf00      	nop
 80027a4:	50000100 	.word	0x50000100
 80027a8:	50000300 	.word	0x50000300
 80027ac:	50000700 	.word	0x50000700
 80027b0:	50000500 	.word	0x50000500
 80027b4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a8b      	ldr	r2, [pc, #556]	; (80029ec <HAL_ADC_IRQHandler+0x4ac>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d009      	beq.n	80027d6 <HAL_ADC_IRQHandler+0x296>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a8a      	ldr	r2, [pc, #552]	; (80029f0 <HAL_ADC_IRQHandler+0x4b0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d002      	beq.n	80027d2 <HAL_ADC_IRQHandler+0x292>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	e003      	b.n	80027da <HAL_ADC_IRQHandler+0x29a>
 80027d2:	4b88      	ldr	r3, [pc, #544]	; (80029f4 <HAL_ADC_IRQHandler+0x4b4>)
 80027d4:	e001      	b.n	80027da <HAL_ADC_IRQHandler+0x29a>
 80027d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027da:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d047      	beq.n	8002878 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <HAL_ADC_IRQHandler+0x2c2>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d03f      	beq.n	8002878 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d13a      	bne.n	8002878 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	d133      	bne.n	8002878 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d12e      	bne.n	8002878 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fbea 	bl	8001ff8 <LL_ADC_INJ_IsConversionOngoing>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d11a      	bne.n	8002860 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002838:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d112      	bne.n	8002878 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	65da      	str	r2, [r3, #92]	; 0x5c
 800285e:	e00b      	b.n	8002878 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	f043 0210 	orr.w	r2, r3, #16
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002870:	f043 0201 	orr.w	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fe79 	bl	8003570 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2260      	movs	r2, #96	; 0x60
 8002884:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288c:	2b00      	cmp	r3, #0
 800288e:	d011      	beq.n	80028b4 <HAL_ADC_IRQHandler+0x374>
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00c      	beq.n	80028b4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f8be 	bl	8002a28 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2280      	movs	r2, #128	; 0x80
 80028b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d012      	beq.n	80028e4 <HAL_ADC_IRQHandler+0x3a4>
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00d      	beq.n	80028e4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028cc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fe5f 	bl	8003598 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d012      	beq.n	8002914 <HAL_ADC_IRQHandler+0x3d4>
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00d      	beq.n	8002914 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 fe51 	bl	80035ac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002912:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f003 0310 	and.w	r3, r3, #16
 800291a:	2b00      	cmp	r3, #0
 800291c:	d043      	beq.n	80029a6 <HAL_ADC_IRQHandler+0x466>
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b00      	cmp	r3, #0
 8002926:	d03e      	beq.n	80029a6 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002930:	2301      	movs	r3, #1
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
 8002934:	e021      	b.n	800297a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d015      	beq.n	8002968 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002944:	d004      	beq.n	8002950 <HAL_ADC_IRQHandler+0x410>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a28      	ldr	r2, [pc, #160]	; (80029ec <HAL_ADC_IRQHandler+0x4ac>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d101      	bne.n	8002954 <HAL_ADC_IRQHandler+0x414>
 8002950:	4b29      	ldr	r3, [pc, #164]	; (80029f8 <HAL_ADC_IRQHandler+0x4b8>)
 8002952:	e000      	b.n	8002956 <HAL_ADC_IRQHandler+0x416>
 8002954:	4b29      	ldr	r3, [pc, #164]	; (80029fc <HAL_ADC_IRQHandler+0x4bc>)
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff faa4 	bl	8001ea4 <LL_ADC_GetMultiDMATransfer>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002962:	2301      	movs	r3, #1
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
 8002966:	e008      	b.n	800297a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002976:	2301      	movs	r3, #1
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	2b01      	cmp	r3, #1
 800297e:	d10e      	bne.n	800299e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002990:	f043 0202 	orr.w	r2, r3, #2
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f84f 	bl	8002a3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2210      	movs	r2, #16
 80029a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d018      	beq.n	80029e2 <HAL_ADC_IRQHandler+0x4a2>
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d013      	beq.n	80029e2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029be:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ca:	f043 0208 	orr.w	r2, r3, #8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029da:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fdd1 	bl	8003584 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80029e2:	bf00      	nop
 80029e4:	3728      	adds	r7, #40	; 0x28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	50000100 	.word	0x50000100
 80029f0:	50000500 	.word	0x50000500
 80029f4:	50000400 	.word	0x50000400
 80029f8:	50000300 	.word	0x50000300
 80029fc:	50000700 	.word	0x50000700

08002a00 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b0b6      	sub	sp, #216	; 0xd8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d102      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x24>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	f000 bc13 	b.w	800329a <HAL_ADC_ConfigChannel+0x84a>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff faa6 	bl	8001fd2 <LL_ADC_REG_IsConversionOngoing>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f040 83f3 	bne.w	8003274 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6859      	ldr	r1, [r3, #4]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f7ff f965 	bl	8001d6a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fa94 	bl	8001fd2 <LL_ADC_REG_IsConversionOngoing>
 8002aaa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff faa0 	bl	8001ff8 <LL_ADC_INJ_IsConversionOngoing>
 8002ab8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002abc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f040 81d9 	bne.w	8002e78 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ac6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f040 81d4 	bne.w	8002e78 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ad8:	d10f      	bne.n	8002afa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f7ff f97f 	bl	8001de8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff f913 	bl	8001d1e <LL_ADC_SetSamplingTimeCommonConfig>
 8002af8:	e00e      	b.n	8002b18 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6818      	ldr	r0, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	6819      	ldr	r1, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	461a      	mov	r2, r3
 8002b08:	f7ff f96e 	bl	8001de8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff f903 	bl	8001d1e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	695a      	ldr	r2, [r3, #20]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	08db      	lsrs	r3, r3, #3
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d022      	beq.n	8002b80 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6919      	ldr	r1, [r3, #16]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b4a:	f7ff f85d 	bl	8001c08 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6919      	ldr	r1, [r3, #16]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f7ff f8a9 	bl	8001cb2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d102      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x126>
 8002b70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b74:	e000      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x128>
 8002b76:	2300      	movs	r3, #0
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f7ff f8b5 	bl	8001ce8 <LL_ADC_SetOffsetSaturation>
 8002b7e:	e17b      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2100      	movs	r1, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff f862 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10a      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x15c>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff f857 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	0e9b      	lsrs	r3, r3, #26
 8002ba6:	f003 021f 	and.w	r2, r3, #31
 8002baa:	e01e      	b.n	8002bea <HAL_ADC_ConfigChannel+0x19a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff f84c 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002bda:	2320      	movs	r3, #32
 8002bdc:	e004      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002bde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d105      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x1b2>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	0e9b      	lsrs	r3, r3, #26
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	e018      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x1e4>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002c26:	2320      	movs	r3, #32
 8002c28:	e004      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002c2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d106      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff f81b 	bl	8001c7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe ffff 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10a      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x222>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2101      	movs	r1, #1
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe fff4 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	0e9b      	lsrs	r3, r3, #26
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	e01e      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x260>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2101      	movs	r1, #1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe ffe9 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	e004      	b.n	8002cae <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002ca4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d105      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x278>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	0e9b      	lsrs	r3, r3, #26
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	e018      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x2aa>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002cdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ce0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002ce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002cec:	2320      	movs	r3, #32
 8002cee:	e004      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002cf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d106      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2200      	movs	r2, #0
 8002d04:	2101      	movs	r1, #1
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe ffb8 	bl	8001c7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2102      	movs	r1, #2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe ff9c 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10a      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x2e8>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2102      	movs	r1, #2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe ff91 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	0e9b      	lsrs	r3, r3, #26
 8002d32:	f003 021f 	and.w	r2, r3, #31
 8002d36:	e01e      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x326>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fe ff86 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002d66:	2320      	movs	r3, #32
 8002d68:	e004      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002d6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d105      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x33e>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	0e9b      	lsrs	r3, r3, #26
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	e016      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x36c>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002da0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002da2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002da6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002dae:	2320      	movs	r3, #32
 8002db0:	e004      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d106      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fe ff57 	bl	8001c7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2103      	movs	r1, #3
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe ff3b 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10a      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x3aa>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2103      	movs	r1, #3
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe ff30 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002df0:	4603      	mov	r3, r0
 8002df2:	0e9b      	lsrs	r3, r3, #26
 8002df4:	f003 021f 	and.w	r2, r3, #31
 8002df8:	e017      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x3da>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2103      	movs	r1, #3
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fe ff25 	bl	8001c50 <LL_ADC_GetOffsetChannel>
 8002e06:	4603      	mov	r3, r0
 8002e08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e14:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	e003      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002e20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d105      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x3f2>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	0e9b      	lsrs	r3, r3, #26
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	e011      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x416>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e52:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	e003      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d106      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2103      	movs	r1, #3
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe ff02 	bl	8001c7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff f881 	bl	8001f84 <LL_ADC_IsEnabled>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f040 813d 	bne.w	8003104 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6819      	ldr	r1, [r3, #0]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	461a      	mov	r2, r3
 8002e98:	f7fe ffd2 	bl	8001e40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4aa2      	ldr	r2, [pc, #648]	; (800312c <HAL_ADC_ConfigChannel+0x6dc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	f040 812e 	bne.w	8003104 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x480>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	0e9b      	lsrs	r3, r3, #26
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	2b09      	cmp	r3, #9
 8002ec6:	bf94      	ite	ls
 8002ec8:	2301      	movls	r3, #1
 8002eca:	2300      	movhi	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	e019      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x4b4>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002ee8:	2320      	movs	r3, #32
 8002eea:	e003      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002eec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	2b09      	cmp	r3, #9
 8002efc:	bf94      	ite	ls
 8002efe:	2301      	movls	r3, #1
 8002f00:	2300      	movhi	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d079      	beq.n	8002ffc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d107      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x4d4>
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	0e9b      	lsrs	r3, r3, #26
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	069b      	lsls	r3, r3, #26
 8002f1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f22:	e015      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x500>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f34:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002f3c:	2320      	movs	r3, #32
 8002f3e:	e003      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	069b      	lsls	r3, r3, #26
 8002f4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d109      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x520>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	0e9b      	lsrs	r3, r3, #26
 8002f62:	3301      	adds	r3, #1
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	2101      	movs	r1, #1
 8002f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6e:	e017      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0x550>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f80:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002f88:	2320      	movs	r3, #32
 8002f8a:	e003      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002f8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	3301      	adds	r3, #1
 8002f96:	f003 031f 	and.w	r3, r3, #31
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	ea42 0103 	orr.w	r1, r2, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10a      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x576>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	0e9b      	lsrs	r3, r3, #26
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	f003 021f 	and.w	r2, r3, #31
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	051b      	lsls	r3, r3, #20
 8002fc4:	e018      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x5a8>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002fde:	2320      	movs	r3, #32
 8002fe0:	e003      	b.n	8002fea <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	e07e      	b.n	80030fa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003004:	2b00      	cmp	r3, #0
 8003006:	d107      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x5c8>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	0e9b      	lsrs	r3, r3, #26
 800300e:	3301      	adds	r3, #1
 8003010:	069b      	lsls	r3, r3, #26
 8003012:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003016:	e015      	b.n	8003044 <HAL_ADC_ConfigChannel+0x5f4>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003020:	fa93 f3a3 	rbit	r3, r3
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800302a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003030:	2320      	movs	r3, #32
 8003032:	e003      	b.n	800303c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	fab3 f383 	clz	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	3301      	adds	r3, #1
 800303e:	069b      	lsls	r3, r3, #26
 8003040:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304c:	2b00      	cmp	r3, #0
 800304e:	d109      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x614>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	0e9b      	lsrs	r3, r3, #26
 8003056:	3301      	adds	r3, #1
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	2101      	movs	r1, #1
 800305e:	fa01 f303 	lsl.w	r3, r1, r3
 8003062:	e017      	b.n	8003094 <HAL_ADC_ConfigChannel+0x644>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	61fb      	str	r3, [r7, #28]
  return result;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800307c:	2320      	movs	r3, #32
 800307e:	e003      	b.n	8003088 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	3301      	adds	r3, #1
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	2101      	movs	r1, #1
 8003090:	fa01 f303 	lsl.w	r3, r1, r3
 8003094:	ea42 0103 	orr.w	r1, r2, r3
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10d      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x670>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	0e9b      	lsrs	r3, r3, #26
 80030aa:	3301      	adds	r3, #1
 80030ac:	f003 021f 	and.w	r2, r3, #31
 80030b0:	4613      	mov	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4413      	add	r3, r2
 80030b6:	3b1e      	subs	r3, #30
 80030b8:	051b      	lsls	r3, r3, #20
 80030ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030be:	e01b      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x6a8>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	613b      	str	r3, [r7, #16]
  return result;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80030d8:	2320      	movs	r3, #32
 80030da:	e003      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	3301      	adds	r3, #1
 80030e6:	f003 021f 	and.w	r2, r3, #31
 80030ea:	4613      	mov	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4413      	add	r3, r2
 80030f0:	3b1e      	subs	r3, #30
 80030f2:	051b      	lsls	r3, r3, #20
 80030f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030f8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030fe:	4619      	mov	r1, r3
 8003100:	f7fe fe72 	bl	8001de8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b09      	ldr	r3, [pc, #36]	; (8003130 <HAL_ADC_ConfigChannel+0x6e0>)
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80be 	beq.w	800328e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800311a:	d004      	beq.n	8003126 <HAL_ADC_ConfigChannel+0x6d6>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a04      	ldr	r2, [pc, #16]	; (8003134 <HAL_ADC_ConfigChannel+0x6e4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d10a      	bne.n	800313c <HAL_ADC_ConfigChannel+0x6ec>
 8003126:	4b04      	ldr	r3, [pc, #16]	; (8003138 <HAL_ADC_ConfigChannel+0x6e8>)
 8003128:	e009      	b.n	800313e <HAL_ADC_ConfigChannel+0x6ee>
 800312a:	bf00      	nop
 800312c:	407f0000 	.word	0x407f0000
 8003130:	80080000 	.word	0x80080000
 8003134:	50000100 	.word	0x50000100
 8003138:	50000300 	.word	0x50000300
 800313c:	4b59      	ldr	r3, [pc, #356]	; (80032a4 <HAL_ADC_ConfigChannel+0x854>)
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fd54 	bl	8001bec <LL_ADC_GetCommonPathInternalCh>
 8003144:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a56      	ldr	r2, [pc, #344]	; (80032a8 <HAL_ADC_ConfigChannel+0x858>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d004      	beq.n	800315c <HAL_ADC_ConfigChannel+0x70c>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a55      	ldr	r2, [pc, #340]	; (80032ac <HAL_ADC_ConfigChannel+0x85c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d13a      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800315c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003160:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d134      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003170:	d005      	beq.n	800317e <HAL_ADC_ConfigChannel+0x72e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a4e      	ldr	r2, [pc, #312]	; (80032b0 <HAL_ADC_ConfigChannel+0x860>)
 8003178:	4293      	cmp	r3, r2
 800317a:	f040 8085 	bne.w	8003288 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003186:	d004      	beq.n	8003192 <HAL_ADC_ConfigChannel+0x742>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a49      	ldr	r2, [pc, #292]	; (80032b4 <HAL_ADC_ConfigChannel+0x864>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d101      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x746>
 8003192:	4a49      	ldr	r2, [pc, #292]	; (80032b8 <HAL_ADC_ConfigChannel+0x868>)
 8003194:	e000      	b.n	8003198 <HAL_ADC_ConfigChannel+0x748>
 8003196:	4a43      	ldr	r2, [pc, #268]	; (80032a4 <HAL_ADC_ConfigChannel+0x854>)
 8003198:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800319c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031a0:	4619      	mov	r1, r3
 80031a2:	4610      	mov	r0, r2
 80031a4:	f7fe fd0f 	bl	8001bc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031a8:	4b44      	ldr	r3, [pc, #272]	; (80032bc <HAL_ADC_ConfigChannel+0x86c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	099b      	lsrs	r3, r3, #6
 80031ae:	4a44      	ldr	r2, [pc, #272]	; (80032c0 <HAL_ADC_ConfigChannel+0x870>)
 80031b0:	fba2 2303 	umull	r2, r3, r2, r3
 80031b4:	099b      	lsrs	r3, r3, #6
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031c2:	e002      	b.n	80031ca <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f9      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031d0:	e05a      	b.n	8003288 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a3b      	ldr	r2, [pc, #236]	; (80032c4 <HAL_ADC_ConfigChannel+0x874>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d125      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d11f      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a31      	ldr	r2, [pc, #196]	; (80032b4 <HAL_ADC_ConfigChannel+0x864>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d104      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x7ac>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a34      	ldr	r2, [pc, #208]	; (80032c8 <HAL_ADC_ConfigChannel+0x878>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d047      	beq.n	800328c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003204:	d004      	beq.n	8003210 <HAL_ADC_ConfigChannel+0x7c0>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a2a      	ldr	r2, [pc, #168]	; (80032b4 <HAL_ADC_ConfigChannel+0x864>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d101      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x7c4>
 8003210:	4a29      	ldr	r2, [pc, #164]	; (80032b8 <HAL_ADC_ConfigChannel+0x868>)
 8003212:	e000      	b.n	8003216 <HAL_ADC_ConfigChannel+0x7c6>
 8003214:	4a23      	ldr	r2, [pc, #140]	; (80032a4 <HAL_ADC_ConfigChannel+0x854>)
 8003216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800321a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800321e:	4619      	mov	r1, r3
 8003220:	4610      	mov	r0, r2
 8003222:	f7fe fcd0 	bl	8001bc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003226:	e031      	b.n	800328c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a27      	ldr	r2, [pc, #156]	; (80032cc <HAL_ADC_ConfigChannel+0x87c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d12d      	bne.n	800328e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003232:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d127      	bne.n	800328e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <HAL_ADC_ConfigChannel+0x864>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d022      	beq.n	800328e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003250:	d004      	beq.n	800325c <HAL_ADC_ConfigChannel+0x80c>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a17      	ldr	r2, [pc, #92]	; (80032b4 <HAL_ADC_ConfigChannel+0x864>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d101      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x810>
 800325c:	4a16      	ldr	r2, [pc, #88]	; (80032b8 <HAL_ADC_ConfigChannel+0x868>)
 800325e:	e000      	b.n	8003262 <HAL_ADC_ConfigChannel+0x812>
 8003260:	4a10      	ldr	r2, [pc, #64]	; (80032a4 <HAL_ADC_ConfigChannel+0x854>)
 8003262:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003266:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800326a:	4619      	mov	r1, r3
 800326c:	4610      	mov	r0, r2
 800326e:	f7fe fcaa 	bl	8001bc6 <LL_ADC_SetCommonPathInternalCh>
 8003272:	e00c      	b.n	800328e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003286:	e002      	b.n	800328e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003288:	bf00      	nop
 800328a:	e000      	b.n	800328e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800328c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003296:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800329a:	4618      	mov	r0, r3
 800329c:	37d8      	adds	r7, #216	; 0xd8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	50000700 	.word	0x50000700
 80032a8:	c3210000 	.word	0xc3210000
 80032ac:	90c00010 	.word	0x90c00010
 80032b0:	50000600 	.word	0x50000600
 80032b4:	50000100 	.word	0x50000100
 80032b8:	50000300 	.word	0x50000300
 80032bc:	20000004 	.word	0x20000004
 80032c0:	053e2d63 	.word	0x053e2d63
 80032c4:	c7520000 	.word	0xc7520000
 80032c8:	50000500 	.word	0x50000500
 80032cc:	cb840000 	.word	0xcb840000

080032d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80032d8:	2300      	movs	r3, #0
 80032da:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe fe4f 	bl	8001f84 <LL_ADC_IsEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d176      	bne.n	80033da <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	4b3c      	ldr	r3, [pc, #240]	; (80033e4 <ADC_Enable+0x114>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00d      	beq.n	8003316 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fe:	f043 0210 	orr.w	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330a:	f043 0201 	orr.w	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e062      	b.n	80033dc <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe fe1e 	bl	8001f5c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003328:	d004      	beq.n	8003334 <ADC_Enable+0x64>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a2e      	ldr	r2, [pc, #184]	; (80033e8 <ADC_Enable+0x118>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d101      	bne.n	8003338 <ADC_Enable+0x68>
 8003334:	4b2d      	ldr	r3, [pc, #180]	; (80033ec <ADC_Enable+0x11c>)
 8003336:	e000      	b.n	800333a <ADC_Enable+0x6a>
 8003338:	4b2d      	ldr	r3, [pc, #180]	; (80033f0 <ADC_Enable+0x120>)
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe fc56 	bl	8001bec <LL_ADC_GetCommonPathInternalCh>
 8003340:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003346:	2b00      	cmp	r3, #0
 8003348:	d013      	beq.n	8003372 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800334a:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <ADC_Enable+0x124>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	099b      	lsrs	r3, r3, #6
 8003350:	4a29      	ldr	r2, [pc, #164]	; (80033f8 <ADC_Enable+0x128>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	4613      	mov	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003364:	e002      	b.n	800336c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	3b01      	subs	r3, #1
 800336a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f9      	bne.n	8003366 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003372:	f7fe fc09 	bl	8001b88 <HAL_GetTick>
 8003376:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003378:	e028      	b.n	80033cc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe fe00 	bl	8001f84 <LL_ADC_IsEnabled>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d104      	bne.n	8003394 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe fde4 	bl	8001f5c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003394:	f7fe fbf8 	bl	8001b88 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d914      	bls.n	80033cc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d00d      	beq.n	80033cc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	f043 0210 	orr.w	r2, r3, #16
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c0:	f043 0201 	orr.w	r2, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e007      	b.n	80033dc <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d1cf      	bne.n	800337a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	8000003f 	.word	0x8000003f
 80033e8:	50000100 	.word	0x50000100
 80033ec:	50000300 	.word	0x50000300
 80033f0:	50000700 	.word	0x50000700
 80033f4:	20000004 	.word	0x20000004
 80033f8:	053e2d63 	.word	0x053e2d63

080033fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003408:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003412:	2b00      	cmp	r3, #0
 8003414:	d14b      	bne.n	80034ae <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d021      	beq.n	8003474 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7fe fc85 	bl	8001d44 <LL_ADC_REG_IsTriggerSourceSWStart>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d032      	beq.n	80034a6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d12b      	bne.n	80034a6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003452:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d11f      	bne.n	80034a6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346a:	f043 0201 	orr.w	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	65da      	str	r2, [r3, #92]	; 0x5c
 8003472:	e018      	b.n	80034a6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d111      	bne.n	80034a6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d105      	bne.n	80034a6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f7ff faaa 	bl	8002a00 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034ac:	e00e      	b.n	80034cc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f7ff fabe 	bl	8002a3c <HAL_ADC_ErrorCallback>
}
 80034c0:	e004      	b.n	80034cc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	4798      	blx	r3
}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f7ff fa96 	bl	8002a14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034e8:	bf00      	nop
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003502:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350e:	f043 0204 	orr.w	r2, r3, #4
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff fa90 	bl	8002a3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <LL_ADC_IsEnabled>:
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <LL_ADC_IsEnabled+0x18>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <LL_ADC_IsEnabled+0x1a>
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <LL_ADC_REG_IsConversionOngoing>:
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b04      	cmp	r3, #4
 800355c:	d101      	bne.n	8003562 <LL_ADC_REG_IsConversionOngoing+0x18>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b0a1      	sub	sp, #132	; 0x84
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e0e7      	b.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80035fa:	2300      	movs	r3, #0
 80035fc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80035fe:	2300      	movs	r3, #0
 8003600:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800360a:	d102      	bne.n	8003612 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800360c:	4b6f      	ldr	r3, [pc, #444]	; (80037cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	e009      	b.n	8003626 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a6e      	ldr	r2, [pc, #440]	; (80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d102      	bne.n	8003622 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800361c:	4b6d      	ldr	r3, [pc, #436]	; (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	e001      	b.n	8003626 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003630:	f043 0220 	orr.w	r2, r3, #32
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0be      	b.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff ff7f 	bl	800354a <LL_ADC_REG_IsConversionOngoing>
 800364c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff ff79 	bl	800354a <LL_ADC_REG_IsConversionOngoing>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	f040 80a0 	bne.w	80037a0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 809c 	bne.w	80037a0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003670:	d004      	beq.n	800367c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a55      	ldr	r2, [pc, #340]	; (80037cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d101      	bne.n	8003680 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800367c:	4b56      	ldr	r3, [pc, #344]	; (80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800367e:	e000      	b.n	8003682 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003680:	4b56      	ldr	r3, [pc, #344]	; (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003682:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d04b      	beq.n	8003724 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800368c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800369e:	035b      	lsls	r3, r3, #13
 80036a0:	430b      	orrs	r3, r1
 80036a2:	431a      	orrs	r2, r3
 80036a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036b0:	d004      	beq.n	80036bc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a45      	ldr	r2, [pc, #276]	; (80037cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d10f      	bne.n	80036dc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80036bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80036c0:	f7ff ff30 	bl	8003524 <LL_ADC_IsEnabled>
 80036c4:	4604      	mov	r4, r0
 80036c6:	4841      	ldr	r0, [pc, #260]	; (80037cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036c8:	f7ff ff2c 	bl	8003524 <LL_ADC_IsEnabled>
 80036cc:	4603      	mov	r3, r0
 80036ce:	4323      	orrs	r3, r4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	e012      	b.n	8003702 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80036dc:	483c      	ldr	r0, [pc, #240]	; (80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80036de:	f7ff ff21 	bl	8003524 <LL_ADC_IsEnabled>
 80036e2:	4604      	mov	r4, r0
 80036e4:	483b      	ldr	r0, [pc, #236]	; (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80036e6:	f7ff ff1d 	bl	8003524 <LL_ADC_IsEnabled>
 80036ea:	4603      	mov	r3, r0
 80036ec:	431c      	orrs	r4, r3
 80036ee:	483c      	ldr	r0, [pc, #240]	; (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80036f0:	f7ff ff18 	bl	8003524 <LL_ADC_IsEnabled>
 80036f4:	4603      	mov	r3, r0
 80036f6:	4323      	orrs	r3, r4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d056      	beq.n	80037b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800370e:	f023 030f 	bic.w	r3, r3, #15
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	6811      	ldr	r1, [r2, #0]
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	6892      	ldr	r2, [r2, #8]
 800371a:	430a      	orrs	r2, r1
 800371c:	431a      	orrs	r2, r3
 800371e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003720:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003722:	e047      	b.n	80037b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800372c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800372e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003738:	d004      	beq.n	8003744 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a23      	ldr	r2, [pc, #140]	; (80037cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d10f      	bne.n	8003764 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003744:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003748:	f7ff feec 	bl	8003524 <LL_ADC_IsEnabled>
 800374c:	4604      	mov	r4, r0
 800374e:	481f      	ldr	r0, [pc, #124]	; (80037cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003750:	f7ff fee8 	bl	8003524 <LL_ADC_IsEnabled>
 8003754:	4603      	mov	r3, r0
 8003756:	4323      	orrs	r3, r4
 8003758:	2b00      	cmp	r3, #0
 800375a:	bf0c      	ite	eq
 800375c:	2301      	moveq	r3, #1
 800375e:	2300      	movne	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	e012      	b.n	800378a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003764:	481a      	ldr	r0, [pc, #104]	; (80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003766:	f7ff fedd 	bl	8003524 <LL_ADC_IsEnabled>
 800376a:	4604      	mov	r4, r0
 800376c:	4819      	ldr	r0, [pc, #100]	; (80037d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800376e:	f7ff fed9 	bl	8003524 <LL_ADC_IsEnabled>
 8003772:	4603      	mov	r3, r0
 8003774:	431c      	orrs	r4, r3
 8003776:	481a      	ldr	r0, [pc, #104]	; (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003778:	f7ff fed4 	bl	8003524 <LL_ADC_IsEnabled>
 800377c:	4603      	mov	r3, r0
 800377e:	4323      	orrs	r3, r4
 8003780:	2b00      	cmp	r3, #0
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d012      	beq.n	80037b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800378e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003796:	f023 030f 	bic.w	r3, r3, #15
 800379a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800379c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800379e:	e009      	b.n	80037b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a4:	f043 0220 	orr.w	r2, r3, #32
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80037b2:	e000      	b.n	80037b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80037be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3784      	adds	r7, #132	; 0x84
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd90      	pop	{r4, r7, pc}
 80037ca:	bf00      	nop
 80037cc:	50000100 	.word	0x50000100
 80037d0:	50000400 	.word	0x50000400
 80037d4:	50000500 	.word	0x50000500
 80037d8:	50000300 	.word	0x50000300
 80037dc:	50000700 	.word	0x50000700
 80037e0:	50000600 	.word	0x50000600

080037e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037f4:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <__NVIC_SetPriorityGrouping+0x44>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003800:	4013      	ands	r3, r2
 8003802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800380c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003816:	4a04      	ldr	r2, [pc, #16]	; (8003828 <__NVIC_SetPriorityGrouping+0x44>)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	60d3      	str	r3, [r2, #12]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <__NVIC_GetPriorityGrouping+0x18>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	0a1b      	lsrs	r3, r3, #8
 8003836:	f003 0307 	and.w	r3, r3, #7
}
 800383a:	4618      	mov	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	2b00      	cmp	r3, #0
 8003858:	db0b      	blt.n	8003872 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	f003 021f 	and.w	r2, r3, #31
 8003860:	4907      	ldr	r1, [pc, #28]	; (8003880 <__NVIC_EnableIRQ+0x38>)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	2001      	movs	r0, #1
 800386a:	fa00 f202 	lsl.w	r2, r0, r2
 800386e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	e000e100 	.word	0xe000e100

08003884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	6039      	str	r1, [r7, #0]
 800388e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003894:	2b00      	cmp	r3, #0
 8003896:	db0a      	blt.n	80038ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	b2da      	uxtb	r2, r3
 800389c:	490c      	ldr	r1, [pc, #48]	; (80038d0 <__NVIC_SetPriority+0x4c>)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	0112      	lsls	r2, r2, #4
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	440b      	add	r3, r1
 80038a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038ac:	e00a      	b.n	80038c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4908      	ldr	r1, [pc, #32]	; (80038d4 <__NVIC_SetPriority+0x50>)
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	3b04      	subs	r3, #4
 80038bc:	0112      	lsls	r2, r2, #4
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	440b      	add	r3, r1
 80038c2:	761a      	strb	r2, [r3, #24]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	e000e100 	.word	0xe000e100
 80038d4:	e000ed00 	.word	0xe000ed00

080038d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d8:	b480      	push	{r7}
 80038da:	b089      	sub	sp, #36	; 0x24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f1c3 0307 	rsb	r3, r3, #7
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	bf28      	it	cs
 80038f6:	2304      	movcs	r3, #4
 80038f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3304      	adds	r3, #4
 80038fe:	2b06      	cmp	r3, #6
 8003900:	d902      	bls.n	8003908 <NVIC_EncodePriority+0x30>
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3b03      	subs	r3, #3
 8003906:	e000      	b.n	800390a <NVIC_EncodePriority+0x32>
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800390c:	f04f 32ff 	mov.w	r2, #4294967295
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43da      	mvns	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	401a      	ands	r2, r3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003920:	f04f 31ff 	mov.w	r1, #4294967295
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	fa01 f303 	lsl.w	r3, r1, r3
 800392a:	43d9      	mvns	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003930:	4313      	orrs	r3, r2
         );
}
 8003932:	4618      	mov	r0, r3
 8003934:	3724      	adds	r7, #36	; 0x24
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3b01      	subs	r3, #1
 800394c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003950:	d301      	bcc.n	8003956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003952:	2301      	movs	r3, #1
 8003954:	e00f      	b.n	8003976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003956:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <SysTick_Config+0x40>)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3b01      	subs	r3, #1
 800395c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800395e:	210f      	movs	r1, #15
 8003960:	f04f 30ff 	mov.w	r0, #4294967295
 8003964:	f7ff ff8e 	bl	8003884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <SysTick_Config+0x40>)
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800396e:	4b04      	ldr	r3, [pc, #16]	; (8003980 <SysTick_Config+0x40>)
 8003970:	2207      	movs	r2, #7
 8003972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	e000e010 	.word	0xe000e010

08003984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff ff29 	bl	80037e4 <__NVIC_SetPriorityGrouping>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b086      	sub	sp, #24
 800399e:	af00      	add	r7, sp, #0
 80039a0:	4603      	mov	r3, r0
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039a8:	f7ff ff40 	bl	800382c <__NVIC_GetPriorityGrouping>
 80039ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	6978      	ldr	r0, [r7, #20]
 80039b4:	f7ff ff90 	bl	80038d8 <NVIC_EncodePriority>
 80039b8:	4602      	mov	r2, r0
 80039ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff ff5f 	bl	8003884 <__NVIC_SetPriority>
}
 80039c6:	bf00      	nop
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	4603      	mov	r3, r0
 80039d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff ff33 	bl	8003848 <__NVIC_EnableIRQ>
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff ffa4 	bl	8003940 <SysTick_Config>
 80039f8:	4603      	mov	r3, r0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e08d      	b.n	8003b32 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	4b47      	ldr	r3, [pc, #284]	; (8003b3c <HAL_DMA_Init+0x138>)
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d80f      	bhi.n	8003a42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	4b45      	ldr	r3, [pc, #276]	; (8003b40 <HAL_DMA_Init+0x13c>)
 8003a2a:	4413      	add	r3, r2
 8003a2c:	4a45      	ldr	r2, [pc, #276]	; (8003b44 <HAL_DMA_Init+0x140>)
 8003a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a32:	091b      	lsrs	r3, r3, #4
 8003a34:	009a      	lsls	r2, r3, #2
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a42      	ldr	r2, [pc, #264]	; (8003b48 <HAL_DMA_Init+0x144>)
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40
 8003a40:	e00e      	b.n	8003a60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	4b40      	ldr	r3, [pc, #256]	; (8003b4c <HAL_DMA_Init+0x148>)
 8003a4a:	4413      	add	r3, r2
 8003a4c:	4a3d      	ldr	r2, [pc, #244]	; (8003b44 <HAL_DMA_Init+0x140>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	091b      	lsrs	r3, r3, #4
 8003a54:	009a      	lsls	r2, r3, #2
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a3c      	ldr	r2, [pc, #240]	; (8003b50 <HAL_DMA_Init+0x14c>)
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f9b6 	bl	8003e24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ac0:	d102      	bne.n	8003ac8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003adc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d010      	beq.n	8003b08 <HAL_DMA_Init+0x104>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d80c      	bhi.n	8003b08 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f9d6 	bl	8003ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	e008      	b.n	8003b1a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40020407 	.word	0x40020407
 8003b40:	bffdfff8 	.word	0xbffdfff8
 8003b44:	cccccccd 	.word	0xcccccccd
 8003b48:	40020000 	.word	0x40020000
 8003b4c:	bffdfbf8 	.word	0xbffdfbf8
 8003b50:	40020400 	.word	0x40020400

08003b54 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_DMA_Start_IT+0x20>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e066      	b.n	8003c42 <HAL_DMA_Start_IT+0xee>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d155      	bne.n	8003c34 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0201 	bic.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f8fb 	bl	8003da8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d008      	beq.n	8003bcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 020e 	orr.w	r2, r2, #14
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	e00f      	b.n	8003bec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0204 	bic.w	r2, r2, #4
 8003bda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 020a 	orr.w	r2, r2, #10
 8003bea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d007      	beq.n	8003c0a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c08:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d007      	beq.n	8003c22 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c20:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f042 0201 	orr.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	e005      	b.n	8003c40 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	2204      	movs	r2, #4
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d026      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x7a>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d021      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d107      	bne.n	8003c9e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0204 	bic.w	r2, r2, #4
 8003c9c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca2:	f003 021f 	and.w	r2, r3, #31
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	2104      	movs	r1, #4
 8003cac:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d071      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003cc2:	e06c      	b.n	8003d9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	2202      	movs	r2, #2
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d02e      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d029      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10b      	bne.n	8003d08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 020a 	bic.w	r2, r2, #10
 8003cfe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	2102      	movs	r1, #2
 8003d16:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d038      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d34:	e033      	b.n	8003d9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2208      	movs	r2, #8
 8003d40:	409a      	lsls	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d02a      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d025      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 020e 	bic.w	r2, r2, #14
 8003d62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	f003 021f 	and.w	r2, r3, #31
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	2101      	movs	r1, #1
 8003d72:	fa01 f202 	lsl.w	r2, r1, r2
 8003d76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d004      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d9e:	bf00      	nop
 8003da0:	bf00      	nop
}
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003dbe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d004      	beq.n	8003dd2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003dd0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	f003 021f 	and.w	r2, r3, #31
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	2101      	movs	r1, #1
 8003de0:	fa01 f202 	lsl.w	r2, r1, r2
 8003de4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b10      	cmp	r3, #16
 8003df4:	d108      	bne.n	8003e08 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e06:	e007      	b.n	8003e18 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	60da      	str	r2, [r3, #12]
}
 8003e18:	bf00      	nop
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	4b16      	ldr	r3, [pc, #88]	; (8003e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d802      	bhi.n	8003e3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003e38:	4b15      	ldr	r3, [pc, #84]	; (8003e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	e001      	b.n	8003e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003e3e:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e40:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	3b08      	subs	r3, #8
 8003e4e:	4a12      	ldr	r2, [pc, #72]	; (8003e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e50:	fba2 2303 	umull	r2, r3, r2, r3
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5c:	089b      	lsrs	r3, r3, #2
 8003e5e:	009a      	lsls	r2, r3, #2
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	4413      	add	r3, r2
 8003e64:	461a      	mov	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a0b      	ldr	r2, [pc, #44]	; (8003e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003e6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	2201      	movs	r2, #1
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40020407 	.word	0x40020407
 8003e90:	40020800 	.word	0x40020800
 8003e94:	40020820 	.word	0x40020820
 8003e98:	cccccccd 	.word	0xcccccccd
 8003e9c:	40020880 	.word	0x40020880

08003ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	461a      	mov	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a08      	ldr	r2, [pc, #32]	; (8003ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ec2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	2201      	movs	r2, #1
 8003ece:	409a      	lsls	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	1000823f 	.word	0x1000823f
 8003ee4:	40020940 	.word	0x40020940

08003ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ef6:	e15a      	b.n	80041ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	2101      	movs	r1, #1
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	fa01 f303 	lsl.w	r3, r1, r3
 8003f04:	4013      	ands	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 814c 	beq.w	80041a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d005      	beq.n	8003f28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d130      	bne.n	8003f8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	2203      	movs	r2, #3
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f5e:	2201      	movs	r2, #1
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	091b      	lsrs	r3, r3, #4
 8003f74:	f003 0201 	and.w	r2, r3, #1
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d017      	beq.n	8003fc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	2203      	movs	r2, #3
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4013      	ands	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d123      	bne.n	800401a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	08da      	lsrs	r2, r3, #3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3208      	adds	r2, #8
 8003fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f003 0307 	and.w	r3, r3, #7
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	220f      	movs	r2, #15
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	08da      	lsrs	r2, r3, #3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3208      	adds	r2, #8
 8004014:	6939      	ldr	r1, [r7, #16]
 8004016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	2203      	movs	r2, #3
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43db      	mvns	r3, r3
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4013      	ands	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 0203 	and.w	r2, r3, #3
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	4313      	orrs	r3, r2
 8004046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80a6 	beq.w	80041a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800405c:	4b5b      	ldr	r3, [pc, #364]	; (80041cc <HAL_GPIO_Init+0x2e4>)
 800405e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004060:	4a5a      	ldr	r2, [pc, #360]	; (80041cc <HAL_GPIO_Init+0x2e4>)
 8004062:	f043 0301 	orr.w	r3, r3, #1
 8004066:	6613      	str	r3, [r2, #96]	; 0x60
 8004068:	4b58      	ldr	r3, [pc, #352]	; (80041cc <HAL_GPIO_Init+0x2e4>)
 800406a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004074:	4a56      	ldr	r2, [pc, #344]	; (80041d0 <HAL_GPIO_Init+0x2e8>)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	089b      	lsrs	r3, r3, #2
 800407a:	3302      	adds	r3, #2
 800407c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004080:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	220f      	movs	r2, #15
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	43db      	mvns	r3, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800409e:	d01f      	beq.n	80040e0 <HAL_GPIO_Init+0x1f8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a4c      	ldr	r2, [pc, #304]	; (80041d4 <HAL_GPIO_Init+0x2ec>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d019      	beq.n	80040dc <HAL_GPIO_Init+0x1f4>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a4b      	ldr	r2, [pc, #300]	; (80041d8 <HAL_GPIO_Init+0x2f0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d013      	beq.n	80040d8 <HAL_GPIO_Init+0x1f0>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a4a      	ldr	r2, [pc, #296]	; (80041dc <HAL_GPIO_Init+0x2f4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00d      	beq.n	80040d4 <HAL_GPIO_Init+0x1ec>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a49      	ldr	r2, [pc, #292]	; (80041e0 <HAL_GPIO_Init+0x2f8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d007      	beq.n	80040d0 <HAL_GPIO_Init+0x1e8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a48      	ldr	r2, [pc, #288]	; (80041e4 <HAL_GPIO_Init+0x2fc>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d101      	bne.n	80040cc <HAL_GPIO_Init+0x1e4>
 80040c8:	2305      	movs	r3, #5
 80040ca:	e00a      	b.n	80040e2 <HAL_GPIO_Init+0x1fa>
 80040cc:	2306      	movs	r3, #6
 80040ce:	e008      	b.n	80040e2 <HAL_GPIO_Init+0x1fa>
 80040d0:	2304      	movs	r3, #4
 80040d2:	e006      	b.n	80040e2 <HAL_GPIO_Init+0x1fa>
 80040d4:	2303      	movs	r3, #3
 80040d6:	e004      	b.n	80040e2 <HAL_GPIO_Init+0x1fa>
 80040d8:	2302      	movs	r3, #2
 80040da:	e002      	b.n	80040e2 <HAL_GPIO_Init+0x1fa>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <HAL_GPIO_Init+0x1fa>
 80040e0:	2300      	movs	r3, #0
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	f002 0203 	and.w	r2, r2, #3
 80040e8:	0092      	lsls	r2, r2, #2
 80040ea:	4093      	lsls	r3, r2
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040f2:	4937      	ldr	r1, [pc, #220]	; (80041d0 <HAL_GPIO_Init+0x2e8>)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	089b      	lsrs	r3, r3, #2
 80040f8:	3302      	adds	r3, #2
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004100:	4b39      	ldr	r3, [pc, #228]	; (80041e8 <HAL_GPIO_Init+0x300>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	43db      	mvns	r3, r3
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4013      	ands	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004124:	4a30      	ldr	r2, [pc, #192]	; (80041e8 <HAL_GPIO_Init+0x300>)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800412a:	4b2f      	ldr	r3, [pc, #188]	; (80041e8 <HAL_GPIO_Init+0x300>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	43db      	mvns	r3, r3
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4013      	ands	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800414e:	4a26      	ldr	r2, [pc, #152]	; (80041e8 <HAL_GPIO_Init+0x300>)
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004154:	4b24      	ldr	r3, [pc, #144]	; (80041e8 <HAL_GPIO_Init+0x300>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	43db      	mvns	r3, r3
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4013      	ands	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004178:	4a1b      	ldr	r2, [pc, #108]	; (80041e8 <HAL_GPIO_Init+0x300>)
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800417e:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <HAL_GPIO_Init+0x300>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	43db      	mvns	r3, r3
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4013      	ands	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041a2:	4a11      	ldr	r2, [pc, #68]	; (80041e8 <HAL_GPIO_Init+0x300>)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	3301      	adds	r3, #1
 80041ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f47f ae9d 	bne.w	8003ef8 <HAL_GPIO_Init+0x10>
  }
}
 80041be:	bf00      	nop
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40010000 	.word	0x40010000
 80041d4:	48000400 	.word	0x48000400
 80041d8:	48000800 	.word	0x48000800
 80041dc:	48000c00 	.word	0x48000c00
 80041e0:	48001000 	.word	0x48001000
 80041e4:	48001400 	.word	0x48001400
 80041e8:	40010400 	.word	0x40010400

080041ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	887b      	ldrh	r3, [r7, #2]
 80041fe:	4013      	ands	r3, r2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004204:	2301      	movs	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
 8004208:	e001      	b.n	800420e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800420a:	2300      	movs	r3, #0
 800420c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800420e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	807b      	strh	r3, [r7, #2]
 8004228:	4613      	mov	r3, r2
 800422a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800422c:	787b      	ldrb	r3, [r7, #1]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004232:	887a      	ldrh	r2, [r7, #2]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004238:	e002      	b.n	8004240 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800423a:	887a      	ldrh	r2, [r7, #2]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004256:	4b08      	ldr	r3, [pc, #32]	; (8004278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	88fb      	ldrh	r3, [r7, #6]
 800425c:	4013      	ands	r3, r2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d006      	beq.n	8004270 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004262:	4a05      	ldr	r2, [pc, #20]	; (8004278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004264:	88fb      	ldrh	r3, [r7, #6]
 8004266:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004268:	88fb      	ldrh	r3, [r7, #6]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f806 	bl	800427c <HAL_GPIO_EXTI_Callback>
  }
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40010400 	.word	0x40010400

0800427c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d141      	bne.n	8004326 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042a2:	4b4b      	ldr	r3, [pc, #300]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ae:	d131      	bne.n	8004314 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042b0:	4b47      	ldr	r3, [pc, #284]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b6:	4a46      	ldr	r2, [pc, #280]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042c0:	4b43      	ldr	r3, [pc, #268]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042c8:	4a41      	ldr	r2, [pc, #260]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042d0:	4b40      	ldr	r3, [pc, #256]	; (80043d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2232      	movs	r2, #50	; 0x32
 80042d6:	fb02 f303 	mul.w	r3, r2, r3
 80042da:	4a3f      	ldr	r2, [pc, #252]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042dc:	fba2 2303 	umull	r2, r3, r2, r3
 80042e0:	0c9b      	lsrs	r3, r3, #18
 80042e2:	3301      	adds	r3, #1
 80042e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042e6:	e002      	b.n	80042ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ee:	4b38      	ldr	r3, [pc, #224]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fa:	d102      	bne.n	8004302 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f2      	bne.n	80042e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004302:	4b33      	ldr	r3, [pc, #204]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800430e:	d158      	bne.n	80043c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e057      	b.n	80043c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004314:	4b2e      	ldr	r3, [pc, #184]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800431a:	4a2d      	ldr	r2, [pc, #180]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800431c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004320:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004324:	e04d      	b.n	80043c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432c:	d141      	bne.n	80043b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800432e:	4b28      	ldr	r3, [pc, #160]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433a:	d131      	bne.n	80043a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800433c:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800433e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004342:	4a23      	ldr	r2, [pc, #140]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004348:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800434c:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004354:	4a1e      	ldr	r2, [pc, #120]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004356:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800435a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800435c:	4b1d      	ldr	r3, [pc, #116]	; (80043d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2232      	movs	r2, #50	; 0x32
 8004362:	fb02 f303 	mul.w	r3, r2, r3
 8004366:	4a1c      	ldr	r2, [pc, #112]	; (80043d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004368:	fba2 2303 	umull	r2, r3, r2, r3
 800436c:	0c9b      	lsrs	r3, r3, #18
 800436e:	3301      	adds	r3, #1
 8004370:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004372:	e002      	b.n	800437a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3b01      	subs	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800437a:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004386:	d102      	bne.n	800438e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f2      	bne.n	8004374 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800438e:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439a:	d112      	bne.n	80043c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e011      	b.n	80043c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043a6:	4a0a      	ldr	r2, [pc, #40]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043b0:	e007      	b.n	80043c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043b2:	4b07      	ldr	r3, [pc, #28]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043ba:	4a05      	ldr	r2, [pc, #20]	; (80043d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40007000 	.word	0x40007000
 80043d4:	20000004 	.word	0x20000004
 80043d8:	431bde83 	.word	0x431bde83

080043dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80043e0:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80043e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043ea:	6093      	str	r3, [r2, #8]
}
 80043ec:	bf00      	nop
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40007000 	.word	0x40007000

080043fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e2fe      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d075      	beq.n	8004506 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800441a:	4b97      	ldr	r3, [pc, #604]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 030c 	and.w	r3, r3, #12
 8004422:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004424:	4b94      	ldr	r3, [pc, #592]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2b0c      	cmp	r3, #12
 8004432:	d102      	bne.n	800443a <HAL_RCC_OscConfig+0x3e>
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2b03      	cmp	r3, #3
 8004438:	d002      	beq.n	8004440 <HAL_RCC_OscConfig+0x44>
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	2b08      	cmp	r3, #8
 800443e:	d10b      	bne.n	8004458 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004440:	4b8d      	ldr	r3, [pc, #564]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d05b      	beq.n	8004504 <HAL_RCC_OscConfig+0x108>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d157      	bne.n	8004504 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e2d9      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004460:	d106      	bne.n	8004470 <HAL_RCC_OscConfig+0x74>
 8004462:	4b85      	ldr	r3, [pc, #532]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a84      	ldr	r2, [pc, #528]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 8004468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	e01d      	b.n	80044ac <HAL_RCC_OscConfig+0xb0>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004478:	d10c      	bne.n	8004494 <HAL_RCC_OscConfig+0x98>
 800447a:	4b7f      	ldr	r3, [pc, #508]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a7e      	ldr	r2, [pc, #504]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 8004480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	4b7c      	ldr	r3, [pc, #496]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a7b      	ldr	r2, [pc, #492]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e00b      	b.n	80044ac <HAL_RCC_OscConfig+0xb0>
 8004494:	4b78      	ldr	r3, [pc, #480]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a77      	ldr	r2, [pc, #476]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 800449a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	4b75      	ldr	r3, [pc, #468]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a74      	ldr	r2, [pc, #464]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 80044a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d013      	beq.n	80044dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fd fb68 	bl	8001b88 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044bc:	f7fd fb64 	bl	8001b88 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b64      	cmp	r3, #100	; 0x64
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e29e      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ce:	4b6a      	ldr	r3, [pc, #424]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0xc0>
 80044da:	e014      	b.n	8004506 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fd fb54 	bl	8001b88 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e4:	f7fd fb50 	bl	8001b88 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e28a      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044f6:	4b60      	ldr	r3, [pc, #384]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0xe8>
 8004502:	e000      	b.n	8004506 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d075      	beq.n	80045fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004512:	4b59      	ldr	r3, [pc, #356]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800451c:	4b56      	ldr	r3, [pc, #344]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b0c      	cmp	r3, #12
 800452a:	d102      	bne.n	8004532 <HAL_RCC_OscConfig+0x136>
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2b02      	cmp	r3, #2
 8004530:	d002      	beq.n	8004538 <HAL_RCC_OscConfig+0x13c>
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b04      	cmp	r3, #4
 8004536:	d11f      	bne.n	8004578 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004538:	4b4f      	ldr	r3, [pc, #316]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <HAL_RCC_OscConfig+0x154>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e25d      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004550:	4b49      	ldr	r3, [pc, #292]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	061b      	lsls	r3, r3, #24
 800455e:	4946      	ldr	r1, [pc, #280]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 8004560:	4313      	orrs	r3, r2
 8004562:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004564:	4b45      	ldr	r3, [pc, #276]	; (800467c <HAL_RCC_OscConfig+0x280>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f7fd fac1 	bl	8001af0 <HAL_InitTick>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d043      	beq.n	80045fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e249      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d023      	beq.n	80045c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004580:	4b3d      	ldr	r3, [pc, #244]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a3c      	ldr	r2, [pc, #240]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 8004586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458c:	f7fd fafc 	bl	8001b88 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004594:	f7fd faf8 	bl	8001b88 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e232      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045a6:	4b34      	ldr	r3, [pc, #208]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b2:	4b31      	ldr	r3, [pc, #196]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	061b      	lsls	r3, r3, #24
 80045c0:	492d      	ldr	r1, [pc, #180]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	604b      	str	r3, [r1, #4]
 80045c6:	e01a      	b.n	80045fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045c8:	4b2b      	ldr	r3, [pc, #172]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a2a      	ldr	r2, [pc, #168]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 80045ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fd fad8 	bl	8001b88 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045dc:	f7fd fad4 	bl	8001b88 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e20e      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045ee:	4b22      	ldr	r3, [pc, #136]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x1e0>
 80045fa:	e000      	b.n	80045fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d041      	beq.n	800468e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d01c      	beq.n	800464c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004612:	4b19      	ldr	r3, [pc, #100]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 8004614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004618:	4a17      	ldr	r2, [pc, #92]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004622:	f7fd fab1 	bl	8001b88 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800462a:	f7fd faad 	bl	8001b88 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e1e7      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800463c:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 800463e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0ef      	beq.n	800462a <HAL_RCC_OscConfig+0x22e>
 800464a:	e020      	b.n	800468e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 800464e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004652:	4a09      	ldr	r2, [pc, #36]	; (8004678 <HAL_RCC_OscConfig+0x27c>)
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465c:	f7fd fa94 	bl	8001b88 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004662:	e00d      	b.n	8004680 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004664:	f7fd fa90 	bl	8001b88 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d906      	bls.n	8004680 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e1ca      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
 8004676:	bf00      	nop
 8004678:	40021000 	.word	0x40021000
 800467c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004680:	4b8c      	ldr	r3, [pc, #560]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 8004682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1ea      	bne.n	8004664 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 80a6 	beq.w	80047e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800469c:	2300      	movs	r3, #0
 800469e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046a0:	4b84      	ldr	r3, [pc, #528]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 80046a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_RCC_OscConfig+0x2b4>
 80046ac:	2301      	movs	r3, #1
 80046ae:	e000      	b.n	80046b2 <HAL_RCC_OscConfig+0x2b6>
 80046b0:	2300      	movs	r3, #0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00d      	beq.n	80046d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b6:	4b7f      	ldr	r3, [pc, #508]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 80046b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ba:	4a7e      	ldr	r2, [pc, #504]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 80046bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c0:	6593      	str	r3, [r2, #88]	; 0x58
 80046c2:	4b7c      	ldr	r3, [pc, #496]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 80046c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046ce:	2301      	movs	r3, #1
 80046d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d2:	4b79      	ldr	r3, [pc, #484]	; (80048b8 <HAL_RCC_OscConfig+0x4bc>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d118      	bne.n	8004710 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046de:	4b76      	ldr	r3, [pc, #472]	; (80048b8 <HAL_RCC_OscConfig+0x4bc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a75      	ldr	r2, [pc, #468]	; (80048b8 <HAL_RCC_OscConfig+0x4bc>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ea:	f7fd fa4d 	bl	8001b88 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f2:	f7fd fa49 	bl	8001b88 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e183      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004704:	4b6c      	ldr	r3, [pc, #432]	; (80048b8 <HAL_RCC_OscConfig+0x4bc>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d108      	bne.n	800472a <HAL_RCC_OscConfig+0x32e>
 8004718:	4b66      	ldr	r3, [pc, #408]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	4a65      	ldr	r2, [pc, #404]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004728:	e024      	b.n	8004774 <HAL_RCC_OscConfig+0x378>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b05      	cmp	r3, #5
 8004730:	d110      	bne.n	8004754 <HAL_RCC_OscConfig+0x358>
 8004732:	4b60      	ldr	r3, [pc, #384]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004738:	4a5e      	ldr	r2, [pc, #376]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 800473a:	f043 0304 	orr.w	r3, r3, #4
 800473e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004742:	4b5c      	ldr	r3, [pc, #368]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 8004744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004748:	4a5a      	ldr	r2, [pc, #360]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004752:	e00f      	b.n	8004774 <HAL_RCC_OscConfig+0x378>
 8004754:	4b57      	ldr	r3, [pc, #348]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 8004756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475a:	4a56      	ldr	r2, [pc, #344]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 800475c:	f023 0301 	bic.w	r3, r3, #1
 8004760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004764:	4b53      	ldr	r3, [pc, #332]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	4a52      	ldr	r2, [pc, #328]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 800476c:	f023 0304 	bic.w	r3, r3, #4
 8004770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d016      	beq.n	80047aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7fd fa04 	bl	8001b88 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004782:	e00a      	b.n	800479a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004784:	f7fd fa00 	bl	8001b88 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e138      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800479a:	4b46      	ldr	r3, [pc, #280]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 800479c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0ed      	beq.n	8004784 <HAL_RCC_OscConfig+0x388>
 80047a8:	e015      	b.n	80047d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047aa:	f7fd f9ed 	bl	8001b88 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047b0:	e00a      	b.n	80047c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b2:	f7fd f9e9 	bl	8001b88 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e121      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047c8:	4b3a      	ldr	r3, [pc, #232]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1ed      	bne.n	80047b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047d6:	7ffb      	ldrb	r3, [r7, #31]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d105      	bne.n	80047e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047dc:	4b35      	ldr	r3, [pc, #212]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 80047de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e0:	4a34      	ldr	r2, [pc, #208]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 80047e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d03c      	beq.n	800486e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01c      	beq.n	8004836 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047fc:	4b2d      	ldr	r3, [pc, #180]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 80047fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004802:	4a2c      	ldr	r2, [pc, #176]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 8004804:	f043 0301 	orr.w	r3, r3, #1
 8004808:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480c:	f7fd f9bc 	bl	8001b88 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004814:	f7fd f9b8 	bl	8001b88 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e0f2      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004826:	4b23      	ldr	r3, [pc, #140]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 8004828:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0ef      	beq.n	8004814 <HAL_RCC_OscConfig+0x418>
 8004834:	e01b      	b.n	800486e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004836:	4b1f      	ldr	r3, [pc, #124]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 8004838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800483c:	4a1d      	ldr	r2, [pc, #116]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 800483e:	f023 0301 	bic.w	r3, r3, #1
 8004842:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004846:	f7fd f99f 	bl	8001b88 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800484e:	f7fd f99b 	bl	8001b88 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e0d5      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004860:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 8004862:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1ef      	bne.n	800484e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 80c9 	beq.w	8004a0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004878:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 030c 	and.w	r3, r3, #12
 8004880:	2b0c      	cmp	r3, #12
 8004882:	f000 8083 	beq.w	800498c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	2b02      	cmp	r3, #2
 800488c:	d15e      	bne.n	800494c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <HAL_RCC_OscConfig+0x4b8>)
 8004894:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489a:	f7fd f975 	bl	8001b88 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a0:	e00c      	b.n	80048bc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a2:	f7fd f971 	bl	8001b88 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d905      	bls.n	80048bc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e0ab      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
 80048b4:	40021000 	.word	0x40021000
 80048b8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048bc:	4b55      	ldr	r3, [pc, #340]	; (8004a14 <HAL_RCC_OscConfig+0x618>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1ec      	bne.n	80048a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048c8:	4b52      	ldr	r3, [pc, #328]	; (8004a14 <HAL_RCC_OscConfig+0x618>)
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	4b52      	ldr	r3, [pc, #328]	; (8004a18 <HAL_RCC_OscConfig+0x61c>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6a11      	ldr	r1, [r2, #32]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048d8:	3a01      	subs	r2, #1
 80048da:	0112      	lsls	r2, r2, #4
 80048dc:	4311      	orrs	r1, r2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80048e2:	0212      	lsls	r2, r2, #8
 80048e4:	4311      	orrs	r1, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048ea:	0852      	lsrs	r2, r2, #1
 80048ec:	3a01      	subs	r2, #1
 80048ee:	0552      	lsls	r2, r2, #21
 80048f0:	4311      	orrs	r1, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048f6:	0852      	lsrs	r2, r2, #1
 80048f8:	3a01      	subs	r2, #1
 80048fa:	0652      	lsls	r2, r2, #25
 80048fc:	4311      	orrs	r1, r2
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004902:	06d2      	lsls	r2, r2, #27
 8004904:	430a      	orrs	r2, r1
 8004906:	4943      	ldr	r1, [pc, #268]	; (8004a14 <HAL_RCC_OscConfig+0x618>)
 8004908:	4313      	orrs	r3, r2
 800490a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800490c:	4b41      	ldr	r3, [pc, #260]	; (8004a14 <HAL_RCC_OscConfig+0x618>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a40      	ldr	r2, [pc, #256]	; (8004a14 <HAL_RCC_OscConfig+0x618>)
 8004912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004916:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004918:	4b3e      	ldr	r3, [pc, #248]	; (8004a14 <HAL_RCC_OscConfig+0x618>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4a3d      	ldr	r2, [pc, #244]	; (8004a14 <HAL_RCC_OscConfig+0x618>)
 800491e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004922:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004924:	f7fd f930 	bl	8001b88 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492c:	f7fd f92c 	bl	8001b88 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e066      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800493e:	4b35      	ldr	r3, [pc, #212]	; (8004a14 <HAL_RCC_OscConfig+0x618>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0x530>
 800494a:	e05e      	b.n	8004a0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494c:	4b31      	ldr	r3, [pc, #196]	; (8004a14 <HAL_RCC_OscConfig+0x618>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a30      	ldr	r2, [pc, #192]	; (8004a14 <HAL_RCC_OscConfig+0x618>)
 8004952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004958:	f7fd f916 	bl	8001b88 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004960:	f7fd f912 	bl	8001b88 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e04c      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004972:	4b28      	ldr	r3, [pc, #160]	; (8004a14 <HAL_RCC_OscConfig+0x618>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1f0      	bne.n	8004960 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800497e:	4b25      	ldr	r3, [pc, #148]	; (8004a14 <HAL_RCC_OscConfig+0x618>)
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	4924      	ldr	r1, [pc, #144]	; (8004a14 <HAL_RCC_OscConfig+0x618>)
 8004984:	4b25      	ldr	r3, [pc, #148]	; (8004a1c <HAL_RCC_OscConfig+0x620>)
 8004986:	4013      	ands	r3, r2
 8004988:	60cb      	str	r3, [r1, #12]
 800498a:	e03e      	b.n	8004a0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e039      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004998:	4b1e      	ldr	r3, [pc, #120]	; (8004a14 <HAL_RCC_OscConfig+0x618>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f003 0203 	and.w	r2, r3, #3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d12c      	bne.n	8004a06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	3b01      	subs	r3, #1
 80049b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d123      	bne.n	8004a06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d11b      	bne.n	8004a06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d113      	bne.n	8004a06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	085b      	lsrs	r3, r3, #1
 80049ea:	3b01      	subs	r3, #1
 80049ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d109      	bne.n	8004a06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	3b01      	subs	r3, #1
 8004a00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d001      	beq.n	8004a0a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3720      	adds	r7, #32
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40021000 	.word	0x40021000
 8004a18:	019f800c 	.word	0x019f800c
 8004a1c:	feeefffc 	.word	0xfeeefffc

08004a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e11e      	b.n	8004c76 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a38:	4b91      	ldr	r3, [pc, #580]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d910      	bls.n	8004a68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a46:	4b8e      	ldr	r3, [pc, #568]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f023 020f 	bic.w	r2, r3, #15
 8004a4e:	498c      	ldr	r1, [pc, #560]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a56:	4b8a      	ldr	r3, [pc, #552]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d001      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e106      	b.n	8004c76 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d073      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d129      	bne.n	8004ad0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a7c:	4b81      	ldr	r3, [pc, #516]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0f4      	b.n	8004c76 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004a8c:	f000 f99e 	bl	8004dcc <RCC_GetSysClockFreqFromPLLSource>
 8004a90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	4a7c      	ldr	r2, [pc, #496]	; (8004c88 <HAL_RCC_ClockConfig+0x268>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d93f      	bls.n	8004b1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a9a:	4b7a      	ldr	r3, [pc, #488]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d009      	beq.n	8004aba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d033      	beq.n	8004b1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d12f      	bne.n	8004b1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004aba:	4b72      	ldr	r3, [pc, #456]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ac2:	4a70      	ldr	r2, [pc, #448]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	e024      	b.n	8004b1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d107      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ad8:	4b6a      	ldr	r3, [pc, #424]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d109      	bne.n	8004af8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e0c6      	b.n	8004c76 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae8:	4b66      	ldr	r3, [pc, #408]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0be      	b.n	8004c76 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004af8:	f000 f8ce 	bl	8004c98 <HAL_RCC_GetSysClockFreq>
 8004afc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4a61      	ldr	r2, [pc, #388]	; (8004c88 <HAL_RCC_ClockConfig+0x268>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d909      	bls.n	8004b1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b06:	4b5f      	ldr	r3, [pc, #380]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b0e:	4a5d      	ldr	r2, [pc, #372]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b16:	2380      	movs	r3, #128	; 0x80
 8004b18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b1a:	4b5a      	ldr	r3, [pc, #360]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f023 0203 	bic.w	r2, r3, #3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	4957      	ldr	r1, [pc, #348]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b2c:	f7fd f82c 	bl	8001b88 <HAL_GetTick>
 8004b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b32:	e00a      	b.n	8004b4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b34:	f7fd f828 	bl	8001b88 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e095      	b.n	8004c76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4a:	4b4e      	ldr	r3, [pc, #312]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 020c 	and.w	r2, r3, #12
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d1eb      	bne.n	8004b34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d023      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b74:	4b43      	ldr	r3, [pc, #268]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	4a42      	ldr	r2, [pc, #264]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004b7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d007      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004b8c:	4b3d      	ldr	r3, [pc, #244]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004b94:	4a3b      	ldr	r2, [pc, #236]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004b96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b9c:	4b39      	ldr	r3, [pc, #228]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	4936      	ldr	r1, [pc, #216]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	608b      	str	r3, [r1, #8]
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	2b80      	cmp	r3, #128	; 0x80
 8004bb4:	d105      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004bb6:	4b33      	ldr	r3, [pc, #204]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	4a32      	ldr	r2, [pc, #200]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004bbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bc0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc2:	4b2f      	ldr	r3, [pc, #188]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d21d      	bcs.n	8004c0c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd0:	4b2b      	ldr	r3, [pc, #172]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f023 020f 	bic.w	r2, r3, #15
 8004bd8:	4929      	ldr	r1, [pc, #164]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004be0:	f7fc ffd2 	bl	8001b88 <HAL_GetTick>
 8004be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	e00a      	b.n	8004bfe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be8:	f7fc ffce 	bl	8001b88 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e03b      	b.n	8004c76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfe:	4b20      	ldr	r3, [pc, #128]	; (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d1ed      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d008      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c18:	4b1a      	ldr	r3, [pc, #104]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4917      	ldr	r1, [pc, #92]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c36:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	490f      	ldr	r1, [pc, #60]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c4a:	f000 f825 	bl	8004c98 <HAL_RCC_GetSysClockFreq>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	091b      	lsrs	r3, r3, #4
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	490c      	ldr	r1, [pc, #48]	; (8004c8c <HAL_RCC_ClockConfig+0x26c>)
 8004c5c:	5ccb      	ldrb	r3, [r1, r3]
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	fa22 f303 	lsr.w	r3, r2, r3
 8004c66:	4a0a      	ldr	r2, [pc, #40]	; (8004c90 <HAL_RCC_ClockConfig+0x270>)
 8004c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <HAL_RCC_ClockConfig+0x274>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fc ff3e 	bl	8001af0 <HAL_InitTick>
 8004c74:	4603      	mov	r3, r0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40022000 	.word	0x40022000
 8004c84:	40021000 	.word	0x40021000
 8004c88:	04c4b400 	.word	0x04c4b400
 8004c8c:	0800806c 	.word	0x0800806c
 8004c90:	20000004 	.word	0x20000004
 8004c94:	20000008 	.word	0x20000008

08004c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c9e:	4b2c      	ldr	r3, [pc, #176]	; (8004d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 030c 	and.w	r3, r3, #12
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d102      	bne.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004caa:	4b2a      	ldr	r3, [pc, #168]	; (8004d54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	e047      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004cb0:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 030c 	and.w	r3, r3, #12
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d102      	bne.n	8004cc2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cbc:	4b26      	ldr	r3, [pc, #152]	; (8004d58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cbe:	613b      	str	r3, [r7, #16]
 8004cc0:	e03e      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004cc2:	4b23      	ldr	r3, [pc, #140]	; (8004d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
 8004cca:	2b0c      	cmp	r3, #12
 8004ccc:	d136      	bne.n	8004d3c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cce:	4b20      	ldr	r3, [pc, #128]	; (8004d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f003 0303 	and.w	r3, r3, #3
 8004cd6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cd8:	4b1d      	ldr	r3, [pc, #116]	; (8004d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d10c      	bne.n	8004d06 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cec:	4a1a      	ldr	r2, [pc, #104]	; (8004d58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	4a16      	ldr	r2, [pc, #88]	; (8004d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cf6:	68d2      	ldr	r2, [r2, #12]
 8004cf8:	0a12      	lsrs	r2, r2, #8
 8004cfa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cfe:	fb02 f303 	mul.w	r3, r2, r3
 8004d02:	617b      	str	r3, [r7, #20]
      break;
 8004d04:	e00c      	b.n	8004d20 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d06:	4a13      	ldr	r2, [pc, #76]	; (8004d54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0e:	4a10      	ldr	r2, [pc, #64]	; (8004d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d10:	68d2      	ldr	r2, [r2, #12]
 8004d12:	0a12      	lsrs	r2, r2, #8
 8004d14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d18:	fb02 f303 	mul.w	r3, r2, r3
 8004d1c:	617b      	str	r3, [r7, #20]
      break;
 8004d1e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	0e5b      	lsrs	r3, r3, #25
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	e001      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d40:	693b      	ldr	r3, [r7, #16]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40021000 	.word	0x40021000
 8004d54:	00f42400 	.word	0x00f42400
 8004d58:	016e3600 	.word	0x016e3600

08004d5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d60:	4b03      	ldr	r3, [pc, #12]	; (8004d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d62:	681b      	ldr	r3, [r3, #0]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	20000004 	.word	0x20000004

08004d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d78:	f7ff fff0 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	0a1b      	lsrs	r3, r3, #8
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	4904      	ldr	r1, [pc, #16]	; (8004d9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d8a:	5ccb      	ldrb	r3, [r1, r3]
 8004d8c:	f003 031f 	and.w	r3, r3, #31
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	0800807c 	.word	0x0800807c

08004da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004da4:	f7ff ffda 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 8004da8:	4602      	mov	r2, r0
 8004daa:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	0adb      	lsrs	r3, r3, #11
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	4904      	ldr	r1, [pc, #16]	; (8004dc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004db6:	5ccb      	ldrb	r3, [r1, r3]
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	0800807c 	.word	0x0800807c

08004dcc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dd2:	4b1e      	ldr	r3, [pc, #120]	; (8004e4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ddc:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	3301      	adds	r3, #1
 8004de8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d10c      	bne.n	8004e0a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004df0:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	4a14      	ldr	r2, [pc, #80]	; (8004e4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dfa:	68d2      	ldr	r2, [r2, #12]
 8004dfc:	0a12      	lsrs	r2, r2, #8
 8004dfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e02:	fb02 f303 	mul.w	r3, r2, r3
 8004e06:	617b      	str	r3, [r7, #20]
    break;
 8004e08:	e00c      	b.n	8004e24 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e0a:	4a12      	ldr	r2, [pc, #72]	; (8004e54 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e12:	4a0e      	ldr	r2, [pc, #56]	; (8004e4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e14:	68d2      	ldr	r2, [r2, #12]
 8004e16:	0a12      	lsrs	r2, r2, #8
 8004e18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e1c:	fb02 f303 	mul.w	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]
    break;
 8004e22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e24:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	0e5b      	lsrs	r3, r3, #25
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e3e:	687b      	ldr	r3, [r7, #4]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	016e3600 	.word	0x016e3600
 8004e54:	00f42400 	.word	0x00f42400

08004e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e60:	2300      	movs	r3, #0
 8004e62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e64:	2300      	movs	r3, #0
 8004e66:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 8098 	beq.w	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e76:	2300      	movs	r3, #0
 8004e78:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e7a:	4b43      	ldr	r3, [pc, #268]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10d      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e86:	4b40      	ldr	r3, [pc, #256]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8a:	4a3f      	ldr	r2, [pc, #252]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e90:	6593      	str	r3, [r2, #88]	; 0x58
 8004e92:	4b3d      	ldr	r3, [pc, #244]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ea2:	4b3a      	ldr	r3, [pc, #232]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a39      	ldr	r2, [pc, #228]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eae:	f7fc fe6b 	bl	8001b88 <HAL_GetTick>
 8004eb2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eb4:	e009      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb6:	f7fc fe67 	bl	8001b88 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d902      	bls.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	74fb      	strb	r3, [r7, #19]
        break;
 8004ec8:	e005      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eca:	4b30      	ldr	r3, [pc, #192]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0ef      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ed6:	7cfb      	ldrb	r3, [r7, #19]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d159      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004edc:	4b2a      	ldr	r3, [pc, #168]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01e      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d019      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ef8:	4b23      	ldr	r3, [pc, #140]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f04:	4b20      	ldr	r3, [pc, #128]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0a:	4a1f      	ldr	r2, [pc, #124]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f14:	4b1c      	ldr	r3, [pc, #112]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	4a1b      	ldr	r2, [pc, #108]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f24:	4a18      	ldr	r2, [pc, #96]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d016      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f36:	f7fc fe27 	bl	8001b88 <HAL_GetTick>
 8004f3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f3c:	e00b      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3e:	f7fc fe23 	bl	8001b88 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d902      	bls.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	74fb      	strb	r3, [r7, #19]
            break;
 8004f54:	e006      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f56:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0ec      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f64:	7cfb      	ldrb	r3, [r7, #19]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10b      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f6a:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f78:	4903      	ldr	r1, [pc, #12]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f80:	e008      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f82:	7cfb      	ldrb	r3, [r7, #19]
 8004f84:	74bb      	strb	r3, [r7, #18]
 8004f86:	e005      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f90:	7cfb      	ldrb	r3, [r7, #19]
 8004f92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f94:	7c7b      	ldrb	r3, [r7, #17]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d105      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f9a:	4ba7      	ldr	r3, [pc, #668]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9e:	4aa6      	ldr	r2, [pc, #664]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fb2:	4ba1      	ldr	r3, [pc, #644]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f023 0203 	bic.w	r2, r3, #3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	499d      	ldr	r1, [pc, #628]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fd4:	4b98      	ldr	r3, [pc, #608]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fda:	f023 020c 	bic.w	r2, r3, #12
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	4995      	ldr	r1, [pc, #596]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ff6:	4b90      	ldr	r3, [pc, #576]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	498c      	ldr	r1, [pc, #560]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005018:	4b87      	ldr	r3, [pc, #540]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	4984      	ldr	r1, [pc, #528]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0310 	and.w	r3, r3, #16
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800503a:	4b7f      	ldr	r3, [pc, #508]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	497b      	ldr	r1, [pc, #492]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800505c:	4b76      	ldr	r3, [pc, #472]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005062:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	4973      	ldr	r1, [pc, #460]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800507e:	4b6e      	ldr	r3, [pc, #440]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005084:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	496a      	ldr	r1, [pc, #424]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050a0:	4b65      	ldr	r3, [pc, #404]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	4962      	ldr	r1, [pc, #392]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050c2:	4b5d      	ldr	r3, [pc, #372]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	4959      	ldr	r1, [pc, #356]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050e4:	4b54      	ldr	r3, [pc, #336]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050ea:	f023 0203 	bic.w	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f2:	4951      	ldr	r1, [pc, #324]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005106:	4b4c      	ldr	r3, [pc, #304]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	4948      	ldr	r1, [pc, #288]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005116:	4313      	orrs	r3, r2
 8005118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005124:	2b00      	cmp	r3, #0
 8005126:	d015      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005128:	4b43      	ldr	r3, [pc, #268]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	4940      	ldr	r1, [pc, #256]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005138:	4313      	orrs	r3, r2
 800513a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005146:	d105      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005148:	4b3b      	ldr	r3, [pc, #236]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	4a3a      	ldr	r2, [pc, #232]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005152:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800515c:	2b00      	cmp	r3, #0
 800515e:	d015      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005160:	4b35      	ldr	r3, [pc, #212]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005166:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800516e:	4932      	ldr	r1, [pc, #200]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800517e:	d105      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005180:	4b2d      	ldr	r3, [pc, #180]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	4a2c      	ldr	r2, [pc, #176]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800518a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d015      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005198:	4b27      	ldr	r3, [pc, #156]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	4924      	ldr	r1, [pc, #144]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051b6:	d105      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051b8:	4b1f      	ldr	r3, [pc, #124]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	4a1e      	ldr	r2, [pc, #120]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d015      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051d0:	4b19      	ldr	r3, [pc, #100]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051de:	4916      	ldr	r1, [pc, #88]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ee:	d105      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051f0:	4b11      	ldr	r3, [pc, #68]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	4a10      	ldr	r2, [pc, #64]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d019      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005208:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800520a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	4908      	ldr	r1, [pc, #32]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005226:	d109      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005228:	4b03      	ldr	r3, [pc, #12]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	4a02      	ldr	r2, [pc, #8]	; (8005238 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005232:	60d3      	str	r3, [r2, #12]
 8005234:	e002      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005236:	bf00      	nop
 8005238:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d015      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005248:	4b29      	ldr	r3, [pc, #164]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005256:	4926      	ldr	r1, [pc, #152]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005258:	4313      	orrs	r3, r2
 800525a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005266:	d105      	bne.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005268:	4b21      	ldr	r3, [pc, #132]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4a20      	ldr	r2, [pc, #128]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800526e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005272:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d015      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005280:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005286:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528e:	4918      	ldr	r1, [pc, #96]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005290:	4313      	orrs	r3, r2
 8005292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800529a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529e:	d105      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052a0:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a12      	ldr	r2, [pc, #72]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052aa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d015      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80052b8:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c6:	490a      	ldr	r1, [pc, #40]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052d6:	d105      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4a04      	ldr	r2, [pc, #16]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80052e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40021000 	.word	0x40021000

080052f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e049      	b.n	800539a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fc fac0 	bl	80018a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3304      	adds	r3, #4
 8005330:	4619      	mov	r1, r3
 8005332:	4610      	mov	r0, r2
 8005334:	f001 f86e 	bl	8006414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d001      	beq.n	80053bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e04c      	b.n	8005456 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a26      	ldr	r2, [pc, #152]	; (8005464 <HAL_TIM_Base_Start+0xc0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d022      	beq.n	8005414 <HAL_TIM_Base_Start+0x70>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d6:	d01d      	beq.n	8005414 <HAL_TIM_Base_Start+0x70>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a22      	ldr	r2, [pc, #136]	; (8005468 <HAL_TIM_Base_Start+0xc4>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d018      	beq.n	8005414 <HAL_TIM_Base_Start+0x70>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a21      	ldr	r2, [pc, #132]	; (800546c <HAL_TIM_Base_Start+0xc8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d013      	beq.n	8005414 <HAL_TIM_Base_Start+0x70>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a1f      	ldr	r2, [pc, #124]	; (8005470 <HAL_TIM_Base_Start+0xcc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00e      	beq.n	8005414 <HAL_TIM_Base_Start+0x70>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a1e      	ldr	r2, [pc, #120]	; (8005474 <HAL_TIM_Base_Start+0xd0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d009      	beq.n	8005414 <HAL_TIM_Base_Start+0x70>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a1c      	ldr	r2, [pc, #112]	; (8005478 <HAL_TIM_Base_Start+0xd4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d004      	beq.n	8005414 <HAL_TIM_Base_Start+0x70>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1b      	ldr	r2, [pc, #108]	; (800547c <HAL_TIM_Base_Start+0xd8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d115      	bne.n	8005440 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	4b19      	ldr	r3, [pc, #100]	; (8005480 <HAL_TIM_Base_Start+0xdc>)
 800541c:	4013      	ands	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b06      	cmp	r3, #6
 8005424:	d015      	beq.n	8005452 <HAL_TIM_Base_Start+0xae>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800542c:	d011      	beq.n	8005452 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 0201 	orr.w	r2, r2, #1
 800543c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543e:	e008      	b.n	8005452 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	e000      	b.n	8005454 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005452:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40012c00 	.word	0x40012c00
 8005468:	40000400 	.word	0x40000400
 800546c:	40000800 	.word	0x40000800
 8005470:	40000c00 	.word	0x40000c00
 8005474:	40013400 	.word	0x40013400
 8005478:	40014000 	.word	0x40014000
 800547c:	40015000 	.word	0x40015000
 8005480:	00010007 	.word	0x00010007

08005484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b01      	cmp	r3, #1
 8005496:	d001      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e054      	b.n	8005546 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a26      	ldr	r2, [pc, #152]	; (8005554 <HAL_TIM_Base_Start_IT+0xd0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d022      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c6:	d01d      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a22      	ldr	r2, [pc, #136]	; (8005558 <HAL_TIM_Base_Start_IT+0xd4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d018      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a21      	ldr	r2, [pc, #132]	; (800555c <HAL_TIM_Base_Start_IT+0xd8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d013      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1f      	ldr	r2, [pc, #124]	; (8005560 <HAL_TIM_Base_Start_IT+0xdc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00e      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1e      	ldr	r2, [pc, #120]	; (8005564 <HAL_TIM_Base_Start_IT+0xe0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d009      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1c      	ldr	r2, [pc, #112]	; (8005568 <HAL_TIM_Base_Start_IT+0xe4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d004      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x80>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1b      	ldr	r2, [pc, #108]	; (800556c <HAL_TIM_Base_Start_IT+0xe8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d115      	bne.n	8005530 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689a      	ldr	r2, [r3, #8]
 800550a:	4b19      	ldr	r3, [pc, #100]	; (8005570 <HAL_TIM_Base_Start_IT+0xec>)
 800550c:	4013      	ands	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b06      	cmp	r3, #6
 8005514:	d015      	beq.n	8005542 <HAL_TIM_Base_Start_IT+0xbe>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551c:	d011      	beq.n	8005542 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0201 	orr.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552e:	e008      	b.n	8005542 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0201 	orr.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	e000      	b.n	8005544 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005542:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40012c00 	.word	0x40012c00
 8005558:	40000400 	.word	0x40000400
 800555c:	40000800 	.word	0x40000800
 8005560:	40000c00 	.word	0x40000c00
 8005564:	40013400 	.word	0x40013400
 8005568:	40014000 	.word	0x40014000
 800556c:	40015000 	.word	0x40015000
 8005570:	00010007 	.word	0x00010007

08005574 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e049      	b.n	800561a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d106      	bne.n	80055a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f841 	bl	8005622 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4619      	mov	r1, r3
 80055b2:	4610      	mov	r0, r2
 80055b4:	f000 ff2e 	bl	8006414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
	...

08005638 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d109      	bne.n	800565c <HAL_TIM_PWM_Start+0x24>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	bf14      	ite	ne
 8005654:	2301      	movne	r3, #1
 8005656:	2300      	moveq	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	e03c      	b.n	80056d6 <HAL_TIM_PWM_Start+0x9e>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2b04      	cmp	r3, #4
 8005660:	d109      	bne.n	8005676 <HAL_TIM_PWM_Start+0x3e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b01      	cmp	r3, #1
 800566c:	bf14      	ite	ne
 800566e:	2301      	movne	r3, #1
 8005670:	2300      	moveq	r3, #0
 8005672:	b2db      	uxtb	r3, r3
 8005674:	e02f      	b.n	80056d6 <HAL_TIM_PWM_Start+0x9e>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b08      	cmp	r3, #8
 800567a:	d109      	bne.n	8005690 <HAL_TIM_PWM_Start+0x58>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b01      	cmp	r3, #1
 8005686:	bf14      	ite	ne
 8005688:	2301      	movne	r3, #1
 800568a:	2300      	moveq	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	e022      	b.n	80056d6 <HAL_TIM_PWM_Start+0x9e>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2b0c      	cmp	r3, #12
 8005694:	d109      	bne.n	80056aa <HAL_TIM_PWM_Start+0x72>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b01      	cmp	r3, #1
 80056a0:	bf14      	ite	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	2300      	moveq	r3, #0
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	e015      	b.n	80056d6 <HAL_TIM_PWM_Start+0x9e>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b10      	cmp	r3, #16
 80056ae:	d109      	bne.n	80056c4 <HAL_TIM_PWM_Start+0x8c>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	bf14      	ite	ne
 80056bc:	2301      	movne	r3, #1
 80056be:	2300      	moveq	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	e008      	b.n	80056d6 <HAL_TIM_PWM_Start+0x9e>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	bf14      	ite	ne
 80056d0:	2301      	movne	r3, #1
 80056d2:	2300      	moveq	r3, #0
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e0a6      	b.n	800582c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d104      	bne.n	80056ee <HAL_TIM_PWM_Start+0xb6>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056ec:	e023      	b.n	8005736 <HAL_TIM_PWM_Start+0xfe>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d104      	bne.n	80056fe <HAL_TIM_PWM_Start+0xc6>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056fc:	e01b      	b.n	8005736 <HAL_TIM_PWM_Start+0xfe>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b08      	cmp	r3, #8
 8005702:	d104      	bne.n	800570e <HAL_TIM_PWM_Start+0xd6>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800570c:	e013      	b.n	8005736 <HAL_TIM_PWM_Start+0xfe>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b0c      	cmp	r3, #12
 8005712:	d104      	bne.n	800571e <HAL_TIM_PWM_Start+0xe6>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800571c:	e00b      	b.n	8005736 <HAL_TIM_PWM_Start+0xfe>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b10      	cmp	r3, #16
 8005722:	d104      	bne.n	800572e <HAL_TIM_PWM_Start+0xf6>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800572c:	e003      	b.n	8005736 <HAL_TIM_PWM_Start+0xfe>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2202      	movs	r2, #2
 8005732:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2201      	movs	r2, #1
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	4618      	mov	r0, r3
 8005740:	f001 fcec 	bl	800711c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a3a      	ldr	r2, [pc, #232]	; (8005834 <HAL_TIM_PWM_Start+0x1fc>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d018      	beq.n	8005780 <HAL_TIM_PWM_Start+0x148>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a39      	ldr	r2, [pc, #228]	; (8005838 <HAL_TIM_PWM_Start+0x200>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d013      	beq.n	8005780 <HAL_TIM_PWM_Start+0x148>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a37      	ldr	r2, [pc, #220]	; (800583c <HAL_TIM_PWM_Start+0x204>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d00e      	beq.n	8005780 <HAL_TIM_PWM_Start+0x148>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a36      	ldr	r2, [pc, #216]	; (8005840 <HAL_TIM_PWM_Start+0x208>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d009      	beq.n	8005780 <HAL_TIM_PWM_Start+0x148>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a34      	ldr	r2, [pc, #208]	; (8005844 <HAL_TIM_PWM_Start+0x20c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d004      	beq.n	8005780 <HAL_TIM_PWM_Start+0x148>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a33      	ldr	r2, [pc, #204]	; (8005848 <HAL_TIM_PWM_Start+0x210>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d101      	bne.n	8005784 <HAL_TIM_PWM_Start+0x14c>
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <HAL_TIM_PWM_Start+0x14e>
 8005784:	2300      	movs	r3, #0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005798:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a25      	ldr	r2, [pc, #148]	; (8005834 <HAL_TIM_PWM_Start+0x1fc>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d022      	beq.n	80057ea <HAL_TIM_PWM_Start+0x1b2>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ac:	d01d      	beq.n	80057ea <HAL_TIM_PWM_Start+0x1b2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a26      	ldr	r2, [pc, #152]	; (800584c <HAL_TIM_PWM_Start+0x214>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d018      	beq.n	80057ea <HAL_TIM_PWM_Start+0x1b2>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a24      	ldr	r2, [pc, #144]	; (8005850 <HAL_TIM_PWM_Start+0x218>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d013      	beq.n	80057ea <HAL_TIM_PWM_Start+0x1b2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a23      	ldr	r2, [pc, #140]	; (8005854 <HAL_TIM_PWM_Start+0x21c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d00e      	beq.n	80057ea <HAL_TIM_PWM_Start+0x1b2>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a19      	ldr	r2, [pc, #100]	; (8005838 <HAL_TIM_PWM_Start+0x200>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d009      	beq.n	80057ea <HAL_TIM_PWM_Start+0x1b2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a18      	ldr	r2, [pc, #96]	; (800583c <HAL_TIM_PWM_Start+0x204>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d004      	beq.n	80057ea <HAL_TIM_PWM_Start+0x1b2>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a18      	ldr	r2, [pc, #96]	; (8005848 <HAL_TIM_PWM_Start+0x210>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d115      	bne.n	8005816 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	4b19      	ldr	r3, [pc, #100]	; (8005858 <HAL_TIM_PWM_Start+0x220>)
 80057f2:	4013      	ands	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2b06      	cmp	r3, #6
 80057fa:	d015      	beq.n	8005828 <HAL_TIM_PWM_Start+0x1f0>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005802:	d011      	beq.n	8005828 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0201 	orr.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005814:	e008      	b.n	8005828 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f042 0201 	orr.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	e000      	b.n	800582a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005828:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40012c00 	.word	0x40012c00
 8005838:	40013400 	.word	0x40013400
 800583c:	40014000 	.word	0x40014000
 8005840:	40014400 	.word	0x40014400
 8005844:	40014800 	.word	0x40014800
 8005848:	40015000 	.word	0x40015000
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800
 8005854:	40000c00 	.word	0x40000c00
 8005858:	00010007 	.word	0x00010007

0800585c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e049      	b.n	8005902 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fb ffc8 	bl	8001818 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3304      	adds	r3, #4
 8005898:	4619      	mov	r1, r3
 800589a:	4610      	mov	r0, r2
 800589c:	f000 fdba 	bl	8006414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d104      	bne.n	8005926 <HAL_TIM_IC_Start+0x1a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005922:	b2db      	uxtb	r3, r3
 8005924:	e023      	b.n	800596e <HAL_TIM_IC_Start+0x62>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b04      	cmp	r3, #4
 800592a:	d104      	bne.n	8005936 <HAL_TIM_IC_Start+0x2a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005932:	b2db      	uxtb	r3, r3
 8005934:	e01b      	b.n	800596e <HAL_TIM_IC_Start+0x62>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b08      	cmp	r3, #8
 800593a:	d104      	bne.n	8005946 <HAL_TIM_IC_Start+0x3a>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005942:	b2db      	uxtb	r3, r3
 8005944:	e013      	b.n	800596e <HAL_TIM_IC_Start+0x62>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b0c      	cmp	r3, #12
 800594a:	d104      	bne.n	8005956 <HAL_TIM_IC_Start+0x4a>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005952:	b2db      	uxtb	r3, r3
 8005954:	e00b      	b.n	800596e <HAL_TIM_IC_Start+0x62>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b10      	cmp	r3, #16
 800595a:	d104      	bne.n	8005966 <HAL_TIM_IC_Start+0x5a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005962:	b2db      	uxtb	r3, r3
 8005964:	e003      	b.n	800596e <HAL_TIM_IC_Start+0x62>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800596c:	b2db      	uxtb	r3, r3
 800596e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d104      	bne.n	8005980 <HAL_TIM_IC_Start+0x74>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800597c:	b2db      	uxtb	r3, r3
 800597e:	e013      	b.n	80059a8 <HAL_TIM_IC_Start+0x9c>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b04      	cmp	r3, #4
 8005984:	d104      	bne.n	8005990 <HAL_TIM_IC_Start+0x84>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800598c:	b2db      	uxtb	r3, r3
 800598e:	e00b      	b.n	80059a8 <HAL_TIM_IC_Start+0x9c>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b08      	cmp	r3, #8
 8005994:	d104      	bne.n	80059a0 <HAL_TIM_IC_Start+0x94>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800599c:	b2db      	uxtb	r3, r3
 800599e:	e003      	b.n	80059a8 <HAL_TIM_IC_Start+0x9c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d102      	bne.n	80059b6 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80059b0:	7bbb      	ldrb	r3, [r7, #14]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d001      	beq.n	80059ba <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e097      	b.n	8005aea <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d104      	bne.n	80059ca <HAL_TIM_IC_Start+0xbe>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c8:	e023      	b.n	8005a12 <HAL_TIM_IC_Start+0x106>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d104      	bne.n	80059da <HAL_TIM_IC_Start+0xce>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059d8:	e01b      	b.n	8005a12 <HAL_TIM_IC_Start+0x106>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d104      	bne.n	80059ea <HAL_TIM_IC_Start+0xde>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059e8:	e013      	b.n	8005a12 <HAL_TIM_IC_Start+0x106>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b0c      	cmp	r3, #12
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_IC_Start+0xee>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059f8:	e00b      	b.n	8005a12 <HAL_TIM_IC_Start+0x106>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b10      	cmp	r3, #16
 80059fe:	d104      	bne.n	8005a0a <HAL_TIM_IC_Start+0xfe>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a08:	e003      	b.n	8005a12 <HAL_TIM_IC_Start+0x106>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <HAL_TIM_IC_Start+0x116>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a20:	e013      	b.n	8005a4a <HAL_TIM_IC_Start+0x13e>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d104      	bne.n	8005a32 <HAL_TIM_IC_Start+0x126>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a30:	e00b      	b.n	8005a4a <HAL_TIM_IC_Start+0x13e>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d104      	bne.n	8005a42 <HAL_TIM_IC_Start+0x136>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a40:	e003      	b.n	8005a4a <HAL_TIM_IC_Start+0x13e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2202      	movs	r2, #2
 8005a46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f001 fb62 	bl	800711c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a25      	ldr	r2, [pc, #148]	; (8005af4 <HAL_TIM_IC_Start+0x1e8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d022      	beq.n	8005aa8 <HAL_TIM_IC_Start+0x19c>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a6a:	d01d      	beq.n	8005aa8 <HAL_TIM_IC_Start+0x19c>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a21      	ldr	r2, [pc, #132]	; (8005af8 <HAL_TIM_IC_Start+0x1ec>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d018      	beq.n	8005aa8 <HAL_TIM_IC_Start+0x19c>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a20      	ldr	r2, [pc, #128]	; (8005afc <HAL_TIM_IC_Start+0x1f0>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d013      	beq.n	8005aa8 <HAL_TIM_IC_Start+0x19c>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1e      	ldr	r2, [pc, #120]	; (8005b00 <HAL_TIM_IC_Start+0x1f4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00e      	beq.n	8005aa8 <HAL_TIM_IC_Start+0x19c>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1d      	ldr	r2, [pc, #116]	; (8005b04 <HAL_TIM_IC_Start+0x1f8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d009      	beq.n	8005aa8 <HAL_TIM_IC_Start+0x19c>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1b      	ldr	r2, [pc, #108]	; (8005b08 <HAL_TIM_IC_Start+0x1fc>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d004      	beq.n	8005aa8 <HAL_TIM_IC_Start+0x19c>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1a      	ldr	r2, [pc, #104]	; (8005b0c <HAL_TIM_IC_Start+0x200>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d115      	bne.n	8005ad4 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	4b18      	ldr	r3, [pc, #96]	; (8005b10 <HAL_TIM_IC_Start+0x204>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b06      	cmp	r3, #6
 8005ab8:	d015      	beq.n	8005ae6 <HAL_TIM_IC_Start+0x1da>
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac0:	d011      	beq.n	8005ae6 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0201 	orr.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad2:	e008      	b.n	8005ae6 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	e000      	b.n	8005ae8 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40012c00 	.word	0x40012c00
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40000800 	.word	0x40000800
 8005b00:	40000c00 	.word	0x40000c00
 8005b04:	40013400 	.word	0x40013400
 8005b08:	40014000 	.word	0x40014000
 8005b0c:	40015000 	.word	0x40015000
 8005b10:	00010007 	.word	0x00010007

08005b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d020      	beq.n	8005b78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01b      	beq.n	8005b78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0202 	mvn.w	r2, #2
 8005b48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fc3a 	bl	80063d8 <HAL_TIM_IC_CaptureCallback>
 8005b64:	e005      	b.n	8005b72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fc2c 	bl	80063c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fc3d 	bl	80063ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d020      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01b      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0204 	mvn.w	r2, #4
 8005b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fc14 	bl	80063d8 <HAL_TIM_IC_CaptureCallback>
 8005bb0:	e005      	b.n	8005bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fc06 	bl	80063c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fc17 	bl	80063ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d020      	beq.n	8005c10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01b      	beq.n	8005c10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f06f 0208 	mvn.w	r2, #8
 8005be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2204      	movs	r2, #4
 8005be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fbee 	bl	80063d8 <HAL_TIM_IC_CaptureCallback>
 8005bfc:	e005      	b.n	8005c0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fbe0 	bl	80063c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fbf1 	bl	80063ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f003 0310 	and.w	r3, r3, #16
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d020      	beq.n	8005c5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f003 0310 	and.w	r3, r3, #16
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d01b      	beq.n	8005c5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f06f 0210 	mvn.w	r2, #16
 8005c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2208      	movs	r2, #8
 8005c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fbc8 	bl	80063d8 <HAL_TIM_IC_CaptureCallback>
 8005c48:	e005      	b.n	8005c56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fbba 	bl	80063c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fbcb 	bl	80063ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00c      	beq.n	8005c80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d007      	beq.n	8005c80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0201 	mvn.w	r2, #1
 8005c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fb fb40 	bl	8001300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d104      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00c      	beq.n	8005cae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d007      	beq.n	8005cae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f001 fafd 	bl	80072a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00c      	beq.n	8005cd2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d007      	beq.n	8005cd2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f001 faf5 	bl	80072bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00c      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fb85 	bl	8006400 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00c      	beq.n	8005d1a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f06f 0220 	mvn.w	r2, #32
 8005d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f001 fabd 	bl	8007294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00c      	beq.n	8005d3e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d007      	beq.n	8005d3e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f001 fac9 	bl	80072d0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00c      	beq.n	8005d62 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d007      	beq.n	8005d62 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f001 fac1 	bl	80072e4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00c      	beq.n	8005d86 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f001 fab9 	bl	80072f8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00c      	beq.n	8005daa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d007      	beq.n	8005daa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 fab1 	bl	800730c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005daa:	bf00      	nop
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b086      	sub	sp, #24
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d101      	bne.n	8005dd0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e088      	b.n	8005ee2 <HAL_TIM_IC_ConfigChannel+0x130>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d11b      	bne.n	8005e16 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005dee:	f000 ffcf 	bl	8006d90 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	699a      	ldr	r2, [r3, #24]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 020c 	bic.w	r2, r2, #12
 8005e00:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6999      	ldr	r1, [r3, #24]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	619a      	str	r2, [r3, #24]
 8005e14:	e060      	b.n	8005ed8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b04      	cmp	r3, #4
 8005e1a:	d11c      	bne.n	8005e56 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005e2c:	f001 f853 	bl	8006ed6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e3e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6999      	ldr	r1, [r3, #24]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	021a      	lsls	r2, r3, #8
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	619a      	str	r2, [r3, #24]
 8005e54:	e040      	b.n	8005ed8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b08      	cmp	r3, #8
 8005e5a:	d11b      	bne.n	8005e94 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005e6c:	f001 f8a0 	bl	8006fb0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69da      	ldr	r2, [r3, #28]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 020c 	bic.w	r2, r2, #12
 8005e7e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	69d9      	ldr	r1, [r3, #28]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	61da      	str	r2, [r3, #28]
 8005e92:	e021      	b.n	8005ed8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b0c      	cmp	r3, #12
 8005e98:	d11c      	bne.n	8005ed4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005eaa:	f001 f8bd 	bl	8007028 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69da      	ldr	r2, [r3, #28]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ebc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69d9      	ldr	r1, [r3, #28]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	021a      	lsls	r2, r3, #8
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	61da      	str	r2, [r3, #28]
 8005ed2:	e001      	b.n	8005ed8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f06:	2302      	movs	r3, #2
 8005f08:	e0ff      	b.n	800610a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b14      	cmp	r3, #20
 8005f16:	f200 80f0 	bhi.w	80060fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f1a:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f75 	.word	0x08005f75
 8005f24:	080060fb 	.word	0x080060fb
 8005f28:	080060fb 	.word	0x080060fb
 8005f2c:	080060fb 	.word	0x080060fb
 8005f30:	08005fb5 	.word	0x08005fb5
 8005f34:	080060fb 	.word	0x080060fb
 8005f38:	080060fb 	.word	0x080060fb
 8005f3c:	080060fb 	.word	0x080060fb
 8005f40:	08005ff7 	.word	0x08005ff7
 8005f44:	080060fb 	.word	0x080060fb
 8005f48:	080060fb 	.word	0x080060fb
 8005f4c:	080060fb 	.word	0x080060fb
 8005f50:	08006037 	.word	0x08006037
 8005f54:	080060fb 	.word	0x080060fb
 8005f58:	080060fb 	.word	0x080060fb
 8005f5c:	080060fb 	.word	0x080060fb
 8005f60:	08006079 	.word	0x08006079
 8005f64:	080060fb 	.word	0x080060fb
 8005f68:	080060fb 	.word	0x080060fb
 8005f6c:	080060fb 	.word	0x080060fb
 8005f70:	080060b9 	.word	0x080060b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fafe 	bl	800657c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0208 	orr.w	r2, r2, #8
 8005f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0204 	bic.w	r2, r2, #4
 8005f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6999      	ldr	r1, [r3, #24]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	619a      	str	r2, [r3, #24]
      break;
 8005fb2:	e0a5      	b.n	8006100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68b9      	ldr	r1, [r7, #8]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fb78 	bl	80066b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699a      	ldr	r2, [r3, #24]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6999      	ldr	r1, [r3, #24]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	021a      	lsls	r2, r3, #8
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	619a      	str	r2, [r3, #24]
      break;
 8005ff4:	e084      	b.n	8006100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68b9      	ldr	r1, [r7, #8]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 fbeb 	bl	80067d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69da      	ldr	r2, [r3, #28]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 0208 	orr.w	r2, r2, #8
 8006010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69da      	ldr	r2, [r3, #28]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0204 	bic.w	r2, r2, #4
 8006020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69d9      	ldr	r1, [r3, #28]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	61da      	str	r2, [r3, #28]
      break;
 8006034:	e064      	b.n	8006100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68b9      	ldr	r1, [r7, #8]
 800603c:	4618      	mov	r0, r3
 800603e:	f000 fc5d 	bl	80068fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69da      	ldr	r2, [r3, #28]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69d9      	ldr	r1, [r3, #28]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	021a      	lsls	r2, r3, #8
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	61da      	str	r2, [r3, #28]
      break;
 8006076:	e043      	b.n	8006100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68b9      	ldr	r1, [r7, #8]
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fcd0 	bl	8006a24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0208 	orr.w	r2, r2, #8
 8006092:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0204 	bic.w	r2, r2, #4
 80060a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	691a      	ldr	r2, [r3, #16]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80060b6:	e023      	b.n	8006100 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68b9      	ldr	r1, [r7, #8]
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fd1a 	bl	8006af8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060e2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	021a      	lsls	r2, r3, #8
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80060f8:	e002      	b.n	8006100 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	75fb      	strb	r3, [r7, #23]
      break;
 80060fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006108:	7dfb      	ldrb	r3, [r7, #23]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop

08006114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_TIM_ConfigClockSource+0x1c>
 800612c:	2302      	movs	r3, #2
 800612e:	e0f6      	b.n	800631e <HAL_TIM_ConfigClockSource+0x20a>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800614e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006152:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800615a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a6f      	ldr	r2, [pc, #444]	; (8006328 <HAL_TIM_ConfigClockSource+0x214>)
 800616a:	4293      	cmp	r3, r2
 800616c:	f000 80c1 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006170:	4a6d      	ldr	r2, [pc, #436]	; (8006328 <HAL_TIM_ConfigClockSource+0x214>)
 8006172:	4293      	cmp	r3, r2
 8006174:	f200 80c6 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1f0>
 8006178:	4a6c      	ldr	r2, [pc, #432]	; (800632c <HAL_TIM_ConfigClockSource+0x218>)
 800617a:	4293      	cmp	r3, r2
 800617c:	f000 80b9 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006180:	4a6a      	ldr	r2, [pc, #424]	; (800632c <HAL_TIM_ConfigClockSource+0x218>)
 8006182:	4293      	cmp	r3, r2
 8006184:	f200 80be 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1f0>
 8006188:	4a69      	ldr	r2, [pc, #420]	; (8006330 <HAL_TIM_ConfigClockSource+0x21c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	f000 80b1 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006190:	4a67      	ldr	r2, [pc, #412]	; (8006330 <HAL_TIM_ConfigClockSource+0x21c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	f200 80b6 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1f0>
 8006198:	4a66      	ldr	r2, [pc, #408]	; (8006334 <HAL_TIM_ConfigClockSource+0x220>)
 800619a:	4293      	cmp	r3, r2
 800619c:	f000 80a9 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1de>
 80061a0:	4a64      	ldr	r2, [pc, #400]	; (8006334 <HAL_TIM_ConfigClockSource+0x220>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	f200 80ae 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1f0>
 80061a8:	4a63      	ldr	r2, [pc, #396]	; (8006338 <HAL_TIM_ConfigClockSource+0x224>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	f000 80a1 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1de>
 80061b0:	4a61      	ldr	r2, [pc, #388]	; (8006338 <HAL_TIM_ConfigClockSource+0x224>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	f200 80a6 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1f0>
 80061b8:	4a60      	ldr	r2, [pc, #384]	; (800633c <HAL_TIM_ConfigClockSource+0x228>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	f000 8099 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1de>
 80061c0:	4a5e      	ldr	r2, [pc, #376]	; (800633c <HAL_TIM_ConfigClockSource+0x228>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	f200 809e 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1f0>
 80061c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80061cc:	f000 8091 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1de>
 80061d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80061d4:	f200 8096 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1f0>
 80061d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061dc:	f000 8089 	beq.w	80062f2 <HAL_TIM_ConfigClockSource+0x1de>
 80061e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061e4:	f200 808e 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1f0>
 80061e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ec:	d03e      	beq.n	800626c <HAL_TIM_ConfigClockSource+0x158>
 80061ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f2:	f200 8087 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x1f0>
 80061f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fa:	f000 8086 	beq.w	800630a <HAL_TIM_ConfigClockSource+0x1f6>
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006202:	d87f      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1f0>
 8006204:	2b70      	cmp	r3, #112	; 0x70
 8006206:	d01a      	beq.n	800623e <HAL_TIM_ConfigClockSource+0x12a>
 8006208:	2b70      	cmp	r3, #112	; 0x70
 800620a:	d87b      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1f0>
 800620c:	2b60      	cmp	r3, #96	; 0x60
 800620e:	d050      	beq.n	80062b2 <HAL_TIM_ConfigClockSource+0x19e>
 8006210:	2b60      	cmp	r3, #96	; 0x60
 8006212:	d877      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1f0>
 8006214:	2b50      	cmp	r3, #80	; 0x50
 8006216:	d03c      	beq.n	8006292 <HAL_TIM_ConfigClockSource+0x17e>
 8006218:	2b50      	cmp	r3, #80	; 0x50
 800621a:	d873      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1f0>
 800621c:	2b40      	cmp	r3, #64	; 0x40
 800621e:	d058      	beq.n	80062d2 <HAL_TIM_ConfigClockSource+0x1be>
 8006220:	2b40      	cmp	r3, #64	; 0x40
 8006222:	d86f      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1f0>
 8006224:	2b30      	cmp	r3, #48	; 0x30
 8006226:	d064      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006228:	2b30      	cmp	r3, #48	; 0x30
 800622a:	d86b      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1f0>
 800622c:	2b20      	cmp	r3, #32
 800622e:	d060      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006230:	2b20      	cmp	r3, #32
 8006232:	d867      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x1f0>
 8006234:	2b00      	cmp	r3, #0
 8006236:	d05c      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x1de>
 8006238:	2b10      	cmp	r3, #16
 800623a:	d05a      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x1de>
 800623c:	e062      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800624e:	f000 ff45 	bl	80070dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006260:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	609a      	str	r2, [r3, #8]
      break;
 800626a:	e04f      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800627c:	f000 ff2e 	bl	80070dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800628e:	609a      	str	r2, [r3, #8]
      break;
 8006290:	e03c      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800629e:	461a      	mov	r2, r3
 80062a0:	f000 fdea 	bl	8006e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2150      	movs	r1, #80	; 0x50
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fef9 	bl	80070a2 <TIM_ITRx_SetConfig>
      break;
 80062b0:	e02c      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062be:	461a      	mov	r2, r3
 80062c0:	f000 fe46 	bl	8006f50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2160      	movs	r1, #96	; 0x60
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fee9 	bl	80070a2 <TIM_ITRx_SetConfig>
      break;
 80062d0:	e01c      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062de:	461a      	mov	r2, r3
 80062e0:	f000 fdca 	bl	8006e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2140      	movs	r1, #64	; 0x40
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fed9 	bl	80070a2 <TIM_ITRx_SetConfig>
      break;
 80062f0:	e00c      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4619      	mov	r1, r3
 80062fc:	4610      	mov	r0, r2
 80062fe:	f000 fed0 	bl	80070a2 <TIM_ITRx_SetConfig>
      break;
 8006302:	e003      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
      break;
 8006308:	e000      	b.n	800630c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800630a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800631c:	7bfb      	ldrb	r3, [r7, #15]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	00100070 	.word	0x00100070
 800632c:	00100060 	.word	0x00100060
 8006330:	00100050 	.word	0x00100050
 8006334:	00100040 	.word	0x00100040
 8006338:	00100030 	.word	0x00100030
 800633c:	00100020 	.word	0x00100020

08006340 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006354:	2302      	movs	r3, #2
 8006356:	e031      	b.n	80063bc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fc30 	bl	8006bd0 <TIM_SlaveTimer_SetConfig>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d009      	beq.n	800638a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e018      	b.n	80063bc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68da      	ldr	r2, [r3, #12]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006398:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063a8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a4c      	ldr	r2, [pc, #304]	; (8006558 <TIM_Base_SetConfig+0x144>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d017      	beq.n	800645c <TIM_Base_SetConfig+0x48>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006432:	d013      	beq.n	800645c <TIM_Base_SetConfig+0x48>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a49      	ldr	r2, [pc, #292]	; (800655c <TIM_Base_SetConfig+0x148>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00f      	beq.n	800645c <TIM_Base_SetConfig+0x48>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a48      	ldr	r2, [pc, #288]	; (8006560 <TIM_Base_SetConfig+0x14c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00b      	beq.n	800645c <TIM_Base_SetConfig+0x48>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a47      	ldr	r2, [pc, #284]	; (8006564 <TIM_Base_SetConfig+0x150>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d007      	beq.n	800645c <TIM_Base_SetConfig+0x48>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a46      	ldr	r2, [pc, #280]	; (8006568 <TIM_Base_SetConfig+0x154>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d003      	beq.n	800645c <TIM_Base_SetConfig+0x48>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a45      	ldr	r2, [pc, #276]	; (800656c <TIM_Base_SetConfig+0x158>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d108      	bne.n	800646e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a39      	ldr	r2, [pc, #228]	; (8006558 <TIM_Base_SetConfig+0x144>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d023      	beq.n	80064be <TIM_Base_SetConfig+0xaa>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647c:	d01f      	beq.n	80064be <TIM_Base_SetConfig+0xaa>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a36      	ldr	r2, [pc, #216]	; (800655c <TIM_Base_SetConfig+0x148>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d01b      	beq.n	80064be <TIM_Base_SetConfig+0xaa>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a35      	ldr	r2, [pc, #212]	; (8006560 <TIM_Base_SetConfig+0x14c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d017      	beq.n	80064be <TIM_Base_SetConfig+0xaa>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a34      	ldr	r2, [pc, #208]	; (8006564 <TIM_Base_SetConfig+0x150>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d013      	beq.n	80064be <TIM_Base_SetConfig+0xaa>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a33      	ldr	r2, [pc, #204]	; (8006568 <TIM_Base_SetConfig+0x154>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00f      	beq.n	80064be <TIM_Base_SetConfig+0xaa>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a33      	ldr	r2, [pc, #204]	; (8006570 <TIM_Base_SetConfig+0x15c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00b      	beq.n	80064be <TIM_Base_SetConfig+0xaa>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a32      	ldr	r2, [pc, #200]	; (8006574 <TIM_Base_SetConfig+0x160>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d007      	beq.n	80064be <TIM_Base_SetConfig+0xaa>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a31      	ldr	r2, [pc, #196]	; (8006578 <TIM_Base_SetConfig+0x164>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d003      	beq.n	80064be <TIM_Base_SetConfig+0xaa>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a2c      	ldr	r2, [pc, #176]	; (800656c <TIM_Base_SetConfig+0x158>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d108      	bne.n	80064d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a18      	ldr	r2, [pc, #96]	; (8006558 <TIM_Base_SetConfig+0x144>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d013      	beq.n	8006524 <TIM_Base_SetConfig+0x110>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a1a      	ldr	r2, [pc, #104]	; (8006568 <TIM_Base_SetConfig+0x154>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00f      	beq.n	8006524 <TIM_Base_SetConfig+0x110>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a1a      	ldr	r2, [pc, #104]	; (8006570 <TIM_Base_SetConfig+0x15c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00b      	beq.n	8006524 <TIM_Base_SetConfig+0x110>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a19      	ldr	r2, [pc, #100]	; (8006574 <TIM_Base_SetConfig+0x160>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d007      	beq.n	8006524 <TIM_Base_SetConfig+0x110>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a18      	ldr	r2, [pc, #96]	; (8006578 <TIM_Base_SetConfig+0x164>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_Base_SetConfig+0x110>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a13      	ldr	r2, [pc, #76]	; (800656c <TIM_Base_SetConfig+0x158>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d103      	bne.n	800652c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b01      	cmp	r3, #1
 800653c:	d105      	bne.n	800654a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f023 0201 	bic.w	r2, r3, #1
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	611a      	str	r2, [r3, #16]
  }
}
 800654a:	bf00      	nop
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	40012c00 	.word	0x40012c00
 800655c:	40000400 	.word	0x40000400
 8006560:	40000800 	.word	0x40000800
 8006564:	40000c00 	.word	0x40000c00
 8006568:	40013400 	.word	0x40013400
 800656c:	40015000 	.word	0x40015000
 8006570:	40014000 	.word	0x40014000
 8006574:	40014400 	.word	0x40014400
 8006578:	40014800 	.word	0x40014800

0800657c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	f023 0201 	bic.w	r2, r3, #1
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 0303 	bic.w	r3, r3, #3
 80065b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f023 0302 	bic.w	r3, r3, #2
 80065c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a30      	ldr	r2, [pc, #192]	; (8006698 <TIM_OC1_SetConfig+0x11c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d013      	beq.n	8006604 <TIM_OC1_SetConfig+0x88>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a2f      	ldr	r2, [pc, #188]	; (800669c <TIM_OC1_SetConfig+0x120>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d00f      	beq.n	8006604 <TIM_OC1_SetConfig+0x88>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a2e      	ldr	r2, [pc, #184]	; (80066a0 <TIM_OC1_SetConfig+0x124>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00b      	beq.n	8006604 <TIM_OC1_SetConfig+0x88>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a2d      	ldr	r2, [pc, #180]	; (80066a4 <TIM_OC1_SetConfig+0x128>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d007      	beq.n	8006604 <TIM_OC1_SetConfig+0x88>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a2c      	ldr	r2, [pc, #176]	; (80066a8 <TIM_OC1_SetConfig+0x12c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d003      	beq.n	8006604 <TIM_OC1_SetConfig+0x88>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a2b      	ldr	r2, [pc, #172]	; (80066ac <TIM_OC1_SetConfig+0x130>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d10c      	bne.n	800661e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f023 0308 	bic.w	r3, r3, #8
 800660a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f023 0304 	bic.w	r3, r3, #4
 800661c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a1d      	ldr	r2, [pc, #116]	; (8006698 <TIM_OC1_SetConfig+0x11c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d013      	beq.n	800664e <TIM_OC1_SetConfig+0xd2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a1c      	ldr	r2, [pc, #112]	; (800669c <TIM_OC1_SetConfig+0x120>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00f      	beq.n	800664e <TIM_OC1_SetConfig+0xd2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a1b      	ldr	r2, [pc, #108]	; (80066a0 <TIM_OC1_SetConfig+0x124>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d00b      	beq.n	800664e <TIM_OC1_SetConfig+0xd2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a1a      	ldr	r2, [pc, #104]	; (80066a4 <TIM_OC1_SetConfig+0x128>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d007      	beq.n	800664e <TIM_OC1_SetConfig+0xd2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a19      	ldr	r2, [pc, #100]	; (80066a8 <TIM_OC1_SetConfig+0x12c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d003      	beq.n	800664e <TIM_OC1_SetConfig+0xd2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a18      	ldr	r2, [pc, #96]	; (80066ac <TIM_OC1_SetConfig+0x130>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d111      	bne.n	8006672 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800665c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	4313      	orrs	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4313      	orrs	r3, r2
 8006670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	621a      	str	r2, [r3, #32]
}
 800668c:	bf00      	nop
 800668e:	371c      	adds	r7, #28
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	40012c00 	.word	0x40012c00
 800669c:	40013400 	.word	0x40013400
 80066a0:	40014000 	.word	0x40014000
 80066a4:	40014400 	.word	0x40014400
 80066a8:	40014800 	.word	0x40014800
 80066ac:	40015000 	.word	0x40015000

080066b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b087      	sub	sp, #28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	f023 0210 	bic.w	r2, r3, #16
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	021b      	lsls	r3, r3, #8
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f023 0320 	bic.w	r3, r3, #32
 80066fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4313      	orrs	r3, r2
 800670a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a2c      	ldr	r2, [pc, #176]	; (80067c0 <TIM_OC2_SetConfig+0x110>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d007      	beq.n	8006724 <TIM_OC2_SetConfig+0x74>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a2b      	ldr	r2, [pc, #172]	; (80067c4 <TIM_OC2_SetConfig+0x114>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_OC2_SetConfig+0x74>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a2a      	ldr	r2, [pc, #168]	; (80067c8 <TIM_OC2_SetConfig+0x118>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d10d      	bne.n	8006740 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800672a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4313      	orrs	r3, r2
 8006736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800673e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a1f      	ldr	r2, [pc, #124]	; (80067c0 <TIM_OC2_SetConfig+0x110>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d013      	beq.n	8006770 <TIM_OC2_SetConfig+0xc0>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a1e      	ldr	r2, [pc, #120]	; (80067c4 <TIM_OC2_SetConfig+0x114>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00f      	beq.n	8006770 <TIM_OC2_SetConfig+0xc0>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a1e      	ldr	r2, [pc, #120]	; (80067cc <TIM_OC2_SetConfig+0x11c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00b      	beq.n	8006770 <TIM_OC2_SetConfig+0xc0>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a1d      	ldr	r2, [pc, #116]	; (80067d0 <TIM_OC2_SetConfig+0x120>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d007      	beq.n	8006770 <TIM_OC2_SetConfig+0xc0>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a1c      	ldr	r2, [pc, #112]	; (80067d4 <TIM_OC2_SetConfig+0x124>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d003      	beq.n	8006770 <TIM_OC2_SetConfig+0xc0>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a17      	ldr	r2, [pc, #92]	; (80067c8 <TIM_OC2_SetConfig+0x118>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d113      	bne.n	8006798 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006776:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800677e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	4313      	orrs	r3, r2
 800678a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	4313      	orrs	r3, r2
 8006796:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	621a      	str	r2, [r3, #32]
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	40012c00 	.word	0x40012c00
 80067c4:	40013400 	.word	0x40013400
 80067c8:	40015000 	.word	0x40015000
 80067cc:	40014000 	.word	0x40014000
 80067d0:	40014400 	.word	0x40014400
 80067d4:	40014800 	.word	0x40014800

080067d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 0303 	bic.w	r3, r3, #3
 8006812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006824:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	021b      	lsls	r3, r3, #8
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	4313      	orrs	r3, r2
 8006830:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a2b      	ldr	r2, [pc, #172]	; (80068e4 <TIM_OC3_SetConfig+0x10c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d007      	beq.n	800684a <TIM_OC3_SetConfig+0x72>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a2a      	ldr	r2, [pc, #168]	; (80068e8 <TIM_OC3_SetConfig+0x110>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d003      	beq.n	800684a <TIM_OC3_SetConfig+0x72>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a29      	ldr	r2, [pc, #164]	; (80068ec <TIM_OC3_SetConfig+0x114>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d10d      	bne.n	8006866 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006850:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	021b      	lsls	r3, r3, #8
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	4313      	orrs	r3, r2
 800685c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a1e      	ldr	r2, [pc, #120]	; (80068e4 <TIM_OC3_SetConfig+0x10c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d013      	beq.n	8006896 <TIM_OC3_SetConfig+0xbe>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a1d      	ldr	r2, [pc, #116]	; (80068e8 <TIM_OC3_SetConfig+0x110>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d00f      	beq.n	8006896 <TIM_OC3_SetConfig+0xbe>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a1d      	ldr	r2, [pc, #116]	; (80068f0 <TIM_OC3_SetConfig+0x118>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00b      	beq.n	8006896 <TIM_OC3_SetConfig+0xbe>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a1c      	ldr	r2, [pc, #112]	; (80068f4 <TIM_OC3_SetConfig+0x11c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d007      	beq.n	8006896 <TIM_OC3_SetConfig+0xbe>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a1b      	ldr	r2, [pc, #108]	; (80068f8 <TIM_OC3_SetConfig+0x120>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d003      	beq.n	8006896 <TIM_OC3_SetConfig+0xbe>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a16      	ldr	r2, [pc, #88]	; (80068ec <TIM_OC3_SetConfig+0x114>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d113      	bne.n	80068be <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800689c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	011b      	lsls	r3, r3, #4
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	621a      	str	r2, [r3, #32]
}
 80068d8:	bf00      	nop
 80068da:	371c      	adds	r7, #28
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	40012c00 	.word	0x40012c00
 80068e8:	40013400 	.word	0x40013400
 80068ec:	40015000 	.word	0x40015000
 80068f0:	40014000 	.word	0x40014000
 80068f4:	40014400 	.word	0x40014400
 80068f8:	40014800 	.word	0x40014800

080068fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800692a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	021b      	lsls	r3, r3, #8
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800694a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	031b      	lsls	r3, r3, #12
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	4313      	orrs	r3, r2
 8006956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a2c      	ldr	r2, [pc, #176]	; (8006a0c <TIM_OC4_SetConfig+0x110>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d007      	beq.n	8006970 <TIM_OC4_SetConfig+0x74>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a2b      	ldr	r2, [pc, #172]	; (8006a10 <TIM_OC4_SetConfig+0x114>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d003      	beq.n	8006970 <TIM_OC4_SetConfig+0x74>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a2a      	ldr	r2, [pc, #168]	; (8006a14 <TIM_OC4_SetConfig+0x118>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d10d      	bne.n	800698c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	031b      	lsls	r3, r3, #12
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800698a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a1f      	ldr	r2, [pc, #124]	; (8006a0c <TIM_OC4_SetConfig+0x110>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d013      	beq.n	80069bc <TIM_OC4_SetConfig+0xc0>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a1e      	ldr	r2, [pc, #120]	; (8006a10 <TIM_OC4_SetConfig+0x114>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d00f      	beq.n	80069bc <TIM_OC4_SetConfig+0xc0>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a1e      	ldr	r2, [pc, #120]	; (8006a18 <TIM_OC4_SetConfig+0x11c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00b      	beq.n	80069bc <TIM_OC4_SetConfig+0xc0>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a1d      	ldr	r2, [pc, #116]	; (8006a1c <TIM_OC4_SetConfig+0x120>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d007      	beq.n	80069bc <TIM_OC4_SetConfig+0xc0>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a1c      	ldr	r2, [pc, #112]	; (8006a20 <TIM_OC4_SetConfig+0x124>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d003      	beq.n	80069bc <TIM_OC4_SetConfig+0xc0>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a17      	ldr	r2, [pc, #92]	; (8006a14 <TIM_OC4_SetConfig+0x118>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d113      	bne.n	80069e4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	019b      	lsls	r3, r3, #6
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	019b      	lsls	r3, r3, #6
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40012c00 	.word	0x40012c00
 8006a10:	40013400 	.word	0x40013400
 8006a14:	40015000 	.word	0x40015000
 8006a18:	40014000 	.word	0x40014000
 8006a1c:	40014400 	.word	0x40014400
 8006a20:	40014800 	.word	0x40014800

08006a24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	041b      	lsls	r3, r3, #16
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a19      	ldr	r2, [pc, #100]	; (8006ae0 <TIM_OC5_SetConfig+0xbc>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d013      	beq.n	8006aa6 <TIM_OC5_SetConfig+0x82>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a18      	ldr	r2, [pc, #96]	; (8006ae4 <TIM_OC5_SetConfig+0xc0>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d00f      	beq.n	8006aa6 <TIM_OC5_SetConfig+0x82>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a17      	ldr	r2, [pc, #92]	; (8006ae8 <TIM_OC5_SetConfig+0xc4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d00b      	beq.n	8006aa6 <TIM_OC5_SetConfig+0x82>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a16      	ldr	r2, [pc, #88]	; (8006aec <TIM_OC5_SetConfig+0xc8>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d007      	beq.n	8006aa6 <TIM_OC5_SetConfig+0x82>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a15      	ldr	r2, [pc, #84]	; (8006af0 <TIM_OC5_SetConfig+0xcc>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d003      	beq.n	8006aa6 <TIM_OC5_SetConfig+0x82>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a14      	ldr	r2, [pc, #80]	; (8006af4 <TIM_OC5_SetConfig+0xd0>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d109      	bne.n	8006aba <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	021b      	lsls	r3, r3, #8
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	621a      	str	r2, [r3, #32]
}
 8006ad4:	bf00      	nop
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	40012c00 	.word	0x40012c00
 8006ae4:	40013400 	.word	0x40013400
 8006ae8:	40014000 	.word	0x40014000
 8006aec:	40014400 	.word	0x40014400
 8006af0:	40014800 	.word	0x40014800
 8006af4:	40015000 	.word	0x40015000

08006af8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	021b      	lsls	r3, r3, #8
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	051b      	lsls	r3, r3, #20
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a1a      	ldr	r2, [pc, #104]	; (8006bb8 <TIM_OC6_SetConfig+0xc0>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d013      	beq.n	8006b7c <TIM_OC6_SetConfig+0x84>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a19      	ldr	r2, [pc, #100]	; (8006bbc <TIM_OC6_SetConfig+0xc4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00f      	beq.n	8006b7c <TIM_OC6_SetConfig+0x84>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a18      	ldr	r2, [pc, #96]	; (8006bc0 <TIM_OC6_SetConfig+0xc8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00b      	beq.n	8006b7c <TIM_OC6_SetConfig+0x84>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a17      	ldr	r2, [pc, #92]	; (8006bc4 <TIM_OC6_SetConfig+0xcc>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d007      	beq.n	8006b7c <TIM_OC6_SetConfig+0x84>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a16      	ldr	r2, [pc, #88]	; (8006bc8 <TIM_OC6_SetConfig+0xd0>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d003      	beq.n	8006b7c <TIM_OC6_SetConfig+0x84>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a15      	ldr	r2, [pc, #84]	; (8006bcc <TIM_OC6_SetConfig+0xd4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d109      	bne.n	8006b90 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	029b      	lsls	r3, r3, #10
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	621a      	str	r2, [r3, #32]
}
 8006baa:	bf00      	nop
 8006bac:	371c      	adds	r7, #28
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	40012c00 	.word	0x40012c00
 8006bbc:	40013400 	.word	0x40013400
 8006bc0:	40014000 	.word	0x40014000
 8006bc4:	40014400 	.word	0x40014400
 8006bc8:	40014800 	.word	0x40014800
 8006bcc:	40015000 	.word	0x40015000

08006bd0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c02:	f023 0307 	bic.w	r3, r3, #7
 8006c06:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	4a56      	ldr	r2, [pc, #344]	; (8006d78 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	f000 80a2 	beq.w	8006d6a <TIM_SlaveTimer_SetConfig+0x19a>
 8006c26:	4a54      	ldr	r2, [pc, #336]	; (8006d78 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	f200 809b 	bhi.w	8006d64 <TIM_SlaveTimer_SetConfig+0x194>
 8006c2e:	4a53      	ldr	r2, [pc, #332]	; (8006d7c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	f000 809a 	beq.w	8006d6a <TIM_SlaveTimer_SetConfig+0x19a>
 8006c36:	4a51      	ldr	r2, [pc, #324]	; (8006d7c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	f200 8093 	bhi.w	8006d64 <TIM_SlaveTimer_SetConfig+0x194>
 8006c3e:	4a50      	ldr	r2, [pc, #320]	; (8006d80 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	f000 8092 	beq.w	8006d6a <TIM_SlaveTimer_SetConfig+0x19a>
 8006c46:	4a4e      	ldr	r2, [pc, #312]	; (8006d80 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	f200 808b 	bhi.w	8006d64 <TIM_SlaveTimer_SetConfig+0x194>
 8006c4e:	4a4d      	ldr	r2, [pc, #308]	; (8006d84 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	f000 808a 	beq.w	8006d6a <TIM_SlaveTimer_SetConfig+0x19a>
 8006c56:	4a4b      	ldr	r2, [pc, #300]	; (8006d84 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	f200 8083 	bhi.w	8006d64 <TIM_SlaveTimer_SetConfig+0x194>
 8006c5e:	4a4a      	ldr	r2, [pc, #296]	; (8006d88 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	f000 8082 	beq.w	8006d6a <TIM_SlaveTimer_SetConfig+0x19a>
 8006c66:	4a48      	ldr	r2, [pc, #288]	; (8006d88 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d87b      	bhi.n	8006d64 <TIM_SlaveTimer_SetConfig+0x194>
 8006c6c:	4a47      	ldr	r2, [pc, #284]	; (8006d8c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d07b      	beq.n	8006d6a <TIM_SlaveTimer_SetConfig+0x19a>
 8006c72:	4a46      	ldr	r2, [pc, #280]	; (8006d8c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d875      	bhi.n	8006d64 <TIM_SlaveTimer_SetConfig+0x194>
 8006c78:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006c7c:	d075      	beq.n	8006d6a <TIM_SlaveTimer_SetConfig+0x19a>
 8006c7e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006c82:	d86f      	bhi.n	8006d64 <TIM_SlaveTimer_SetConfig+0x194>
 8006c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c88:	d06f      	beq.n	8006d6a <TIM_SlaveTimer_SetConfig+0x19a>
 8006c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c8e:	d869      	bhi.n	8006d64 <TIM_SlaveTimer_SetConfig+0x194>
 8006c90:	2b70      	cmp	r3, #112	; 0x70
 8006c92:	d01a      	beq.n	8006cca <TIM_SlaveTimer_SetConfig+0xfa>
 8006c94:	2b70      	cmp	r3, #112	; 0x70
 8006c96:	d865      	bhi.n	8006d64 <TIM_SlaveTimer_SetConfig+0x194>
 8006c98:	2b60      	cmp	r3, #96	; 0x60
 8006c9a:	d059      	beq.n	8006d50 <TIM_SlaveTimer_SetConfig+0x180>
 8006c9c:	2b60      	cmp	r3, #96	; 0x60
 8006c9e:	d861      	bhi.n	8006d64 <TIM_SlaveTimer_SetConfig+0x194>
 8006ca0:	2b50      	cmp	r3, #80	; 0x50
 8006ca2:	d04b      	beq.n	8006d3c <TIM_SlaveTimer_SetConfig+0x16c>
 8006ca4:	2b50      	cmp	r3, #80	; 0x50
 8006ca6:	d85d      	bhi.n	8006d64 <TIM_SlaveTimer_SetConfig+0x194>
 8006ca8:	2b40      	cmp	r3, #64	; 0x40
 8006caa:	d019      	beq.n	8006ce0 <TIM_SlaveTimer_SetConfig+0x110>
 8006cac:	2b40      	cmp	r3, #64	; 0x40
 8006cae:	d859      	bhi.n	8006d64 <TIM_SlaveTimer_SetConfig+0x194>
 8006cb0:	2b30      	cmp	r3, #48	; 0x30
 8006cb2:	d05a      	beq.n	8006d6a <TIM_SlaveTimer_SetConfig+0x19a>
 8006cb4:	2b30      	cmp	r3, #48	; 0x30
 8006cb6:	d855      	bhi.n	8006d64 <TIM_SlaveTimer_SetConfig+0x194>
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	d056      	beq.n	8006d6a <TIM_SlaveTimer_SetConfig+0x19a>
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	d851      	bhi.n	8006d64 <TIM_SlaveTimer_SetConfig+0x194>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d052      	beq.n	8006d6a <TIM_SlaveTimer_SetConfig+0x19a>
 8006cc4:	2b10      	cmp	r3, #16
 8006cc6:	d050      	beq.n	8006d6a <TIM_SlaveTimer_SetConfig+0x19a>
 8006cc8:	e04c      	b.n	8006d64 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006cda:	f000 f9ff 	bl	80070dc <TIM_ETR_SetConfig>
      break;
 8006cde:	e045      	b.n	8006d6c <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b05      	cmp	r3, #5
 8006ce6:	d004      	beq.n	8006cf2 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006cec:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8006cf0:	d101      	bne.n	8006cf6 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e03b      	b.n	8006d6e <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	6a1a      	ldr	r2, [r3, #32]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f022 0201 	bic.w	r2, r2, #1
 8006d0c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d1c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	621a      	str	r2, [r3, #32]
      break;
 8006d3a:	e017      	b.n	8006d6c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f000 f895 	bl	8006e78 <TIM_TI1_ConfigInputStage>
      break;
 8006d4e:	e00d      	b.n	8006d6c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	f000 f8f7 	bl	8006f50 <TIM_TI2_ConfigInputStage>
      break;
 8006d62:	e003      	b.n	8006d6c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	75fb      	strb	r3, [r7, #23]
      break;
 8006d68:	e000      	b.n	8006d6c <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8006d6a:	bf00      	nop
  }

  return status;
 8006d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	00100070 	.word	0x00100070
 8006d7c:	00100060 	.word	0x00100060
 8006d80:	00100050 	.word	0x00100050
 8006d84:	00100040 	.word	0x00100040
 8006d88:	00100030 	.word	0x00100030
 8006d8c:	00100020 	.word	0x00100020

08006d90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
 8006d9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	f023 0201 	bic.w	r2, r3, #1
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4a28      	ldr	r2, [pc, #160]	; (8006e5c <TIM_TI1_SetConfig+0xcc>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d01b      	beq.n	8006df6 <TIM_TI1_SetConfig+0x66>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc4:	d017      	beq.n	8006df6 <TIM_TI1_SetConfig+0x66>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4a25      	ldr	r2, [pc, #148]	; (8006e60 <TIM_TI1_SetConfig+0xd0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d013      	beq.n	8006df6 <TIM_TI1_SetConfig+0x66>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4a24      	ldr	r2, [pc, #144]	; (8006e64 <TIM_TI1_SetConfig+0xd4>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d00f      	beq.n	8006df6 <TIM_TI1_SetConfig+0x66>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4a23      	ldr	r2, [pc, #140]	; (8006e68 <TIM_TI1_SetConfig+0xd8>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00b      	beq.n	8006df6 <TIM_TI1_SetConfig+0x66>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4a22      	ldr	r2, [pc, #136]	; (8006e6c <TIM_TI1_SetConfig+0xdc>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d007      	beq.n	8006df6 <TIM_TI1_SetConfig+0x66>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4a21      	ldr	r2, [pc, #132]	; (8006e70 <TIM_TI1_SetConfig+0xe0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d003      	beq.n	8006df6 <TIM_TI1_SetConfig+0x66>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4a20      	ldr	r2, [pc, #128]	; (8006e74 <TIM_TI1_SetConfig+0xe4>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d101      	bne.n	8006dfa <TIM_TI1_SetConfig+0x6a>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e000      	b.n	8006dfc <TIM_TI1_SetConfig+0x6c>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d008      	beq.n	8006e12 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f023 0303 	bic.w	r3, r3, #3
 8006e06:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	e003      	b.n	8006e1a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f043 0301 	orr.w	r3, r3, #1
 8006e18:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f023 030a 	bic.w	r3, r3, #10
 8006e34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f003 030a 	and.w	r3, r3, #10
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	621a      	str	r2, [r3, #32]
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	40012c00 	.word	0x40012c00
 8006e60:	40000400 	.word	0x40000400
 8006e64:	40000800 	.word	0x40000800
 8006e68:	40000c00 	.word	0x40000c00
 8006e6c:	40013400 	.word	0x40013400
 8006e70:	40014000 	.word	0x40014000
 8006e74:	40015000 	.word	0x40015000

08006e78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	f023 0201 	bic.w	r2, r3, #1
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	011b      	lsls	r3, r3, #4
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f023 030a 	bic.w	r3, r3, #10
 8006eb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	621a      	str	r2, [r3, #32]
}
 8006eca:	bf00      	nop
 8006ecc:	371c      	adds	r7, #28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b087      	sub	sp, #28
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	607a      	str	r2, [r7, #4]
 8006ee2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	f023 0210 	bic.w	r2, r3, #16
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	021b      	lsls	r3, r3, #8
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	031b      	lsls	r3, r3, #12
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f28:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	621a      	str	r2, [r3, #32]
}
 8006f44:	bf00      	nop
 8006f46:	371c      	adds	r7, #28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	f023 0210 	bic.w	r2, r3, #16
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	031b      	lsls	r3, r3, #12
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f8c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	011b      	lsls	r3, r3, #4
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	621a      	str	r2, [r3, #32]
}
 8006fa4:	bf00      	nop
 8006fa6:	371c      	adds	r7, #28
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b087      	sub	sp, #28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
 8006fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f023 0303 	bic.w	r3, r3, #3
 8006fdc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	011b      	lsls	r3, r3, #4
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	693a      	ldr	r2, [r7, #16]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007000:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	021b      	lsls	r3, r3, #8
 8007006:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	4313      	orrs	r3, r2
 800700e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	621a      	str	r2, [r3, #32]
}
 800701c:	bf00      	nop
 800701e:	371c      	adds	r7, #28
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	69db      	ldr	r3, [r3, #28]
 800704c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007054:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	021b      	lsls	r3, r3, #8
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	4313      	orrs	r3, r2
 800705e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007066:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	031b      	lsls	r3, r3, #12
 800706c:	b29b      	uxth	r3, r3
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4313      	orrs	r3, r2
 8007072:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800707a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	031b      	lsls	r3, r3, #12
 8007080:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	4313      	orrs	r3, r2
 8007088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	621a      	str	r2, [r3, #32]
}
 8007096:	bf00      	nop
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b085      	sub	sp, #20
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80070b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	f043 0307 	orr.w	r3, r3, #7
 80070c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	609a      	str	r2, [r3, #8]
}
 80070d0:	bf00      	nop
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
 80070e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	021a      	lsls	r2, r3, #8
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	431a      	orrs	r2, r3
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	4313      	orrs	r3, r2
 8007104:	697a      	ldr	r2, [r7, #20]
 8007106:	4313      	orrs	r3, r2
 8007108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	609a      	str	r2, [r3, #8]
}
 8007110:	bf00      	nop
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f003 031f 	and.w	r3, r3, #31
 800712e:	2201      	movs	r2, #1
 8007130:	fa02 f303 	lsl.w	r3, r2, r3
 8007134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6a1a      	ldr	r2, [r3, #32]
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	43db      	mvns	r3, r3
 800713e:	401a      	ands	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a1a      	ldr	r2, [r3, #32]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f003 031f 	and.w	r3, r3, #31
 800714e:	6879      	ldr	r1, [r7, #4]
 8007150:	fa01 f303 	lsl.w	r3, r1, r3
 8007154:	431a      	orrs	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	621a      	str	r2, [r3, #32]
}
 800715a:	bf00      	nop
 800715c:	371c      	adds	r7, #28
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
	...

08007168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007178:	2b01      	cmp	r3, #1
 800717a:	d101      	bne.n	8007180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800717c:	2302      	movs	r3, #2
 800717e:	e074      	b.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a34      	ldr	r2, [pc, #208]	; (8007278 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d009      	beq.n	80071be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a33      	ldr	r2, [pc, #204]	; (800727c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d004      	beq.n	80071be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a31      	ldr	r2, [pc, #196]	; (8007280 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d108      	bne.n	80071d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80071d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a21      	ldr	r2, [pc, #132]	; (8007278 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d022      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007200:	d01d      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a1f      	ldr	r2, [pc, #124]	; (8007284 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d018      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a1d      	ldr	r2, [pc, #116]	; (8007288 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d013      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a1c      	ldr	r2, [pc, #112]	; (800728c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d00e      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a15      	ldr	r2, [pc, #84]	; (800727c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d009      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a18      	ldr	r2, [pc, #96]	; (8007290 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d004      	beq.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a11      	ldr	r2, [pc, #68]	; (8007280 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d10c      	bne.n	8007258 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007244:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	4313      	orrs	r3, r2
 800724e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	40012c00 	.word	0x40012c00
 800727c:	40013400 	.word	0x40013400
 8007280:	40015000 	.word	0x40015000
 8007284:	40000400 	.word	0x40000400
 8007288:	40000800 	.word	0x40000800
 800728c:	40000c00 	.word	0x40000c00
 8007290:	40014000 	.word	0x40014000

08007294 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e042      	b.n	80073b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007338:	2b00      	cmp	r3, #0
 800733a:	d106      	bne.n	800734a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7fa fa0f 	bl	8001768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2224      	movs	r2, #36	; 0x24
 800734e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 0201 	bic.w	r2, r2, #1
 8007360:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007366:	2b00      	cmp	r3, #0
 8007368:	d002      	beq.n	8007370 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fb24 	bl	80079b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f825 	bl	80073c0 <UART_SetConfig>
 8007376:	4603      	mov	r3, r0
 8007378:	2b01      	cmp	r3, #1
 800737a:	d101      	bne.n	8007380 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e01b      	b.n	80073b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800738e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689a      	ldr	r2, [r3, #8]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800739e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f042 0201 	orr.w	r2, r2, #1
 80073ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fba3 	bl	8007afc <UART_CheckIdleState>
 80073b6:	4603      	mov	r3, r0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073c4:	b08c      	sub	sp, #48	; 0x30
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	689a      	ldr	r2, [r3, #8]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	431a      	orrs	r2, r3
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	431a      	orrs	r2, r3
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	4baa      	ldr	r3, [pc, #680]	; (8007698 <UART_SetConfig+0x2d8>)
 80073f0:	4013      	ands	r3, r2
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	6812      	ldr	r2, [r2, #0]
 80073f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073f8:	430b      	orrs	r3, r1
 80073fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	68da      	ldr	r2, [r3, #12]
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a9f      	ldr	r2, [pc, #636]	; (800769c <UART_SetConfig+0x2dc>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d004      	beq.n	800742c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	6a1b      	ldr	r3, [r3, #32]
 8007426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007428:	4313      	orrs	r3, r2
 800742a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007436:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	6812      	ldr	r2, [r2, #0]
 800743e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007440:	430b      	orrs	r3, r1
 8007442:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	f023 010f 	bic.w	r1, r3, #15
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a90      	ldr	r2, [pc, #576]	; (80076a0 <UART_SetConfig+0x2e0>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d125      	bne.n	80074b0 <UART_SetConfig+0xf0>
 8007464:	4b8f      	ldr	r3, [pc, #572]	; (80076a4 <UART_SetConfig+0x2e4>)
 8007466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800746a:	f003 0303 	and.w	r3, r3, #3
 800746e:	2b03      	cmp	r3, #3
 8007470:	d81a      	bhi.n	80074a8 <UART_SetConfig+0xe8>
 8007472:	a201      	add	r2, pc, #4	; (adr r2, 8007478 <UART_SetConfig+0xb8>)
 8007474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007478:	08007489 	.word	0x08007489
 800747c:	08007499 	.word	0x08007499
 8007480:	08007491 	.word	0x08007491
 8007484:	080074a1 	.word	0x080074a1
 8007488:	2301      	movs	r3, #1
 800748a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800748e:	e116      	b.n	80076be <UART_SetConfig+0x2fe>
 8007490:	2302      	movs	r3, #2
 8007492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007496:	e112      	b.n	80076be <UART_SetConfig+0x2fe>
 8007498:	2304      	movs	r3, #4
 800749a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800749e:	e10e      	b.n	80076be <UART_SetConfig+0x2fe>
 80074a0:	2308      	movs	r3, #8
 80074a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074a6:	e10a      	b.n	80076be <UART_SetConfig+0x2fe>
 80074a8:	2310      	movs	r3, #16
 80074aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ae:	e106      	b.n	80076be <UART_SetConfig+0x2fe>
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a7c      	ldr	r2, [pc, #496]	; (80076a8 <UART_SetConfig+0x2e8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d138      	bne.n	800752c <UART_SetConfig+0x16c>
 80074ba:	4b7a      	ldr	r3, [pc, #488]	; (80076a4 <UART_SetConfig+0x2e4>)
 80074bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c0:	f003 030c 	and.w	r3, r3, #12
 80074c4:	2b0c      	cmp	r3, #12
 80074c6:	d82d      	bhi.n	8007524 <UART_SetConfig+0x164>
 80074c8:	a201      	add	r2, pc, #4	; (adr r2, 80074d0 <UART_SetConfig+0x110>)
 80074ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ce:	bf00      	nop
 80074d0:	08007505 	.word	0x08007505
 80074d4:	08007525 	.word	0x08007525
 80074d8:	08007525 	.word	0x08007525
 80074dc:	08007525 	.word	0x08007525
 80074e0:	08007515 	.word	0x08007515
 80074e4:	08007525 	.word	0x08007525
 80074e8:	08007525 	.word	0x08007525
 80074ec:	08007525 	.word	0x08007525
 80074f0:	0800750d 	.word	0x0800750d
 80074f4:	08007525 	.word	0x08007525
 80074f8:	08007525 	.word	0x08007525
 80074fc:	08007525 	.word	0x08007525
 8007500:	0800751d 	.word	0x0800751d
 8007504:	2300      	movs	r3, #0
 8007506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800750a:	e0d8      	b.n	80076be <UART_SetConfig+0x2fe>
 800750c:	2302      	movs	r3, #2
 800750e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007512:	e0d4      	b.n	80076be <UART_SetConfig+0x2fe>
 8007514:	2304      	movs	r3, #4
 8007516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800751a:	e0d0      	b.n	80076be <UART_SetConfig+0x2fe>
 800751c:	2308      	movs	r3, #8
 800751e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007522:	e0cc      	b.n	80076be <UART_SetConfig+0x2fe>
 8007524:	2310      	movs	r3, #16
 8007526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800752a:	e0c8      	b.n	80076be <UART_SetConfig+0x2fe>
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a5e      	ldr	r2, [pc, #376]	; (80076ac <UART_SetConfig+0x2ec>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d125      	bne.n	8007582 <UART_SetConfig+0x1c2>
 8007536:	4b5b      	ldr	r3, [pc, #364]	; (80076a4 <UART_SetConfig+0x2e4>)
 8007538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007540:	2b30      	cmp	r3, #48	; 0x30
 8007542:	d016      	beq.n	8007572 <UART_SetConfig+0x1b2>
 8007544:	2b30      	cmp	r3, #48	; 0x30
 8007546:	d818      	bhi.n	800757a <UART_SetConfig+0x1ba>
 8007548:	2b20      	cmp	r3, #32
 800754a:	d00a      	beq.n	8007562 <UART_SetConfig+0x1a2>
 800754c:	2b20      	cmp	r3, #32
 800754e:	d814      	bhi.n	800757a <UART_SetConfig+0x1ba>
 8007550:	2b00      	cmp	r3, #0
 8007552:	d002      	beq.n	800755a <UART_SetConfig+0x19a>
 8007554:	2b10      	cmp	r3, #16
 8007556:	d008      	beq.n	800756a <UART_SetConfig+0x1aa>
 8007558:	e00f      	b.n	800757a <UART_SetConfig+0x1ba>
 800755a:	2300      	movs	r3, #0
 800755c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007560:	e0ad      	b.n	80076be <UART_SetConfig+0x2fe>
 8007562:	2302      	movs	r3, #2
 8007564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007568:	e0a9      	b.n	80076be <UART_SetConfig+0x2fe>
 800756a:	2304      	movs	r3, #4
 800756c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007570:	e0a5      	b.n	80076be <UART_SetConfig+0x2fe>
 8007572:	2308      	movs	r3, #8
 8007574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007578:	e0a1      	b.n	80076be <UART_SetConfig+0x2fe>
 800757a:	2310      	movs	r3, #16
 800757c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007580:	e09d      	b.n	80076be <UART_SetConfig+0x2fe>
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a4a      	ldr	r2, [pc, #296]	; (80076b0 <UART_SetConfig+0x2f0>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d125      	bne.n	80075d8 <UART_SetConfig+0x218>
 800758c:	4b45      	ldr	r3, [pc, #276]	; (80076a4 <UART_SetConfig+0x2e4>)
 800758e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007592:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007596:	2bc0      	cmp	r3, #192	; 0xc0
 8007598:	d016      	beq.n	80075c8 <UART_SetConfig+0x208>
 800759a:	2bc0      	cmp	r3, #192	; 0xc0
 800759c:	d818      	bhi.n	80075d0 <UART_SetConfig+0x210>
 800759e:	2b80      	cmp	r3, #128	; 0x80
 80075a0:	d00a      	beq.n	80075b8 <UART_SetConfig+0x1f8>
 80075a2:	2b80      	cmp	r3, #128	; 0x80
 80075a4:	d814      	bhi.n	80075d0 <UART_SetConfig+0x210>
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <UART_SetConfig+0x1f0>
 80075aa:	2b40      	cmp	r3, #64	; 0x40
 80075ac:	d008      	beq.n	80075c0 <UART_SetConfig+0x200>
 80075ae:	e00f      	b.n	80075d0 <UART_SetConfig+0x210>
 80075b0:	2300      	movs	r3, #0
 80075b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075b6:	e082      	b.n	80076be <UART_SetConfig+0x2fe>
 80075b8:	2302      	movs	r3, #2
 80075ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075be:	e07e      	b.n	80076be <UART_SetConfig+0x2fe>
 80075c0:	2304      	movs	r3, #4
 80075c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075c6:	e07a      	b.n	80076be <UART_SetConfig+0x2fe>
 80075c8:	2308      	movs	r3, #8
 80075ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075ce:	e076      	b.n	80076be <UART_SetConfig+0x2fe>
 80075d0:	2310      	movs	r3, #16
 80075d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075d6:	e072      	b.n	80076be <UART_SetConfig+0x2fe>
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a35      	ldr	r2, [pc, #212]	; (80076b4 <UART_SetConfig+0x2f4>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d12a      	bne.n	8007638 <UART_SetConfig+0x278>
 80075e2:	4b30      	ldr	r3, [pc, #192]	; (80076a4 <UART_SetConfig+0x2e4>)
 80075e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075f0:	d01a      	beq.n	8007628 <UART_SetConfig+0x268>
 80075f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075f6:	d81b      	bhi.n	8007630 <UART_SetConfig+0x270>
 80075f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075fc:	d00c      	beq.n	8007618 <UART_SetConfig+0x258>
 80075fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007602:	d815      	bhi.n	8007630 <UART_SetConfig+0x270>
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <UART_SetConfig+0x250>
 8007608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800760c:	d008      	beq.n	8007620 <UART_SetConfig+0x260>
 800760e:	e00f      	b.n	8007630 <UART_SetConfig+0x270>
 8007610:	2300      	movs	r3, #0
 8007612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007616:	e052      	b.n	80076be <UART_SetConfig+0x2fe>
 8007618:	2302      	movs	r3, #2
 800761a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800761e:	e04e      	b.n	80076be <UART_SetConfig+0x2fe>
 8007620:	2304      	movs	r3, #4
 8007622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007626:	e04a      	b.n	80076be <UART_SetConfig+0x2fe>
 8007628:	2308      	movs	r3, #8
 800762a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800762e:	e046      	b.n	80076be <UART_SetConfig+0x2fe>
 8007630:	2310      	movs	r3, #16
 8007632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007636:	e042      	b.n	80076be <UART_SetConfig+0x2fe>
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a17      	ldr	r2, [pc, #92]	; (800769c <UART_SetConfig+0x2dc>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d13a      	bne.n	80076b8 <UART_SetConfig+0x2f8>
 8007642:	4b18      	ldr	r3, [pc, #96]	; (80076a4 <UART_SetConfig+0x2e4>)
 8007644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007648:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800764c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007650:	d01a      	beq.n	8007688 <UART_SetConfig+0x2c8>
 8007652:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007656:	d81b      	bhi.n	8007690 <UART_SetConfig+0x2d0>
 8007658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800765c:	d00c      	beq.n	8007678 <UART_SetConfig+0x2b8>
 800765e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007662:	d815      	bhi.n	8007690 <UART_SetConfig+0x2d0>
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <UART_SetConfig+0x2b0>
 8007668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800766c:	d008      	beq.n	8007680 <UART_SetConfig+0x2c0>
 800766e:	e00f      	b.n	8007690 <UART_SetConfig+0x2d0>
 8007670:	2300      	movs	r3, #0
 8007672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007676:	e022      	b.n	80076be <UART_SetConfig+0x2fe>
 8007678:	2302      	movs	r3, #2
 800767a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800767e:	e01e      	b.n	80076be <UART_SetConfig+0x2fe>
 8007680:	2304      	movs	r3, #4
 8007682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007686:	e01a      	b.n	80076be <UART_SetConfig+0x2fe>
 8007688:	2308      	movs	r3, #8
 800768a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800768e:	e016      	b.n	80076be <UART_SetConfig+0x2fe>
 8007690:	2310      	movs	r3, #16
 8007692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007696:	e012      	b.n	80076be <UART_SetConfig+0x2fe>
 8007698:	cfff69f3 	.word	0xcfff69f3
 800769c:	40008000 	.word	0x40008000
 80076a0:	40013800 	.word	0x40013800
 80076a4:	40021000 	.word	0x40021000
 80076a8:	40004400 	.word	0x40004400
 80076ac:	40004800 	.word	0x40004800
 80076b0:	40004c00 	.word	0x40004c00
 80076b4:	40005000 	.word	0x40005000
 80076b8:	2310      	movs	r3, #16
 80076ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4aae      	ldr	r2, [pc, #696]	; (800797c <UART_SetConfig+0x5bc>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	f040 8097 	bne.w	80077f8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80076ce:	2b08      	cmp	r3, #8
 80076d0:	d823      	bhi.n	800771a <UART_SetConfig+0x35a>
 80076d2:	a201      	add	r2, pc, #4	; (adr r2, 80076d8 <UART_SetConfig+0x318>)
 80076d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d8:	080076fd 	.word	0x080076fd
 80076dc:	0800771b 	.word	0x0800771b
 80076e0:	08007705 	.word	0x08007705
 80076e4:	0800771b 	.word	0x0800771b
 80076e8:	0800770b 	.word	0x0800770b
 80076ec:	0800771b 	.word	0x0800771b
 80076f0:	0800771b 	.word	0x0800771b
 80076f4:	0800771b 	.word	0x0800771b
 80076f8:	08007713 	.word	0x08007713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076fc:	f7fd fb3a 	bl	8004d74 <HAL_RCC_GetPCLK1Freq>
 8007700:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007702:	e010      	b.n	8007726 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007704:	4b9e      	ldr	r3, [pc, #632]	; (8007980 <UART_SetConfig+0x5c0>)
 8007706:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007708:	e00d      	b.n	8007726 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800770a:	f7fd fac5 	bl	8004c98 <HAL_RCC_GetSysClockFreq>
 800770e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007710:	e009      	b.n	8007726 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007718:	e005      	b.n	8007726 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007724:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 8130 	beq.w	800798e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	4a94      	ldr	r2, [pc, #592]	; (8007984 <UART_SetConfig+0x5c4>)
 8007734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007738:	461a      	mov	r2, r3
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007740:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	4613      	mov	r3, r2
 8007748:	005b      	lsls	r3, r3, #1
 800774a:	4413      	add	r3, r2
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	429a      	cmp	r2, r3
 8007750:	d305      	bcc.n	800775e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007758:	69ba      	ldr	r2, [r7, #24]
 800775a:	429a      	cmp	r2, r3
 800775c:	d903      	bls.n	8007766 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007764:	e113      	b.n	800798e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	2200      	movs	r2, #0
 800776a:	60bb      	str	r3, [r7, #8]
 800776c:	60fa      	str	r2, [r7, #12]
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007772:	4a84      	ldr	r2, [pc, #528]	; (8007984 <UART_SetConfig+0x5c4>)
 8007774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007778:	b29b      	uxth	r3, r3
 800777a:	2200      	movs	r2, #0
 800777c:	603b      	str	r3, [r7, #0]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007784:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007788:	f7f9 f82c 	bl	80007e4 <__aeabi_uldivmod>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4610      	mov	r0, r2
 8007792:	4619      	mov	r1, r3
 8007794:	f04f 0200 	mov.w	r2, #0
 8007798:	f04f 0300 	mov.w	r3, #0
 800779c:	020b      	lsls	r3, r1, #8
 800779e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077a2:	0202      	lsls	r2, r0, #8
 80077a4:	6979      	ldr	r1, [r7, #20]
 80077a6:	6849      	ldr	r1, [r1, #4]
 80077a8:	0849      	lsrs	r1, r1, #1
 80077aa:	2000      	movs	r0, #0
 80077ac:	460c      	mov	r4, r1
 80077ae:	4605      	mov	r5, r0
 80077b0:	eb12 0804 	adds.w	r8, r2, r4
 80077b4:	eb43 0905 	adc.w	r9, r3, r5
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	469a      	mov	sl, r3
 80077c0:	4693      	mov	fp, r2
 80077c2:	4652      	mov	r2, sl
 80077c4:	465b      	mov	r3, fp
 80077c6:	4640      	mov	r0, r8
 80077c8:	4649      	mov	r1, r9
 80077ca:	f7f9 f80b 	bl	80007e4 <__aeabi_uldivmod>
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	4613      	mov	r3, r2
 80077d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077dc:	d308      	bcc.n	80077f0 <UART_SetConfig+0x430>
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077e4:	d204      	bcs.n	80077f0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6a3a      	ldr	r2, [r7, #32]
 80077ec:	60da      	str	r2, [r3, #12]
 80077ee:	e0ce      	b.n	800798e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80077f6:	e0ca      	b.n	800798e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007800:	d166      	bne.n	80078d0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007802:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007806:	2b08      	cmp	r3, #8
 8007808:	d827      	bhi.n	800785a <UART_SetConfig+0x49a>
 800780a:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <UART_SetConfig+0x450>)
 800780c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007810:	08007835 	.word	0x08007835
 8007814:	0800783d 	.word	0x0800783d
 8007818:	08007845 	.word	0x08007845
 800781c:	0800785b 	.word	0x0800785b
 8007820:	0800784b 	.word	0x0800784b
 8007824:	0800785b 	.word	0x0800785b
 8007828:	0800785b 	.word	0x0800785b
 800782c:	0800785b 	.word	0x0800785b
 8007830:	08007853 	.word	0x08007853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007834:	f7fd fa9e 	bl	8004d74 <HAL_RCC_GetPCLK1Freq>
 8007838:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800783a:	e014      	b.n	8007866 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800783c:	f7fd fab0 	bl	8004da0 <HAL_RCC_GetPCLK2Freq>
 8007840:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007842:	e010      	b.n	8007866 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007844:	4b4e      	ldr	r3, [pc, #312]	; (8007980 <UART_SetConfig+0x5c0>)
 8007846:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007848:	e00d      	b.n	8007866 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800784a:	f7fd fa25 	bl	8004c98 <HAL_RCC_GetSysClockFreq>
 800784e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007850:	e009      	b.n	8007866 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007856:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007858:	e005      	b.n	8007866 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007864:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 8090 	beq.w	800798e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	4a44      	ldr	r2, [pc, #272]	; (8007984 <UART_SetConfig+0x5c4>)
 8007874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007878:	461a      	mov	r2, r3
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007880:	005a      	lsls	r2, r3, #1
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	085b      	lsrs	r3, r3, #1
 8007888:	441a      	add	r2, r3
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007892:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	2b0f      	cmp	r3, #15
 8007898:	d916      	bls.n	80078c8 <UART_SetConfig+0x508>
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a0:	d212      	bcs.n	80078c8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	f023 030f 	bic.w	r3, r3, #15
 80078aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	085b      	lsrs	r3, r3, #1
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	f003 0307 	and.w	r3, r3, #7
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	8bfb      	ldrh	r3, [r7, #30]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	8bfa      	ldrh	r2, [r7, #30]
 80078c4:	60da      	str	r2, [r3, #12]
 80078c6:	e062      	b.n	800798e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80078ce:	e05e      	b.n	800798e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d828      	bhi.n	800792a <UART_SetConfig+0x56a>
 80078d8:	a201      	add	r2, pc, #4	; (adr r2, 80078e0 <UART_SetConfig+0x520>)
 80078da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078de:	bf00      	nop
 80078e0:	08007905 	.word	0x08007905
 80078e4:	0800790d 	.word	0x0800790d
 80078e8:	08007915 	.word	0x08007915
 80078ec:	0800792b 	.word	0x0800792b
 80078f0:	0800791b 	.word	0x0800791b
 80078f4:	0800792b 	.word	0x0800792b
 80078f8:	0800792b 	.word	0x0800792b
 80078fc:	0800792b 	.word	0x0800792b
 8007900:	08007923 	.word	0x08007923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007904:	f7fd fa36 	bl	8004d74 <HAL_RCC_GetPCLK1Freq>
 8007908:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800790a:	e014      	b.n	8007936 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800790c:	f7fd fa48 	bl	8004da0 <HAL_RCC_GetPCLK2Freq>
 8007910:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007912:	e010      	b.n	8007936 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007914:	4b1a      	ldr	r3, [pc, #104]	; (8007980 <UART_SetConfig+0x5c0>)
 8007916:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007918:	e00d      	b.n	8007936 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800791a:	f7fd f9bd 	bl	8004c98 <HAL_RCC_GetSysClockFreq>
 800791e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007920:	e009      	b.n	8007936 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007926:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007928:	e005      	b.n	8007936 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007934:	bf00      	nop
    }

    if (pclk != 0U)
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	2b00      	cmp	r3, #0
 800793a:	d028      	beq.n	800798e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	4a10      	ldr	r2, [pc, #64]	; (8007984 <UART_SetConfig+0x5c4>)
 8007942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007946:	461a      	mov	r2, r3
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	fbb3 f2f2 	udiv	r2, r3, r2
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	085b      	lsrs	r3, r3, #1
 8007954:	441a      	add	r2, r3
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	fbb2 f3f3 	udiv	r3, r2, r3
 800795e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	2b0f      	cmp	r3, #15
 8007964:	d910      	bls.n	8007988 <UART_SetConfig+0x5c8>
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800796c:	d20c      	bcs.n	8007988 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	b29a      	uxth	r2, r3
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	60da      	str	r2, [r3, #12]
 8007978:	e009      	b.n	800798e <UART_SetConfig+0x5ce>
 800797a:	bf00      	nop
 800797c:	40008000 	.word	0x40008000
 8007980:	00f42400 	.word	0x00f42400
 8007984:	08008084 	.word	0x08008084
      }
      else
      {
        ret = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	2201      	movs	r2, #1
 8007992:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	2201      	movs	r2, #1
 800799a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2200      	movs	r2, #0
 80079a2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	2200      	movs	r2, #0
 80079a8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80079aa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3730      	adds	r7, #48	; 0x30
 80079b2:	46bd      	mov	sp, r7
 80079b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080079b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c4:	f003 0308 	and.w	r3, r3, #8
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00a      	beq.n	80079e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a08:	f003 0302 	and.w	r3, r3, #2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00a      	beq.n	8007a26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2a:	f003 0304 	and.w	r3, r3, #4
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4c:	f003 0310 	and.w	r3, r3, #16
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d01a      	beq.n	8007ace <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ab6:	d10a      	bne.n	8007ace <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	605a      	str	r2, [r3, #4]
  }
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b098      	sub	sp, #96	; 0x60
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b0c:	f7fa f83c 	bl	8001b88 <HAL_GetTick>
 8007b10:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0308 	and.w	r3, r3, #8
 8007b1c:	2b08      	cmp	r3, #8
 8007b1e:	d12f      	bne.n	8007b80 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f88e 	bl	8007c50 <UART_WaitOnFlagUntilTimeout>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d022      	beq.n	8007b80 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b42:	e853 3f00 	ldrex	r3, [r3]
 8007b46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b4e:	653b      	str	r3, [r7, #80]	; 0x50
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	461a      	mov	r2, r3
 8007b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b58:	647b      	str	r3, [r7, #68]	; 0x44
 8007b5a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b60:	e841 2300 	strex	r3, r2, [r1]
 8007b64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1e6      	bne.n	8007b3a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e063      	b.n	8007c48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0304 	and.w	r3, r3, #4
 8007b8a:	2b04      	cmp	r3, #4
 8007b8c:	d149      	bne.n	8007c22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b96:	2200      	movs	r2, #0
 8007b98:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f857 	bl	8007c50 <UART_WaitOnFlagUntilTimeout>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d03c      	beq.n	8007c22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	e853 3f00 	ldrex	r3, [r3]
 8007bb4:	623b      	str	r3, [r7, #32]
   return(result);
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8007bc8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e6      	bne.n	8007ba8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3308      	adds	r3, #8
 8007be0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f023 0301 	bic.w	r3, r3, #1
 8007bf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bfa:	61fa      	str	r2, [r7, #28]
 8007bfc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	69b9      	ldr	r1, [r7, #24]
 8007c00:	69fa      	ldr	r2, [r7, #28]
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	617b      	str	r3, [r7, #20]
   return(result);
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e5      	bne.n	8007bda <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e012      	b.n	8007c48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2220      	movs	r2, #32
 8007c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3758      	adds	r7, #88	; 0x58
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	603b      	str	r3, [r7, #0]
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c60:	e04f      	b.n	8007d02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c68:	d04b      	beq.n	8007d02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c6a:	f7f9 ff8d 	bl	8001b88 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d302      	bcc.n	8007c80 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e04e      	b.n	8007d22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0304 	and.w	r3, r3, #4
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d037      	beq.n	8007d02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2b80      	cmp	r3, #128	; 0x80
 8007c96:	d034      	beq.n	8007d02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b40      	cmp	r3, #64	; 0x40
 8007c9c:	d031      	beq.n	8007d02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69db      	ldr	r3, [r3, #28]
 8007ca4:	f003 0308 	and.w	r3, r3, #8
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	d110      	bne.n	8007cce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2208      	movs	r2, #8
 8007cb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f000 f838 	bl	8007d2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2208      	movs	r2, #8
 8007cbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e029      	b.n	8007d22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	69db      	ldr	r3, [r3, #28]
 8007cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cdc:	d111      	bne.n	8007d02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 f81e 	bl	8007d2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e00f      	b.n	8007d22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	69da      	ldr	r2, [r3, #28]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	bf0c      	ite	eq
 8007d12:	2301      	moveq	r3, #1
 8007d14:	2300      	movne	r3, #0
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	461a      	mov	r2, r3
 8007d1a:	79fb      	ldrb	r3, [r7, #7]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d0a0      	beq.n	8007c62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b095      	sub	sp, #84	; 0x54
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3a:	e853 3f00 	ldrex	r3, [r3]
 8007d3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d50:	643b      	str	r3, [r7, #64]	; 0x40
 8007d52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d58:	e841 2300 	strex	r3, r2, [r1]
 8007d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1e6      	bne.n	8007d32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3308      	adds	r3, #8
 8007d6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	e853 3f00 	ldrex	r3, [r3]
 8007d72:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d7a:	f023 0301 	bic.w	r3, r3, #1
 8007d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3308      	adds	r3, #8
 8007d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d90:	e841 2300 	strex	r3, r2, [r1]
 8007d94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1e3      	bne.n	8007d64 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d118      	bne.n	8007dd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	e853 3f00 	ldrex	r3, [r3]
 8007db0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f023 0310 	bic.w	r3, r3, #16
 8007db8:	647b      	str	r3, [r7, #68]	; 0x44
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dc2:	61bb      	str	r3, [r7, #24]
 8007dc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc6:	6979      	ldr	r1, [r7, #20]
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	e841 2300 	strex	r3, r2, [r1]
 8007dce:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1e6      	bne.n	8007da4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2220      	movs	r2, #32
 8007dda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007dea:	bf00      	nop
 8007dec:	3754      	adds	r7, #84	; 0x54
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b085      	sub	sp, #20
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d101      	bne.n	8007e0c <HAL_UARTEx_DisableFifoMode+0x16>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e027      	b.n	8007e5c <HAL_UARTEx_DisableFifoMode+0x66>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2224      	movs	r2, #36	; 0x24
 8007e18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 0201 	bic.w	r2, r2, #1
 8007e32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d101      	bne.n	8007e80 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	e02d      	b.n	8007edc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2224      	movs	r2, #36	; 0x24
 8007e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0201 	bic.w	r2, r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f84f 	bl	8007f60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d101      	bne.n	8007efc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	e02d      	b.n	8007f58 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2224      	movs	r2, #36	; 0x24
 8007f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0201 	bic.w	r2, r2, #1
 8007f22:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f811 	bl	8007f60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d108      	bne.n	8007f82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f80:	e031      	b.n	8007fe6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f82:	2308      	movs	r3, #8
 8007f84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f86:	2308      	movs	r3, #8
 8007f88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	0e5b      	lsrs	r3, r3, #25
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	f003 0307 	and.w	r3, r3, #7
 8007f98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	0f5b      	lsrs	r3, r3, #29
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f003 0307 	and.w	r3, r3, #7
 8007fa8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007faa:	7bbb      	ldrb	r3, [r7, #14]
 8007fac:	7b3a      	ldrb	r2, [r7, #12]
 8007fae:	4911      	ldr	r1, [pc, #68]	; (8007ff4 <UARTEx_SetNbDataToProcess+0x94>)
 8007fb0:	5c8a      	ldrb	r2, [r1, r2]
 8007fb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007fb6:	7b3a      	ldrb	r2, [r7, #12]
 8007fb8:	490f      	ldr	r1, [pc, #60]	; (8007ff8 <UARTEx_SetNbDataToProcess+0x98>)
 8007fba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	7b7a      	ldrb	r2, [r7, #13]
 8007fcc:	4909      	ldr	r1, [pc, #36]	; (8007ff4 <UARTEx_SetNbDataToProcess+0x94>)
 8007fce:	5c8a      	ldrb	r2, [r1, r2]
 8007fd0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007fd4:	7b7a      	ldrb	r2, [r7, #13]
 8007fd6:	4908      	ldr	r1, [pc, #32]	; (8007ff8 <UARTEx_SetNbDataToProcess+0x98>)
 8007fd8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fda:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007fe6:	bf00      	nop
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	0800809c 	.word	0x0800809c
 8007ff8:	080080a4 	.word	0x080080a4

08007ffc <memset>:
 8007ffc:	4402      	add	r2, r0
 8007ffe:	4603      	mov	r3, r0
 8008000:	4293      	cmp	r3, r2
 8008002:	d100      	bne.n	8008006 <memset+0xa>
 8008004:	4770      	bx	lr
 8008006:	f803 1b01 	strb.w	r1, [r3], #1
 800800a:	e7f9      	b.n	8008000 <memset+0x4>

0800800c <__libc_init_array>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	4d0d      	ldr	r5, [pc, #52]	; (8008044 <__libc_init_array+0x38>)
 8008010:	4c0d      	ldr	r4, [pc, #52]	; (8008048 <__libc_init_array+0x3c>)
 8008012:	1b64      	subs	r4, r4, r5
 8008014:	10a4      	asrs	r4, r4, #2
 8008016:	2600      	movs	r6, #0
 8008018:	42a6      	cmp	r6, r4
 800801a:	d109      	bne.n	8008030 <__libc_init_array+0x24>
 800801c:	4d0b      	ldr	r5, [pc, #44]	; (800804c <__libc_init_array+0x40>)
 800801e:	4c0c      	ldr	r4, [pc, #48]	; (8008050 <__libc_init_array+0x44>)
 8008020:	f000 f818 	bl	8008054 <_init>
 8008024:	1b64      	subs	r4, r4, r5
 8008026:	10a4      	asrs	r4, r4, #2
 8008028:	2600      	movs	r6, #0
 800802a:	42a6      	cmp	r6, r4
 800802c:	d105      	bne.n	800803a <__libc_init_array+0x2e>
 800802e:	bd70      	pop	{r4, r5, r6, pc}
 8008030:	f855 3b04 	ldr.w	r3, [r5], #4
 8008034:	4798      	blx	r3
 8008036:	3601      	adds	r6, #1
 8008038:	e7ee      	b.n	8008018 <__libc_init_array+0xc>
 800803a:	f855 3b04 	ldr.w	r3, [r5], #4
 800803e:	4798      	blx	r3
 8008040:	3601      	adds	r6, #1
 8008042:	e7f2      	b.n	800802a <__libc_init_array+0x1e>
 8008044:	080080b4 	.word	0x080080b4
 8008048:	080080b4 	.word	0x080080b4
 800804c:	080080b4 	.word	0x080080b4
 8008050:	080080b8 	.word	0x080080b8

08008054 <_init>:
 8008054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008056:	bf00      	nop
 8008058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800805a:	bc08      	pop	{r3}
 800805c:	469e      	mov	lr, r3
 800805e:	4770      	bx	lr

08008060 <_fini>:
 8008060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008062:	bf00      	nop
 8008064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008066:	bc08      	pop	{r3}
 8008068:	469e      	mov	lr, r3
 800806a:	4770      	bx	lr
